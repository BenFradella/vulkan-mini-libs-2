/*
    Copyright (C) 2021 George Cave - gcave@stablecoder.ca

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/*
    This file was auto-generated by the Vulkan Mini Libs 2 utility:
    https://github.com/stablecoder/vulkan-mini-libs-2.git
    or
    https://git.stabletec.com/utilities/vulkan-mini-libs-2.git

    Check for an updated version anytime, or state concerns/bugs.
*/

#ifndef VK_STRUCT_CLEANUP_H
#define VK_STRUCT_CLEANUP_H

/*  USAGE:
    To use, include this header where the declarations for the boolean checks are required.

    On *ONE* compilation unit, include the definition of `#define VK_STRUCT_CLEANUP_CONFIG_MAIN`
    so that the definitions are compiled somewhere following the one definition rule.
*/

#ifdef __cplusplus
extern "C" {
#endif

#include <vulkan/vulkan.h>

#ifdef __cplusplus
static_assert(VK_HEADER_VERSION >= 72, "VK_HEADER_VERSION is from before the supported range.");
static_assert(VK_HEADER_VERSION <= 196, "VK_HEADER_VERSION is from after the supported range.");
#else
_Static_assert(VK_HEADER_VERSION >= 72, "VK_HEADER_VERSION is from before the supported range.");
_Static_assert(VK_HEADER_VERSION <= 196, "VK_HEADER_VERSION is from after the supported range.");
#endif

void cleanup_vk_struct(void const *pData);

inline void cleanup_VkOffset2D(VkOffset2D const *pData) {}

inline void cleanup_VkOffset3D(VkOffset3D const *pData) {}

inline void cleanup_VkExtent2D(VkExtent2D const *pData) {}

inline void cleanup_VkExtent3D(VkExtent3D const *pData) {}

inline void cleanup_VkViewport(VkViewport const *pData) {}

inline void cleanup_VkRect2D(VkRect2D const *pData) {}

inline void cleanup_VkClearRect(VkClearRect const *pData) {}

inline void cleanup_VkComponentMapping(VkComponentMapping const *pData) {}

inline void cleanup_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *pData) {}

inline void cleanup_VkExtensionProperties(VkExtensionProperties const *pData) {}

inline void cleanup_VkLayerProperties(VkLayerProperties const *pData) {}

void cleanup_VkApplicationInfo(VkApplicationInfo const *pData);

void cleanup_VkAllocationCallbacks(VkAllocationCallbacks const *pData);

void cleanup_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *pData);

void cleanup_VkDeviceCreateInfo(VkDeviceCreateInfo const *pData);

void cleanup_VkInstanceCreateInfo(VkInstanceCreateInfo const *pData);

inline void cleanup_VkQueueFamilyProperties(VkQueueFamilyProperties const *pData) {}

inline void cleanup_VkPhysicalDeviceMemoryProperties(
    VkPhysicalDeviceMemoryProperties const *pData) {}

void cleanup_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *pData);

inline void cleanup_VkMemoryRequirements(VkMemoryRequirements const *pData) {}

inline void cleanup_VkSparseImageFormatProperties(VkSparseImageFormatProperties const *pData) {}

inline void cleanup_VkSparseImageMemoryRequirements(VkSparseImageMemoryRequirements const *pData) {}

inline void cleanup_VkMemoryType(VkMemoryType const *pData) {}

inline void cleanup_VkMemoryHeap(VkMemoryHeap const *pData) {}

void cleanup_VkMappedMemoryRange(VkMappedMemoryRange const *pData);

inline void cleanup_VkFormatProperties(VkFormatProperties const *pData) {}

inline void cleanup_VkImageFormatProperties(VkImageFormatProperties const *pData) {}

inline void cleanup_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *pData) {}

inline void cleanup_VkDescriptorImageInfo(VkDescriptorImageInfo const *pData) {}

void cleanup_VkWriteDescriptorSet(VkWriteDescriptorSet const *pData);

void cleanup_VkCopyDescriptorSet(VkCopyDescriptorSet const *pData);

void cleanup_VkBufferCreateInfo(VkBufferCreateInfo const *pData);

void cleanup_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *pData);

inline void cleanup_VkImageSubresource(VkImageSubresource const *pData) {}

inline void cleanup_VkImageSubresourceLayers(VkImageSubresourceLayers const *pData) {}

inline void cleanup_VkImageSubresourceRange(VkImageSubresourceRange const *pData) {}

void cleanup_VkMemoryBarrier(VkMemoryBarrier const *pData);

void cleanup_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *pData);

void cleanup_VkImageMemoryBarrier(VkImageMemoryBarrier const *pData);

void cleanup_VkImageCreateInfo(VkImageCreateInfo const *pData);

inline void cleanup_VkSubresourceLayout(VkSubresourceLayout const *pData) {}

void cleanup_VkImageViewCreateInfo(VkImageViewCreateInfo const *pData);

inline void cleanup_VkBufferCopy(VkBufferCopy const *pData) {}

inline void cleanup_VkSparseMemoryBind(VkSparseMemoryBind const *pData) {}

inline void cleanup_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *pData) {}

void cleanup_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *pData);

void cleanup_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *pData);

void cleanup_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *pData);

void cleanup_VkBindSparseInfo(VkBindSparseInfo const *pData);

inline void cleanup_VkImageCopy(VkImageCopy const *pData) {}

inline void cleanup_VkImageBlit(VkImageBlit const *pData) {}

inline void cleanup_VkBufferImageCopy(VkBufferImageCopy const *pData) {}

inline void cleanup_VkImageResolve(VkImageResolve const *pData) {}

void cleanup_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *pData);

void cleanup_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *pData);

void cleanup_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *pData);

inline void cleanup_VkDescriptorPoolSize(VkDescriptorPoolSize const *pData) {}

void cleanup_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *pData);

void cleanup_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *pData);

inline void cleanup_VkSpecializationMapEntry(VkSpecializationMapEntry const *pData) {}

void cleanup_VkSpecializationInfo(VkSpecializationInfo const *pData);

void cleanup_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *pData);

void cleanup_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *pData);

inline void cleanup_VkVertexInputBindingDescription(VkVertexInputBindingDescription const *pData) {}

inline void cleanup_VkVertexInputAttributeDescription(
    VkVertexInputAttributeDescription const *pData) {}

void cleanup_VkPipelineVertexInputStateCreateInfo(
    VkPipelineVertexInputStateCreateInfo const *pData);

void cleanup_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *pData);

void cleanup_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const *pData);

void cleanup_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *pData);

void cleanup_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *pData);

void cleanup_VkPipelineMultisampleStateCreateInfo(
    VkPipelineMultisampleStateCreateInfo const *pData);

inline void cleanup_VkPipelineColorBlendAttachmentState(
    VkPipelineColorBlendAttachmentState const *pData) {}

void cleanup_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *pData);

void cleanup_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *pData);

inline void cleanup_VkStencilOpState(VkStencilOpState const *pData) {}

void cleanup_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const *pData);

void cleanup_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *pData);

void cleanup_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *pData);

inline void cleanup_VkPushConstantRange(VkPushConstantRange const *pData) {}

void cleanup_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *pData);

void cleanup_VkSamplerCreateInfo(VkSamplerCreateInfo const *pData);

void cleanup_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *pData);

void cleanup_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *pData);

void cleanup_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *pData);

void cleanup_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *pData);

void cleanup_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *pData);

inline void cleanup_VkClearDepthStencilValue(VkClearDepthStencilValue const *pData) {}

inline void cleanup_VkClearAttachment(VkClearAttachment const *pData) {}

inline void cleanup_VkAttachmentDescription(VkAttachmentDescription const *pData) {}

inline void cleanup_VkAttachmentReference(VkAttachmentReference const *pData) {}

void cleanup_VkSubpassDescription(VkSubpassDescription const *pData);

inline void cleanup_VkSubpassDependency(VkSubpassDependency const *pData) {}

void cleanup_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *pData);

void cleanup_VkEventCreateInfo(VkEventCreateInfo const *pData);

void cleanup_VkFenceCreateInfo(VkFenceCreateInfo const *pData);

inline void cleanup_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *pData) {}

inline void cleanup_VkPhysicalDeviceSparseProperties(
    VkPhysicalDeviceSparseProperties const *pData) {}

inline void cleanup_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *pData) {}

void cleanup_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *pData);

void cleanup_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *pData);

void cleanup_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *pData);

inline void cleanup_VkDrawIndirectCommand(VkDrawIndirectCommand const *pData) {}

inline void cleanup_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *pData) {}

inline void cleanup_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *pData) {}

void cleanup_VkSubmitInfo(VkSubmitInfo const *pData);

#if VK_KHR_display
void cleanup_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *pData);
#endif

#if VK_KHR_display
inline void cleanup_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *pData) {}
#endif

#if VK_KHR_display
inline void cleanup_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *pData) {}
#endif

#if VK_KHR_display
inline void cleanup_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *pData) {}
#endif

#if VK_KHR_display
void cleanup_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *pData);
#endif

#if VK_KHR_display
inline void cleanup_VkDisplayPlaneCapabilitiesKHR(VkDisplayPlaneCapabilitiesKHR const *pData) {}
#endif

#if VK_KHR_display
void cleanup_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *pData);
#endif

#if VK_KHR_display_swapchain
void cleanup_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *pData);
#endif

#if VK_KHR_surface
inline void cleanup_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *pData) {}
#endif

#if VK_KHR_android_surface
void cleanup_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *pData);
#endif

#if VK_NN_vi_surface
void cleanup_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *pData);
#endif

#if VK_KHR_wayland_surface
void cleanup_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *pData);
#endif

#if VK_KHR_win32_surface
void cleanup_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *pData);
#endif

#if VK_KHR_xlib_surface
void cleanup_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *pData);
#endif

#if VK_KHR_xcb_surface
void cleanup_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *pData);
#endif

#if VK_KHR_surface
inline void cleanup_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *pData) {}
#endif

#if VK_KHR_swapchain
void cleanup_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *pData);
#endif

#if VK_KHR_swapchain
void cleanup_VkPresentInfoKHR(VkPresentInfoKHR const *pData);
#endif

#if VK_EXT_debug_report
void cleanup_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *pData);
#endif

#if VK_EXT_validation_flags
void cleanup_VkValidationFlagsEXT(VkValidationFlagsEXT const *pData);
#endif

#if VK_AMD_rasterization_order
void cleanup_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *pData);
#endif

#if VK_EXT_debug_marker
void cleanup_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *pData);
#endif

#if VK_EXT_debug_marker
void cleanup_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *pData);
#endif

#if VK_EXT_debug_marker
void cleanup_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *pData);
#endif

#if VK_NV_dedicated_allocation
void cleanup_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *pData);
#endif

#if VK_NV_dedicated_allocation
void cleanup_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *pData);
#endif

#if VK_NV_dedicated_allocation
void cleanup_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *pData);
#endif

#if VK_NV_external_memory_capabilities
inline void cleanup_VkExternalImageFormatPropertiesNV(
    VkExternalImageFormatPropertiesNV const *pData) {}
#endif

#if VK_NV_external_memory
void cleanup_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *pData);
#endif

#if VK_NV_external_memory
void cleanup_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *pData);
#endif

#if VK_NV_external_memory_win32
void cleanup_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *pData);
#endif

#if VK_NV_external_memory_win32
void cleanup_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *pData);
#endif

#if VK_NV_win32_keyed_mutex
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VkWin32KeyedMutexAcquireReleaseInfoNV const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkPhysicalDeviceProperties2KHR(VkPhysicalDeviceProperties2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkFormatProperties2(VkFormatProperties2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkFormatProperties2KHR(VkFormatProperties2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkImageFormatProperties2(VkImageFormatProperties2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkPhysicalDeviceImageFormatInfo2KHR(
    VkPhysicalDeviceImageFormatInfo2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDeviceMemoryProperties2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkSparseImageFormatProperties2KHR(
    VkSparseImageFormatProperties2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *pData);
#endif

#if VK_KHR_get_physical_device_properties2
inline void cleanup_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *pData) {}
#endif

#if VK_KHR_push_descriptor
void cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *pData);
#endif

#if VK_KHR_incremental_present
void cleanup_VkPresentRegionsKHR(VkPresentRegionsKHR const *pData);
#endif

#if VK_KHR_incremental_present
void cleanup_VkPresentRegionKHR(VkPresentRegionKHR const *pData);
#endif

#if VK_KHR_incremental_present
inline void cleanup_VkRectLayerKHR(VkRectLayerKHR const *pData) {}
#endif

#if VK_KHR_variable_pointers
inline void cleanup_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
inline void cleanup_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *pData) {}
#endif

#if VK_VERSION_1_1
inline void cleanup_VkExternalMemoryProperties(VkExternalMemoryProperties const *pData) {}
#endif

#if VK_KHR_external_memory_capabilities
inline void cleanup_VkExternalMemoryPropertiesKHR(VkExternalMemoryPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *pData);
#endif

#if VK_KHR_external_memory_capabilities
inline void cleanup_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *pData);
#endif

#if VK_KHR_external_memory_capabilities
inline void cleanup_VkExternalImageFormatPropertiesKHR(
    VkExternalImageFormatPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *pData);
#endif

#if VK_KHR_external_memory_capabilities
inline void cleanup_VkPhysicalDeviceExternalBufferInfoKHR(
    VkPhysicalDeviceExternalBufferInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalBufferProperties(VkExternalBufferProperties const *pData);
#endif

#if VK_KHR_external_memory_capabilities
inline void cleanup_VkExternalBufferPropertiesKHR(VkExternalBufferPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *pData);
#endif

#if VK_KHR_external_memory_capabilities && VK_KHR_external_semaphore_capabilities &&               \
    VK_KHR_external_fence_capabilities
inline void cleanup_VkPhysicalDeviceIDPropertiesKHR(VkPhysicalDeviceIDPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *pData);
#endif

#if VK_KHR_external_memory
inline void cleanup_VkExternalMemoryImageCreateInfoKHR(
    VkExternalMemoryImageCreateInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *pData);
#endif

#if VK_KHR_external_memory
inline void cleanup_VkExternalMemoryBufferCreateInfoKHR(
    VkExternalMemoryBufferCreateInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *pData);
#endif

#if VK_KHR_external_memory
inline void cleanup_VkExportMemoryAllocateInfoKHR(VkExportMemoryAllocateInfoKHR const *pData) {}
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *pData);
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_memory_fd
void cleanup_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *pData);
#endif

#if VK_KHR_external_memory_fd
void cleanup_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *pData);
#endif

#if VK_KHR_external_memory_fd
void cleanup_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *pData);
#endif

#if VK_KHR_win32_keyed_mutex
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalSemaphoreInfo(
    VkPhysicalDeviceExternalSemaphoreInfo const *pData);
#endif

#if VK_KHR_external_semaphore_capabilities
inline void cleanup_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *pData);
#endif

#if VK_KHR_external_semaphore_capabilities
inline void cleanup_VkExternalSemaphorePropertiesKHR(
    VkExternalSemaphorePropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *pData);
#endif

#if VK_KHR_external_semaphore
inline void cleanup_VkExportSemaphoreCreateInfoKHR(VkExportSemaphoreCreateInfoKHR const *pData) {}
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *pData);
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_semaphore_fd
void cleanup_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *pData);
#endif

#if VK_KHR_external_semaphore_fd
void cleanup_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *pData);
#endif

#if VK_KHR_external_fence_capabilities
inline void cleanup_VkPhysicalDeviceExternalFenceInfoKHR(
    VkPhysicalDeviceExternalFenceInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalFenceProperties(VkExternalFenceProperties const *pData);
#endif

#if VK_KHR_external_fence_capabilities
inline void cleanup_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *pData);
#endif

#if VK_KHR_external_fence
inline void cleanup_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *pData) {}
#endif

#if VK_KHR_external_fence_win32
void cleanup_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_fence_win32
void cleanup_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_fence_win32
void cleanup_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *pData);
#endif

#if VK_KHR_external_fence_fd
void cleanup_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *pData);
#endif

#if VK_KHR_external_fence_fd
void cleanup_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *pData);
#endif

#if VK_KHR_multiview
inline void cleanup_VkPhysicalDeviceMultiviewFeaturesKHR(
    VkPhysicalDeviceMultiviewFeaturesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *pData);
#endif

#if VK_KHR_multiview
inline void cleanup_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *pData);
#endif

#if VK_KHR_multiview
inline void cleanup_VkRenderPassMultiviewCreateInfoKHR(
    VkRenderPassMultiviewCreateInfoKHR const *pData) {}
#endif

#if VK_EXT_display_surface_counter
void cleanup_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *pData);
#endif

#if VK_EXT_display_control
void cleanup_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *pData);
#endif

#if VK_EXT_display_control
void cleanup_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *pData);
#endif

#if VK_EXT_display_control
void cleanup_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *pData);
#endif

#if VK_EXT_display_control
void cleanup_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *pData);
#endif

#if VK_KHR_device_group_creation
inline void cleanup_VkPhysicalDeviceGroupPropertiesKHR(
    VkPhysicalDeviceGroupPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *pData);
#endif

#if VK_KHR_bind_memory2
inline void cleanup_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkBindBufferMemoryDeviceGroupInfoKHR(
    VkBindBufferMemoryDeviceGroupInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *pData);
#endif

#if VK_KHR_bind_memory2
inline void cleanup_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkBindImageMemoryDeviceGroupInfoKHR(
    VkBindImageMemoryDeviceGroupInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkDeviceGroupRenderPassBeginInfoKHR(
    VkDeviceGroupRenderPassBeginInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *pData);
#endif

#if VK_KHR_device_group
inline void cleanup_VkDeviceGroupBindSparseInfoKHR(VkDeviceGroupBindSparseInfoKHR const *pData) {}
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *pData);
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *pData);
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *pData);
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *pData);
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *pData);
#endif

#if VK_KHR_device_group_creation
inline void cleanup_VkDeviceGroupDeviceCreateInfoKHR(
    VkDeviceGroupDeviceCreateInfoKHR const *pData) {}
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
inline void cleanup_VkDescriptorUpdateTemplateEntry(VkDescriptorUpdateTemplateEntry const *pData) {}
#endif

#if VK_KHR_descriptor_update_template
inline void cleanup_VkDescriptorUpdateTemplateEntryKHR(
    VkDescriptorUpdateTemplateEntryKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkDescriptorUpdateTemplateCreateInfo(
    VkDescriptorUpdateTemplateCreateInfo const *pData);
#endif

#if VK_KHR_descriptor_update_template
inline void cleanup_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *pData) {}
#endif

#if VK_EXT_hdr_metadata
inline void cleanup_VkXYColorEXT(VkXYColorEXT const *pData) {}
#endif

#if VK_EXT_hdr_metadata
void cleanup_VkHdrMetadataEXT(VkHdrMetadataEXT const *pData);
#endif

#if VK_GOOGLE_display_timing
inline void cleanup_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *pData) {}
#endif

#if VK_GOOGLE_display_timing
inline void cleanup_VkPastPresentationTimingGOOGLE(VkPastPresentationTimingGOOGLE const *pData) {}
#endif

#if VK_GOOGLE_display_timing
void cleanup_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *pData);
#endif

#if VK_GOOGLE_display_timing
inline void cleanup_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *pData) {}
#endif

#if VK_MVK_ios_surface
void cleanup_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *pData);
#endif

#if VK_MVK_macos_surface
void cleanup_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *pData);
#endif

#if VK_NV_clip_space_w_scaling
inline void cleanup_VkViewportWScalingNV(VkViewportWScalingNV const *pData) {}
#endif

#if VK_NV_clip_space_w_scaling
void cleanup_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *pData);
#endif

#if VK_NV_viewport_swizzle
inline void cleanup_VkViewportSwizzleNV(VkViewportSwizzleNV const *pData) {}
#endif

#if VK_NV_viewport_swizzle
void cleanup_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *pData);
#endif

#if VK_EXT_discard_rectangles
void cleanup_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *pData);
#endif

#if VK_EXT_discard_rectangles
void cleanup_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *pData);
#endif

#if VK_NVX_multiview_per_view_attributes
void cleanup_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *pData);
#endif

#if VK_VERSION_1_1
inline void cleanup_VkInputAttachmentAspectReference(
    VkInputAttachmentAspectReference const *pData) {}
#endif

#if VK_KHR_maintenance2
inline void cleanup_VkInputAttachmentAspectReferenceKHR(
    VkInputAttachmentAspectReferenceKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *pData);
#endif

#if VK_KHR_maintenance2
inline void cleanup_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *pData) {}
#endif

#if VK_KHR_get_surface_capabilities2
void cleanup_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *pData);
#endif

#if VK_KHR_get_surface_capabilities2
void cleanup_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *pData);
#endif

#if VK_KHR_get_surface_capabilities2
void cleanup_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *pData);
#endif

#if VK_KHR_shared_presentable_image
void cleanup_VkSharedPresentSurfaceCapabilitiesKHR(
    VkSharedPresentSurfaceCapabilitiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDevice16BitStorageFeatures(
    VkPhysicalDevice16BitStorageFeatures const *pData);
#endif

#if VK_KHR_16bit_storage
inline void cleanup_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *pData);
#endif

#if VK_KHR_get_memory_requirements2
inline void cleanup_VkBufferMemoryRequirementsInfo2KHR(
    VkBufferMemoryRequirementsInfo2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *pData);
#endif

#if VK_KHR_get_memory_requirements2
inline void cleanup_VkImageMemoryRequirementsInfo2KHR(
    VkImageMemoryRequirementsInfo2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkImageSparseMemoryRequirementsInfo2(
    VkImageSparseMemoryRequirementsInfo2 const *pData);
#endif

#if VK_KHR_get_memory_requirements2
inline void cleanup_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryRequirements2(VkMemoryRequirements2 const *pData);
#endif

#if VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing && VK_VERSION_1_1 && VK_NVX_raytracing
inline void cleanup_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *pData);
#endif

#if VK_KHR_get_memory_requirements2
inline void cleanup_VkSparseImageMemoryRequirements2KHR(
    VkSparseImageMemoryRequirements2KHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *pData);
#endif

#if VK_KHR_maintenance2
inline void cleanup_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *pData);
#endif

#if VK_KHR_dedicated_allocation
inline void cleanup_VkMemoryDedicatedRequirementsKHR(
    VkMemoryDedicatedRequirementsKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *pData);
#endif

#if VK_KHR_dedicated_allocation
inline void cleanup_VkMemoryDedicatedAllocateInfoKHR(
    VkMemoryDedicatedAllocateInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *pData);
#endif

#if VK_KHR_maintenance2
inline void cleanup_VkImageViewUsageCreateInfoKHR(VkImageViewUsageCreateInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *pData);
#endif

#if VK_KHR_maintenance2
inline void cleanup_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *pData);
#endif

#if VK_KHR_sampler_ycbcr_conversion
inline void cleanup_VkSamplerYcbcrConversionInfoKHR(VkSamplerYcbcrConversionInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *pData);
#endif

#if VK_KHR_sampler_ycbcr_conversion
inline void cleanup_VkSamplerYcbcrConversionCreateInfoKHR(
    VkSamplerYcbcrConversionCreateInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *pData);
#endif

#if VK_KHR_sampler_ycbcr_conversion
inline void cleanup_VkBindImagePlaneMemoryInfoKHR(VkBindImagePlaneMemoryInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *pData);
#endif

#if VK_KHR_sampler_ycbcr_conversion
inline void cleanup_VkImagePlaneMemoryRequirementsInfoKHR(
    VkImagePlaneMemoryRequirementsInfoKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *pData);
#endif

#if VK_KHR_sampler_ycbcr_conversion
inline void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *pData);
#endif

#if VK_KHR_sampler_ycbcr_conversion
inline void cleanup_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *pData) {}
#endif

#if VK_AMD_texture_gather_bias_lod
void cleanup_VkTextureLODGatherFormatPropertiesAMD(
    VkTextureLODGatherFormatPropertiesAMD const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *pData);
#endif

#if VK_NV_fragment_coverage_to_color
void cleanup_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *pData);
#endif

#if VK_EXT_sampler_filter_minmax
inline void cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *pData) {}
#endif

#if VK_EXT_sample_locations
inline void cleanup_VkSampleLocationEXT(VkSampleLocationEXT const *pData) {}
#endif

#if VK_EXT_sample_locations
void cleanup_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *pData);
#endif

#if VK_EXT_sample_locations
inline void cleanup_VkAttachmentSampleLocationsEXT(VkAttachmentSampleLocationsEXT const *pData) {}
#endif

#if VK_EXT_sample_locations
inline void cleanup_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *pData) {}
#endif

#if VK_EXT_sample_locations
void cleanup_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *pData);
#endif

#if VK_EXT_sample_locations
void cleanup_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *pData);
#endif

#if VK_EXT_sample_locations
void cleanup_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *pData);
#endif

#if VK_EXT_sample_locations
void cleanup_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *pData);
#endif

#if VK_EXT_sampler_filter_minmax
inline void cleanup_VkSamplerReductionModeCreateInfoEXT(
    VkSamplerReductionModeCreateInfoEXT const *pData) {}
#endif

#if VK_EXT_blend_operation_advanced
void cleanup_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *pData);
#endif

#if VK_EXT_blend_operation_advanced
void cleanup_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *pData);
#endif

#if VK_EXT_blend_operation_advanced
void cleanup_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *pData);
#endif

#if VK_NV_framebuffer_mixed_samples
void cleanup_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *pData);
#endif

#if VK_KHR_image_format_list
inline void cleanup_VkImageFormatListCreateInfoKHR(VkImageFormatListCreateInfoKHR const *pData) {}
#endif

#if VK_EXT_validation_cache
void cleanup_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *pData);
#endif

#if VK_EXT_validation_cache
void cleanup_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *pData);
#endif

#if VK_KHR_maintenance3
inline void cleanup_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *pData) {}
#endif

#if VK_VERSION_1_1
void cleanup_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *pData);
#endif

#if VK_KHR_maintenance3
inline void cleanup_VkDescriptorSetLayoutSupportKHR(VkDescriptorSetLayoutSupportKHR const *pData) {}
#endif

#if VK_VERSION_1_1
inline void cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *pData) {}
#endif

#if VK_ANDROID_native_buffer
void cleanup_VkNativeBufferANDROID(VkNativeBufferANDROID const *pData);
#endif

#if VK_AMD_shader_info
inline void cleanup_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *pData) {}
#endif

#if VK_AMD_shader_info
inline void cleanup_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *pData) {}
#endif

#if VK_EXT_global_priority
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData);
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *pData);
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *pData);
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *pData);
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *pData);
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsMessengerCallbackDataEXT(
    VkDebugUtilsMessengerCallbackDataEXT const *pData);
#endif

#if VK_EXT_external_memory_host
void cleanup_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *pData);
#endif

#if VK_EXT_external_memory_host
void cleanup_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *pData);
#endif

#if VK_EXT_external_memory_host
void cleanup_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *pData);
#endif

#if VK_EXT_conservative_rasterization
void cleanup_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *pData);
#endif

#if VK_AMD_shader_core_properties
void cleanup_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *pData);
#endif

#if VK_EXT_conservative_rasterization
void cleanup_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *pData);
#endif

#if VK_EXT_descriptor_indexing
inline void cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *pData) {}
#endif

#if VK_EXT_descriptor_indexing
inline void cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *pData) {}
#endif

#if VK_EXT_descriptor_indexing
inline void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *pData) {}
#endif

#if VK_EXT_descriptor_indexing
inline void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *pData) {}
#endif

#if VK_EXT_descriptor_indexing
inline void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *pData) {}
#endif

#if VK_EXT_vertex_attribute_divisor
inline void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData) {}
#endif

#if VK_EXT_vertex_attribute_divisor
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData);
#endif

#if VK_EXT_vertex_attribute_divisor
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *pData);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *pData);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *pData);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *pData);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *pData);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *pData);
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkExternalFormatANDROID(VkExternalFormatANDROID const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkDeviceGeneratedCommandsFeaturesNVX(
    VkDeviceGeneratedCommandsFeaturesNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkIndirectCommandsLayoutTokenNVX(
    VkIndirectCommandsLayoutTokenNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkIndirectCommandsLayoutCreateInfoNVX(
    VkIndirectCommandsLayoutCreateInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkObjectTablePipelineEntryNVX(VkObjectTablePipelineEntryNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkObjectTableDescriptorSetEntryNVX(
    VkObjectTableDescriptorSetEntryNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkObjectTableVertexBufferEntryNVX(
    VkObjectTableVertexBufferEntryNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkObjectTableIndexBufferEntryNVX(
    VkObjectTableIndexBufferEntryNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
inline void cleanup_VkObjectTablePushConstantEntryNVX(
    VkObjectTablePushConstantEntryNVX const *pData) {}
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
void cleanup_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void cleanup_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
inline void cleanup_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void cleanup_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_8bit_storage
inline void cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void cleanup_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
void cleanup_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
void cleanup_VkCheckpointDataNV(VkCheckpointDataNV const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_KHR_vulkan_memory_model
inline void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_vertex_attribute_divisor
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
void cleanup_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
void cleanup_VkPhysicalDeviceASTCDecodeFeaturesEXT(
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
void cleanup_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
void cleanup_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
void cleanup_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
void cleanup_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
void cleanup_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_compute_shader_derivatives
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_fragment_shader_barycentric
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
void cleanup_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
inline void cleanup_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
void cleanup_VkPhysicalDeviceMeshShaderFeaturesNV(
    VkPhysicalDeviceMeshShaderFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
void cleanup_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
inline void cleanup_VkDrawMeshTasksIndirectCommandNV(
    VkDrawMeshTasksIndirectCommandNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkGeometryAABBNVX(VkGeometryAABBNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
inline void cleanup_VkGeometryDataNVX(VkGeometryDataNVX const *pData) {}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkGeometryNVX(VkGeometryNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkAccelerationStructureCreateInfoNVX(
    VkAccelerationStructureCreateInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
inline void cleanup_VkConformanceVersionKHR(VkConformanceVersionKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
inline void cleanup_VkPhysicalDeviceDriverPropertiesKHR(
    VkPhysicalDeviceDriverPropertiesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_shader_atomic_int64
inline void cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkDrmFormatModifierPropertiesListEXT(
    VkDrmFormatModifierPropertiesListEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
inline void cleanup_VkDrmFormatModifierPropertiesEXT(
    VkDrmFormatModifierPropertiesEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkImageDrmFormatModifierPropertiesEXT(
    VkImageDrmFormatModifierPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
void cleanup_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
void cleanup_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_pci_bus_info
void cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void cleanup_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void cleanup_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void cleanup_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkGeometryAABBNV(VkGeometryAABBNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
inline void cleanup_VkGeometryDataNV(VkGeometryDataNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkGeometryNV(VkGeometryNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
void cleanup_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *pData);
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_separate_stencil_usage
inline void cleanup_VkImageStencilUsageCreateInfoEXT(
    VkImageStencilUsageCreateInfoEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_scalar_block_layout
inline void cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
void cleanup_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
void cleanup_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
void cleanup_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float16_int8
inline void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float_controls
inline void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
void cleanup_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
inline void cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
inline void cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
void cleanup_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
void cleanup_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
void cleanup_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
inline void cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
inline void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
void cleanup_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
void cleanup_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
void cleanup_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
void cleanup_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
void cleanup_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
void cleanup_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void cleanup_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
void cleanup_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
void cleanup_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
void cleanup_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
void cleanup_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
void cleanup_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_host_query_reset
inline void cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
void cleanup_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
inline void cleanup_VkPipelineCreationFeedbackEXT(VkPipelineCreationFeedbackEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
void cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void cleanup_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void cleanup_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void cleanup_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
void cleanup_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *pData);
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
void cleanup_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *pData);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
void cleanup_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
inline void cleanup_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
void cleanup_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
void cleanup_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 108 && VK_KHR_uniform_buffer_standard_layout
inline void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void cleanup_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void cleanup_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void cleanup_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
inline void cleanup_VkPerformanceValueINTEL(VkPerformanceValueINTEL const *pData) {}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
inline void cleanup_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *pData) {}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
void cleanup_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
void cleanup_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
void cleanup_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_shader_demote_to_helper_invocation
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
void cleanup_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
void cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
inline void cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
inline void cleanup_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
inline void cleanup_VkFramebufferAttachmentImageInfoKHR(
    VkFramebufferAttachmentImageInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
inline void cleanup_VkRenderPassAttachmentBeginInfoKHR(
    VkRenderPassAttachmentBeginInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 115 && VK_KHR_shader_float16_int8
inline void cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
void cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
inline void cleanup_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *pData) {}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
void cleanup_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
void cleanup_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_texture_compression_astc_hdr
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_index_type_uint8
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
void cleanup_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *pData);
#endif

#if VK_HEADER_VERSION >= 118 && VK_EXT_subgroup_size_control
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
void cleanup_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *pData);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineInfoKHR(VkPipelineInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutableStatisticKHR(VkPipelineExecutableStatisticKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
void cleanup_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *pData);
#endif

#if VK_HEADER_VERSION >= 123 && VK_KHR_shader_subgroup_extended_types
inline void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
inline void cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
inline void cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
inline void cleanup_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
inline void cleanup_VkTimelineSemaphoreSubmitInfoKHR(
    VkTimelineSemaphoreSubmitInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
inline void cleanup_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
inline void cleanup_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
void cleanup_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
inline void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
inline void cleanup_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
inline void cleanup_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
inline void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
inline void cleanup_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
inline void cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
inline void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
inline void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
void cleanup_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
inline void cleanup_VkConformanceVersion(VkConformanceVersion const *pData) {}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentDescription2(VkAttachmentDescription2 const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentReference2(VkAttachmentReference2 const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassDescription2(VkSubpassDescription2 const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassDependency2(VkSubpassDependency2 const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassBeginInfo(VkSubpassBeginInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassEndInfo(VkSubpassEndInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentDescriptionStencilLayout(
    VkAttachmentDescriptionStencilLayout const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *pData);
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
void cleanup_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *pData);
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
void cleanup_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
inline void cleanup_VkBindShaderGroupIndirectCommandNV(
    VkBindShaderGroupIndirectCommandNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
inline void cleanup_VkBindIndexBufferIndirectCommandNV(
    VkBindIndexBufferIndirectCommandNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
inline void cleanup_VkBindVertexBufferIndirectCommandNV(
    VkBindVertexBufferIndirectCommandNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
inline void cleanup_VkSetStateFlagsIndirectCommandNV(
    VkSetStateFlagsIndirectCommandNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
inline void cleanup_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkIndirectCommandsLayoutCreateInfoNV(
    VkIndirectCommandsLayoutCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
void cleanup_VkRayTracingShaderGroupCreateInfoKHR(
    VkRayTracingShaderGroupCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
void cleanup_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
inline void cleanup_VkTraceRaysIndirectCommandKHR(VkTraceRaysIndirectCommandKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
void cleanup_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_EXT_pipeline_creation_cache_control
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryAabbsDataKHR(
    VkAccelerationStructureGeometryAabbsDataKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryInstancesDataKHR(
    VkAccelerationStructureGeometryInstancesDataKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryKHR(VkAccelerationStructureGeometryKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureCreateInfoKHR(
    VkAccelerationStructureCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
inline void cleanup_VkAabbPositionsKHR(VkAabbPositionsKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
inline void cleanup_VkAabbPositionsNV(VkAabbPositionsNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
inline void cleanup_VkTransformMatrixKHR(VkTransformMatrixKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
inline void cleanup_VkTransformMatrixNV(VkTransformMatrixNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
inline void cleanup_VkAccelerationStructureInstanceKHR(
    VkAccelerationStructureInstanceKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
inline void cleanup_VkAccelerationStructureInstanceNV(
    VkAccelerationStructureInstanceNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkCopyAccelerationStructureToMemoryInfoKHR(
    VkCopyAccelerationStructureToMemoryInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkCopyMemoryToAccelerationStructureInfoKHR(
    VkCopyMemoryToAccelerationStructureInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
void cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_pipeline_library
void cleanup_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
void cleanup_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
void cleanup_VkDeviceDiagnosticsConfigCreateInfoNV(
    VkDeviceDiagnosticsConfigCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkPhysicalDeviceRayTracingFeaturesKHR(
    VkPhysicalDeviceRayTracingFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
inline void cleanup_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
inline void cleanup_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations
void cleanup_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
void cleanup_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
void cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
void cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void cleanup_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void cleanup_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
void cleanup_VkSamplerCustomBorderColorCreateInfoEXT(
    VkSamplerCustomBorderColorCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
void cleanup_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
void cleanup_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
void cleanup_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
void cleanup_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
void cleanup_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
void cleanup_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
void cleanup_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_image_robustness
void cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
void cleanup_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
void cleanup_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
void cleanup_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkBufferCopy2KHR(VkBufferCopy2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkImageCopy2KHR(VkImageCopy2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkImageBlit2KHR(VkImageBlit2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkImageResolve2KHR(VkImageResolve2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
void cleanup_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void cleanup_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void cleanup_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void cleanup_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_shader_terminate_invocation
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
void cleanup_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *pData);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void cleanup_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
void cleanup_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
void cleanup_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
void cleanup_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
inline void cleanup_VkStridedDeviceAddressRegionKHR(VkStridedDeviceAddressRegionKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
inline void cleanup_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *pData) {}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkAccelerationStructureVersionInfoKHR(
    VkAccelerationStructureVersionInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *pData);
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
void cleanup_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *pData);
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
void cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *pData);
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_zero_initialize_workgroup_memory
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
void cleanup_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkDependencyInfoKHR(VkDependencyInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkQueueFamilyCheckpointProperties2NV(
    VkQueueFamilyCheckpointProperties2NV const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkCheckpointData2NV(VkCheckpointData2NV const *pData);
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
void cleanup_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *pData);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
void cleanup_VkImportMemoryZirconHandleInfoFUCHSIA(
    VkImportMemoryZirconHandleInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
void cleanup_VkMemoryZirconHandlePropertiesFUCHSIA(
    VkMemoryZirconHandlePropertiesFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
void cleanup_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
void cleanup_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
void cleanup_VkSemaphoreGetZirconHandleInfoFUCHSIA(
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
void cleanup_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
void cleanup_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
void cleanup_VkVertexInputAttributeDescription2EXT(
    VkVertexInputAttributeDescription2EXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
void cleanup_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
void cleanup_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoProfilesKHR(VkVideoProfilesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoProfileKHR(VkVideoProfileKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264SessionCreateInfoEXT(
    VkVideoDecodeH264SessionCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265SessionCreateInfoEXT(
    VkVideoDecodeH265SessionCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoSessionParametersUpdateInfoKHR(
    VkVideoSessionParametersUpdateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
void cleanup_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
void cleanup_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
void cleanup_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
void cleanup_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void cleanup_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void cleanup_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void cleanup_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
void cleanup_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
void cleanup_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
void cleanup_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
void cleanup_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
inline void cleanup_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
inline void cleanup_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
void cleanup_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
void cleanup_VkPhysicalDeviceMultiDrawFeaturesEXT(
    VkPhysicalDeviceMultiDrawFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
void cleanup_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
void cleanup_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
void cleanup_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
void cleanup_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void cleanup_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void cleanup_VkAccelerationStructureGeometryMotionTrianglesDataNV(
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void cleanup_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
inline void cleanup_VkSRTDataNV(VkSRTDataNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
inline void cleanup_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
inline void cleanup_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
inline void cleanup_VkAccelerationStructureMotionInstanceNV(
    VkAccelerationStructureMotionInstanceNV const *pData) {}
#endif

#if VK_HEADER_VERSION >= 184
inline void cleanup_VkPipelineCacheHeaderVersionOne(VkPipelineCacheHeaderVersionOne const *pData) {}
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
void cleanup_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *pData);
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
void cleanup_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *pData);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
void cleanup_VkPhysicalDevicePresentIdFeaturesKHR(
    VkPhysicalDevicePresentIdFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
void cleanup_VkPresentIdKHR(VkPresentIdKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
void cleanup_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
void cleanup_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
void cleanup_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *pData);
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
void cleanup_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
void cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
void cleanup_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkImportMemoryBufferCollectionFUCHSIA(
    VkImportMemoryBufferCollectionFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
void cleanup_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
void cleanup_VkFormatProperties3KHR(VkFormatProperties3KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
void cleanup_VkDrmFormatModifierPropertiesList2EXT(
    VkDrmFormatModifierPropertiesList2EXT const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
inline void cleanup_VkDrmFormatModifierProperties2EXT(
    VkDrmFormatModifierProperties2EXT const *pData) {}
#endif

#if VK_HEADER_VERSION >= 195 && VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
void cleanup_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
void cleanup_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *pData);
#endif

#ifdef VK_STRUCT_CLEANUP_CONFIG_MAIN

#include <stdlib.h>

void cleanup_vk_struct(void const *pData) {
  VkBaseInStructure const *pTemp = (VkBaseInStructure const *)pData;

  switch (pTemp->sType) {
  case VK_STRUCTURE_TYPE_APPLICATION_INFO:
    cleanup_VkApplicationInfo((VkApplicationInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
    cleanup_VkDeviceQueueCreateInfo((VkDeviceQueueCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
    cleanup_VkDeviceCreateInfo((VkDeviceCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
    cleanup_VkInstanceCreateInfo((VkInstanceCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
    cleanup_VkMemoryAllocateInfo((VkMemoryAllocateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
    cleanup_VkMappedMemoryRange((VkMappedMemoryRange const *)pData);
    break;

  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
    cleanup_VkWriteDescriptorSet((VkWriteDescriptorSet const *)pData);
    break;

  case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
    cleanup_VkCopyDescriptorSet((VkCopyDescriptorSet const *)pData);
    break;

  case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
    cleanup_VkBufferCreateInfo((VkBufferCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
    cleanup_VkBufferViewCreateInfo((VkBufferViewCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
    cleanup_VkMemoryBarrier((VkMemoryBarrier const *)pData);
    break;

  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
    cleanup_VkBufferMemoryBarrier((VkBufferMemoryBarrier const *)pData);
    break;

  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
    cleanup_VkImageMemoryBarrier((VkImageMemoryBarrier const *)pData);
    break;

  case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
    cleanup_VkImageCreateInfo((VkImageCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
    cleanup_VkImageViewCreateInfo((VkImageViewCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
    cleanup_VkBindSparseInfo((VkBindSparseInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
    cleanup_VkShaderModuleCreateInfo((VkShaderModuleCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
    cleanup_VkDescriptorSetLayoutCreateInfo((VkDescriptorSetLayoutCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
    cleanup_VkDescriptorPoolCreateInfo((VkDescriptorPoolCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
    cleanup_VkDescriptorSetAllocateInfo((VkDescriptorSetAllocateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
    cleanup_VkPipelineShaderStageCreateInfo((VkPipelineShaderStageCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
    cleanup_VkComputePipelineCreateInfo((VkComputePipelineCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    cleanup_VkPipelineVertexInputStateCreateInfo(
        (VkPipelineVertexInputStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    cleanup_VkPipelineInputAssemblyStateCreateInfo(
        (VkPipelineInputAssemblyStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    cleanup_VkPipelineTessellationStateCreateInfo(
        (VkPipelineTessellationStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
    cleanup_VkPipelineViewportStateCreateInfo((VkPipelineViewportStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    cleanup_VkPipelineRasterizationStateCreateInfo(
        (VkPipelineRasterizationStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    cleanup_VkPipelineMultisampleStateCreateInfo(
        (VkPipelineMultisampleStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    cleanup_VkPipelineColorBlendStateCreateInfo((VkPipelineColorBlendStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
    cleanup_VkPipelineDynamicStateCreateInfo((VkPipelineDynamicStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    cleanup_VkPipelineDepthStencilStateCreateInfo(
        (VkPipelineDepthStencilStateCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
    cleanup_VkGraphicsPipelineCreateInfo((VkGraphicsPipelineCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
    cleanup_VkPipelineCacheCreateInfo((VkPipelineCacheCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
    cleanup_VkPipelineLayoutCreateInfo((VkPipelineLayoutCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
    cleanup_VkSamplerCreateInfo((VkSamplerCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
    cleanup_VkCommandPoolCreateInfo((VkCommandPoolCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
    cleanup_VkCommandBufferAllocateInfo((VkCommandBufferAllocateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
    cleanup_VkCommandBufferInheritanceInfo((VkCommandBufferInheritanceInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
    cleanup_VkCommandBufferBeginInfo((VkCommandBufferBeginInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
    cleanup_VkRenderPassBeginInfo((VkRenderPassBeginInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
    cleanup_VkRenderPassCreateInfo((VkRenderPassCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
    cleanup_VkEventCreateInfo((VkEventCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
    cleanup_VkFenceCreateInfo((VkFenceCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
    cleanup_VkSemaphoreCreateInfo((VkSemaphoreCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
    cleanup_VkQueryPoolCreateInfo((VkQueryPoolCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
    cleanup_VkFramebufferCreateInfo((VkFramebufferCreateInfo const *)pData);
    break;

  case VK_STRUCTURE_TYPE_SUBMIT_INFO:
    cleanup_VkSubmitInfo((VkSubmitInfo const *)pData);
    break;

#if VK_KHR_display
  case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
    cleanup_VkDisplayModeCreateInfoKHR((VkDisplayModeCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_display
  case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
    cleanup_VkDisplaySurfaceCreateInfoKHR((VkDisplaySurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_display_swapchain
  case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
    cleanup_VkDisplayPresentInfoKHR((VkDisplayPresentInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_android_surface
  case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
    cleanup_VkAndroidSurfaceCreateInfoKHR((VkAndroidSurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_NN_vi_surface
  case VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN:
    cleanup_VkViSurfaceCreateInfoNN((VkViSurfaceCreateInfoNN const *)pData);
    break;
#endif

#if VK_KHR_wayland_surface
  case VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR:
    cleanup_VkWaylandSurfaceCreateInfoKHR((VkWaylandSurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_win32_surface
  case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR:
    cleanup_VkWin32SurfaceCreateInfoKHR((VkWin32SurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_xlib_surface
  case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
    cleanup_VkXlibSurfaceCreateInfoKHR((VkXlibSurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_xcb_surface
  case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
    cleanup_VkXcbSurfaceCreateInfoKHR((VkXcbSurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_swapchain
  case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
    cleanup_VkSwapchainCreateInfoKHR((VkSwapchainCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_swapchain
  case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
    cleanup_VkPresentInfoKHR((VkPresentInfoKHR const *)pData);
    break;
#endif

#if VK_EXT_debug_report
  case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
    cleanup_VkDebugReportCallbackCreateInfoEXT((VkDebugReportCallbackCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_validation_flags
  case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
    cleanup_VkValidationFlagsEXT((VkValidationFlagsEXT const *)pData);
    break;
#endif

#if VK_AMD_rasterization_order
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    cleanup_VkPipelineRasterizationStateRasterizationOrderAMD(
        (VkPipelineRasterizationStateRasterizationOrderAMD const *)pData);
    break;
#endif

#if VK_EXT_debug_marker
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
    cleanup_VkDebugMarkerObjectNameInfoEXT((VkDebugMarkerObjectNameInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_marker
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
    cleanup_VkDebugMarkerObjectTagInfoEXT((VkDebugMarkerObjectTagInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_marker
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
    cleanup_VkDebugMarkerMarkerInfoEXT((VkDebugMarkerMarkerInfoEXT const *)pData);
    break;
#endif

#if VK_NV_dedicated_allocation
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    cleanup_VkDedicatedAllocationImageCreateInfoNV(
        (VkDedicatedAllocationImageCreateInfoNV const *)pData);
    break;
#endif

#if VK_NV_dedicated_allocation
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    cleanup_VkDedicatedAllocationBufferCreateInfoNV(
        (VkDedicatedAllocationBufferCreateInfoNV const *)pData);
    break;
#endif

#if VK_NV_dedicated_allocation
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    cleanup_VkDedicatedAllocationMemoryAllocateInfoNV(
        (VkDedicatedAllocationMemoryAllocateInfoNV const *)pData);
    break;
#endif

#if VK_NV_external_memory
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
    cleanup_VkExternalMemoryImageCreateInfoNV((VkExternalMemoryImageCreateInfoNV const *)pData);
    break;
#endif

#if VK_NV_external_memory
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
    cleanup_VkExportMemoryAllocateInfoNV((VkExportMemoryAllocateInfoNV const *)pData);
    break;
#endif

#if VK_NV_external_memory_win32
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV:
    cleanup_VkImportMemoryWin32HandleInfoNV((VkImportMemoryWin32HandleInfoNV const *)pData);
    break;
#endif

#if VK_NV_external_memory_win32
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV:
    cleanup_VkExportMemoryWin32HandleInfoNV((VkExportMemoryWin32HandleInfoNV const *)pData);
    break;
#endif

#if VK_NV_win32_keyed_mutex
  case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    cleanup_VkWin32KeyedMutexAcquireReleaseInfoNV(
        (VkWin32KeyedMutexAcquireReleaseInfoNV const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
    cleanup_VkPhysicalDeviceFeatures2((VkPhysicalDeviceFeatures2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
    cleanup_VkPhysicalDeviceProperties2((VkPhysicalDeviceProperties2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
    cleanup_VkFormatProperties2((VkFormatProperties2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
    cleanup_VkImageFormatProperties2((VkImageFormatProperties2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
    cleanup_VkPhysicalDeviceImageFormatInfo2((VkPhysicalDeviceImageFormatInfo2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
    cleanup_VkQueueFamilyProperties2((VkQueueFamilyProperties2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
    cleanup_VkPhysicalDeviceMemoryProperties2((VkPhysicalDeviceMemoryProperties2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
    cleanup_VkSparseImageFormatProperties2((VkSparseImageFormatProperties2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    cleanup_VkPhysicalDeviceSparseImageFormatInfo2(
        (VkPhysicalDeviceSparseImageFormatInfo2 const *)pData);
    break;
#endif

#if VK_KHR_push_descriptor
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
        (VkPhysicalDevicePushDescriptorPropertiesKHR const *)pData);
    break;
#endif

#if VK_KHR_incremental_present
  case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
    cleanup_VkPresentRegionsKHR((VkPresentRegionsKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    cleanup_VkPhysicalDeviceExternalImageFormatInfo(
        (VkPhysicalDeviceExternalImageFormatInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
    cleanup_VkExternalImageFormatProperties((VkExternalImageFormatProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
    cleanup_VkPhysicalDeviceExternalBufferInfo((VkPhysicalDeviceExternalBufferInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
    cleanup_VkExternalBufferProperties((VkExternalBufferProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
    cleanup_VkPhysicalDeviceIDProperties((VkPhysicalDeviceIDProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
    cleanup_VkExternalMemoryImageCreateInfo((VkExternalMemoryImageCreateInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
    cleanup_VkExternalMemoryBufferCreateInfo((VkExternalMemoryBufferCreateInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
    cleanup_VkExportMemoryAllocateInfo((VkExportMemoryAllocateInfo const *)pData);
    break;
#endif

#if VK_KHR_external_memory_win32
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR:
    cleanup_VkImportMemoryWin32HandleInfoKHR((VkImportMemoryWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_memory_win32
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR:
    cleanup_VkExportMemoryWin32HandleInfoKHR((VkExportMemoryWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_memory_win32
  case VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR:
    cleanup_VkMemoryWin32HandlePropertiesKHR((VkMemoryWin32HandlePropertiesKHR const *)pData);
    break;
#endif

#if VK_KHR_external_memory_win32
  case VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR:
    cleanup_VkMemoryGetWin32HandleInfoKHR((VkMemoryGetWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_memory_fd
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
    cleanup_VkImportMemoryFdInfoKHR((VkImportMemoryFdInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_memory_fd
  case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
    cleanup_VkMemoryFdPropertiesKHR((VkMemoryFdPropertiesKHR const *)pData);
    break;
#endif

#if VK_KHR_external_memory_fd
  case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
    cleanup_VkMemoryGetFdInfoKHR((VkMemoryGetFdInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_win32_keyed_mutex
  case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    cleanup_VkWin32KeyedMutexAcquireReleaseInfoKHR(
        (VkWin32KeyedMutexAcquireReleaseInfoKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    cleanup_VkPhysicalDeviceExternalSemaphoreInfo(
        (VkPhysicalDeviceExternalSemaphoreInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
    cleanup_VkExternalSemaphoreProperties((VkExternalSemaphoreProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
    cleanup_VkExportSemaphoreCreateInfo((VkExportSemaphoreCreateInfo const *)pData);
    break;
#endif

#if VK_KHR_external_semaphore_win32
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    cleanup_VkImportSemaphoreWin32HandleInfoKHR((VkImportSemaphoreWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_semaphore_win32
  case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    cleanup_VkExportSemaphoreWin32HandleInfoKHR((VkExportSemaphoreWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_semaphore_win32
  case VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR:
    cleanup_VkD3D12FenceSubmitInfoKHR((VkD3D12FenceSubmitInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_semaphore_win32
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR:
    cleanup_VkSemaphoreGetWin32HandleInfoKHR((VkSemaphoreGetWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_semaphore_fd
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
    cleanup_VkImportSemaphoreFdInfoKHR((VkImportSemaphoreFdInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_semaphore_fd
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
    cleanup_VkSemaphoreGetFdInfoKHR((VkSemaphoreGetFdInfoKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
    cleanup_VkPhysicalDeviceExternalFenceInfo((VkPhysicalDeviceExternalFenceInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
    cleanup_VkExternalFenceProperties((VkExternalFenceProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
    cleanup_VkExportFenceCreateInfo((VkExportFenceCreateInfo const *)pData);
    break;
#endif

#if VK_KHR_external_fence_win32
  case VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR:
    cleanup_VkImportFenceWin32HandleInfoKHR((VkImportFenceWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_fence_win32
  case VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR:
    cleanup_VkExportFenceWin32HandleInfoKHR((VkExportFenceWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_fence_win32
  case VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR:
    cleanup_VkFenceGetWin32HandleInfoKHR((VkFenceGetWin32HandleInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_fence_fd
  case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
    cleanup_VkImportFenceFdInfoKHR((VkImportFenceFdInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_external_fence_fd
  case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
    cleanup_VkFenceGetFdInfoKHR((VkFenceGetFdInfoKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
    cleanup_VkPhysicalDeviceMultiviewFeatures((VkPhysicalDeviceMultiviewFeatures const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
    cleanup_VkPhysicalDeviceMultiviewProperties((VkPhysicalDeviceMultiviewProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
    cleanup_VkRenderPassMultiviewCreateInfo((VkRenderPassMultiviewCreateInfo const *)pData);
    break;
#endif

#if VK_EXT_display_surface_counter
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT:
    cleanup_VkSurfaceCapabilities2EXT((VkSurfaceCapabilities2EXT const *)pData);
    break;
#endif

#if VK_EXT_display_control
  case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
    cleanup_VkDisplayPowerInfoEXT((VkDisplayPowerInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_display_control
  case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
    cleanup_VkDeviceEventInfoEXT((VkDeviceEventInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_display_control
  case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
    cleanup_VkDisplayEventInfoEXT((VkDisplayEventInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_display_control
  case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
    cleanup_VkSwapchainCounterCreateInfoEXT((VkSwapchainCounterCreateInfoEXT const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
    cleanup_VkPhysicalDeviceGroupProperties((VkPhysicalDeviceGroupProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
    cleanup_VkMemoryAllocateFlagsInfo((VkMemoryAllocateFlagsInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
    cleanup_VkBindBufferMemoryInfo((VkBindBufferMemoryInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
    cleanup_VkBindBufferMemoryDeviceGroupInfo((VkBindBufferMemoryDeviceGroupInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
    cleanup_VkBindImageMemoryInfo((VkBindImageMemoryInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
    cleanup_VkBindImageMemoryDeviceGroupInfo((VkBindImageMemoryDeviceGroupInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
    cleanup_VkDeviceGroupRenderPassBeginInfo((VkDeviceGroupRenderPassBeginInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    cleanup_VkDeviceGroupCommandBufferBeginInfo((VkDeviceGroupCommandBufferBeginInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
    cleanup_VkDeviceGroupSubmitInfo((VkDeviceGroupSubmitInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
    cleanup_VkDeviceGroupBindSparseInfo((VkDeviceGroupBindSparseInfo const *)pData);
    break;
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
    cleanup_VkDeviceGroupPresentCapabilitiesKHR((VkDeviceGroupPresentCapabilitiesKHR const *)pData);
    break;
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
  case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
    cleanup_VkImageSwapchainCreateInfoKHR((VkImageSwapchainCreateInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
    cleanup_VkBindImageMemorySwapchainInfoKHR((VkBindImageMemorySwapchainInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
  case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
    cleanup_VkAcquireNextImageInfoKHR((VkAcquireNextImageInfoKHR const *)pData);
    break;
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
    cleanup_VkDeviceGroupPresentInfoKHR((VkDeviceGroupPresentInfoKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
    cleanup_VkDeviceGroupDeviceCreateInfo((VkDeviceGroupDeviceCreateInfo const *)pData);
    break;
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    cleanup_VkDeviceGroupSwapchainCreateInfoKHR((VkDeviceGroupSwapchainCreateInfoKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    cleanup_VkDescriptorUpdateTemplateCreateInfo(
        (VkDescriptorUpdateTemplateCreateInfo const *)pData);
    break;
#endif

#if VK_EXT_hdr_metadata
  case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
    cleanup_VkHdrMetadataEXT((VkHdrMetadataEXT const *)pData);
    break;
#endif

#if VK_GOOGLE_display_timing
  case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
    cleanup_VkPresentTimesInfoGOOGLE((VkPresentTimesInfoGOOGLE const *)pData);
    break;
#endif

#if VK_MVK_ios_surface
  case VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK:
    cleanup_VkIOSSurfaceCreateInfoMVK((VkIOSSurfaceCreateInfoMVK const *)pData);
    break;
#endif

#if VK_MVK_macos_surface
  case VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK:
    cleanup_VkMacOSSurfaceCreateInfoMVK((VkMacOSSurfaceCreateInfoMVK const *)pData);
    break;
#endif

#if VK_NV_clip_space_w_scaling
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineViewportWScalingStateCreateInfoNV(
        (VkPipelineViewportWScalingStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_NV_viewport_swizzle
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineViewportSwizzleStateCreateInfoNV(
        (VkPipelineViewportSwizzleStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_EXT_discard_rectangles
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
        (VkPhysicalDeviceDiscardRectanglePropertiesEXT const *)pData);
    break;
#endif

#if VK_EXT_discard_rectangles
  case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineDiscardRectangleStateCreateInfoEXT(
        (VkPipelineDiscardRectangleStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_NVX_multiview_per_view_attributes
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
    cleanup_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
        (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    cleanup_VkRenderPassInputAttachmentAspectCreateInfo(
        (VkRenderPassInputAttachmentAspectCreateInfo const *)pData);
    break;
#endif

#if VK_KHR_get_surface_capabilities2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
    cleanup_VkPhysicalDeviceSurfaceInfo2KHR((VkPhysicalDeviceSurfaceInfo2KHR const *)pData);
    break;
#endif

#if VK_KHR_get_surface_capabilities2
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
    cleanup_VkSurfaceCapabilities2KHR((VkSurfaceCapabilities2KHR const *)pData);
    break;
#endif

#if VK_KHR_get_surface_capabilities2
  case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
    cleanup_VkSurfaceFormat2KHR((VkSurfaceFormat2KHR const *)pData);
    break;
#endif

#if VK_KHR_shared_presentable_image
  case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    cleanup_VkSharedPresentSurfaceCapabilitiesKHR(
        (VkSharedPresentSurfaceCapabilitiesKHR const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    cleanup_VkPhysicalDevice16BitStorageFeatures(
        (VkPhysicalDevice16BitStorageFeatures const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
    cleanup_VkPhysicalDeviceSubgroupProperties((VkPhysicalDeviceSubgroupProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
    cleanup_VkBufferMemoryRequirementsInfo2((VkBufferMemoryRequirementsInfo2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
    cleanup_VkImageMemoryRequirementsInfo2((VkImageMemoryRequirementsInfo2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    cleanup_VkImageSparseMemoryRequirementsInfo2(
        (VkImageSparseMemoryRequirementsInfo2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
    cleanup_VkMemoryRequirements2((VkMemoryRequirements2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
    cleanup_VkSparseImageMemoryRequirements2((VkSparseImageMemoryRequirements2 const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    cleanup_VkPhysicalDevicePointClippingProperties(
        (VkPhysicalDevicePointClippingProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
    cleanup_VkMemoryDedicatedRequirements((VkMemoryDedicatedRequirements const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
    cleanup_VkMemoryDedicatedAllocateInfo((VkMemoryDedicatedAllocateInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
    cleanup_VkImageViewUsageCreateInfo((VkImageViewUsageCreateInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
    cleanup_VkPipelineTessellationDomainOriginStateCreateInfo(
        (VkPipelineTessellationDomainOriginStateCreateInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
    cleanup_VkSamplerYcbcrConversionInfo((VkSamplerYcbcrConversionInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
    cleanup_VkSamplerYcbcrConversionCreateInfo((VkSamplerYcbcrConversionCreateInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
    cleanup_VkBindImagePlaneMemoryInfo((VkBindImagePlaneMemoryInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
    cleanup_VkImagePlaneMemoryRequirementsInfo((VkImagePlaneMemoryRequirementsInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
        (VkPhysicalDeviceSamplerYcbcrConversionFeatures const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    cleanup_VkSamplerYcbcrConversionImageFormatProperties(
        (VkSamplerYcbcrConversionImageFormatProperties const *)pData);
    break;
#endif

#if VK_AMD_texture_gather_bias_lod
  case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    cleanup_VkTextureLODGatherFormatPropertiesAMD(
        (VkTextureLODGatherFormatPropertiesAMD const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
    cleanup_VkProtectedSubmitInfo((VkProtectedSubmitInfo const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    cleanup_VkPhysicalDeviceProtectedMemoryFeatures(
        (VkPhysicalDeviceProtectedMemoryFeatures const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    cleanup_VkPhysicalDeviceProtectedMemoryProperties(
        (VkPhysicalDeviceProtectedMemoryProperties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
    cleanup_VkDeviceQueueInfo2((VkDeviceQueueInfo2 const *)pData);
    break;
#endif

#if VK_NV_fragment_coverage_to_color
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineCoverageToColorStateCreateInfoNV(
        (VkPipelineCoverageToColorStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_EXT_sample_locations
  case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
    cleanup_VkSampleLocationsInfoEXT((VkSampleLocationsInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_sample_locations
  case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    cleanup_VkRenderPassSampleLocationsBeginInfoEXT(
        (VkRenderPassSampleLocationsBeginInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_sample_locations
  case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineSampleLocationsStateCreateInfoEXT(
        (VkPipelineSampleLocationsStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_sample_locations
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceSampleLocationsPropertiesEXT(
        (VkPhysicalDeviceSampleLocationsPropertiesEXT const *)pData);
    break;
#endif

#if VK_EXT_sample_locations
  case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
    cleanup_VkMultisamplePropertiesEXT((VkMultisamplePropertiesEXT const *)pData);
    break;
#endif

#if VK_EXT_blend_operation_advanced
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT:
    cleanup_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
        (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *)pData);
    break;
#endif

#if VK_EXT_blend_operation_advanced
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
        (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *)pData);
    break;
#endif

#if VK_EXT_blend_operation_advanced
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
        (VkPipelineColorBlendAdvancedStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_NV_framebuffer_mixed_samples
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineCoverageModulationStateCreateInfoNV(
        (VkPipelineCoverageModulationStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_EXT_validation_cache
  case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT:
    cleanup_VkValidationCacheCreateInfoEXT((VkValidationCacheCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_validation_cache
  case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    cleanup_VkShaderModuleValidationCacheCreateInfoEXT(
        (VkShaderModuleValidationCacheCreateInfoEXT const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    cleanup_VkPhysicalDeviceMaintenance3Properties(
        (VkPhysicalDeviceMaintenance3Properties const *)pData);
    break;
#endif

#if VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
    cleanup_VkDescriptorSetLayoutSupport((VkDescriptorSetLayoutSupport const *)pData);
    break;
#endif

#if VK_ANDROID_native_buffer
  case VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID:
    cleanup_VkNativeBufferANDROID((VkNativeBufferANDROID const *)pData);
    break;
#endif

#if VK_EXT_global_priority
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
    cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
        (VkDeviceQueueGlobalPriorityCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_utils
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
    cleanup_VkDebugUtilsObjectNameInfoEXT((VkDebugUtilsObjectNameInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_utils
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
    cleanup_VkDebugUtilsObjectTagInfoEXT((VkDebugUtilsObjectTagInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_utils
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
    cleanup_VkDebugUtilsLabelEXT((VkDebugUtilsLabelEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_utils
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
    cleanup_VkDebugUtilsMessengerCreateInfoEXT((VkDebugUtilsMessengerCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_debug_utils
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    cleanup_VkDebugUtilsMessengerCallbackDataEXT(
        (VkDebugUtilsMessengerCallbackDataEXT const *)pData);
    break;
#endif

#if VK_EXT_external_memory_host
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
    cleanup_VkImportMemoryHostPointerInfoEXT((VkImportMemoryHostPointerInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_external_memory_host
  case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
    cleanup_VkMemoryHostPointerPropertiesEXT((VkMemoryHostPointerPropertiesEXT const *)pData);
    break;
#endif

#if VK_EXT_external_memory_host
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
        (VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *)pData);
    break;
#endif

#if VK_EXT_conservative_rasterization
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
        (VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *)pData);
    break;
#endif

#if VK_AMD_shader_core_properties
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    cleanup_VkPhysicalDeviceShaderCorePropertiesAMD(
        (VkPhysicalDeviceShaderCorePropertiesAMD const *)pData);
    break;
#endif

#if VK_EXT_conservative_rasterization
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineRasterizationConservativeStateCreateInfoEXT(
        (VkPipelineRasterizationConservativeStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_vertex_attribute_divisor
  case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
        (VkPipelineVertexInputDivisorStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_EXT_vertex_attribute_divisor
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
        (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *)pData);
    break;
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    cleanup_VkImportAndroidHardwareBufferInfoANDROID(
        (VkImportAndroidHardwareBufferInfoANDROID const *)pData);
    break;
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID:
    cleanup_VkAndroidHardwareBufferUsageANDROID((VkAndroidHardwareBufferUsageANDROID const *)pData);
    break;
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    cleanup_VkAndroidHardwareBufferPropertiesANDROID(
        (VkAndroidHardwareBufferPropertiesANDROID const *)pData);
    break;
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    cleanup_VkMemoryGetAndroidHardwareBufferInfoANDROID(
        (VkMemoryGetAndroidHardwareBufferInfoANDROID const *)pData);
    break;
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    cleanup_VkAndroidHardwareBufferFormatPropertiesANDROID(
        (VkAndroidHardwareBufferFormatPropertiesANDROID const *)pData);
    break;
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID:
    cleanup_VkExternalFormatANDROID((VkExternalFormatANDROID const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
  case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX:
    cleanup_VkDeviceGeneratedCommandsFeaturesNVX(
        (VkDeviceGeneratedCommandsFeaturesNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
  case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX:
    cleanup_VkDeviceGeneratedCommandsLimitsNVX((VkDeviceGeneratedCommandsLimitsNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX:
    cleanup_VkIndirectCommandsLayoutCreateInfoNVX(
        (VkIndirectCommandsLayoutCreateInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
  case VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX:
    cleanup_VkCmdProcessCommandsInfoNVX((VkCmdProcessCommandsInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
  case VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX:
    cleanup_VkCmdReserveSpaceForCommandsInfoNVX((VkCmdReserveSpaceForCommandsInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
  case VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX:
    cleanup_VkObjectTableCreateInfoNVX((VkObjectTableCreateInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
  case VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR:
    cleanup_VkMirSurfaceCreateInfoKHR((VkMirSurfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
  case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
    cleanup_VkDisplayProperties2KHR((VkDisplayProperties2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
    cleanup_VkDisplayPlaneProperties2KHR((VkDisplayPlaneProperties2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
  case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
    cleanup_VkDisplayModeProperties2KHR((VkDisplayModeProperties2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
    cleanup_VkDisplayPlaneInfo2KHR((VkDisplayPlaneInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
    cleanup_VkDisplayPlaneCapabilities2KHR((VkDisplayPlaneCapabilities2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
  case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT:
    cleanup_VkConditionalRenderingBeginInfoEXT((VkConditionalRenderingBeginInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT:
    cleanup_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
        (VkCommandBufferInheritanceConditionalRenderingInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    cleanup_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
        (VkPhysicalDeviceConditionalRenderingFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV:
    cleanup_VkQueueFamilyCheckpointPropertiesNV((VkQueueFamilyCheckpointPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
  case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV:
    cleanup_VkCheckpointDataNV((VkCheckpointDataNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
    cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
        (VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
        (VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
    cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
        (VkWriteDescriptorSetInlineUniformBlockEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
  case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
    cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
        (VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_vertex_attribute_divisor
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT:
    cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
        (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT:
    cleanup_VkImageViewASTCDecodeModeEXT((VkImageViewASTCDecodeModeEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    cleanup_VkPhysicalDeviceASTCDecodeFeaturesEXT(
        (VkPhysicalDeviceASTCDecodeFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV:
    cleanup_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
        (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
  case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
        (VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    cleanup_VkPhysicalDeviceExclusiveScissorFeaturesNV(
        (VkPhysicalDeviceExclusiveScissorFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
        (VkPipelineViewportExclusiveScissorStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    cleanup_VkPhysicalDeviceCornerSampledImageFeaturesNV(
        (VkPhysicalDeviceCornerSampledImageFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_compute_shader_derivatives
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV:
    cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
        (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_fragment_shader_barycentric
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV:
    cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
        (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    cleanup_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
        (VkPhysicalDeviceShaderImageFootprintFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineViewportShadingRateImageStateCreateInfoNV(
        (VkPipelineViewportShadingRateImageStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    cleanup_VkPhysicalDeviceShadingRateImageFeaturesNV(
        (VkPhysicalDeviceShadingRateImageFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceShadingRateImagePropertiesNV(
        (VkPhysicalDeviceShadingRateImagePropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
        (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    cleanup_VkPhysicalDeviceMeshShaderFeaturesNV(
        (VkPhysicalDeviceMeshShaderFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceMeshShaderPropertiesNV(
        (VkPhysicalDeviceMeshShaderPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_RAYTRACING_PIPELINE_CREATE_INFO_NVX:
    cleanup_VkRaytracingPipelineCreateInfoNVX((VkRaytracingPipelineCreateInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NVX:
    cleanup_VkGeometryTrianglesNVX((VkGeometryTrianglesNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NVX:
    cleanup_VkGeometryAABBNVX((VkGeometryAABBNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_GEOMETRY_NVX:
    cleanup_VkGeometryNVX((VkGeometryNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX:
    cleanup_VkAccelerationStructureCreateInfoNVX(
        (VkAccelerationStructureCreateInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NVX:
    cleanup_VkBindAccelerationStructureMemoryInfoNVX(
        (VkBindAccelerationStructureMemoryInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_DESCRIPTOR_ACCELERATION_STRUCTURE_INFO_NVX:
    cleanup_VkDescriptorAccelerationStructureInfoNVX(
        (VkDescriptorAccelerationStructureInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX:
    cleanup_VkAccelerationStructureMemoryRequirementsInfoNVX(
        (VkAccelerationStructureMemoryRequirementsInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAYTRACING_PROPERTIES_NVX:
    cleanup_VkPhysicalDeviceRaytracingPropertiesNVX(
        (VkPhysicalDeviceRaytracingPropertiesNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
  case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    cleanup_VkDrmFormatModifierPropertiesListEXT(
        (VkDrmFormatModifierPropertiesListEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
        (VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    cleanup_VkImageDrmFormatModifierListCreateInfoEXT(
        (VkImageDrmFormatModifierListCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    cleanup_VkImageDrmFormatModifierExplicitCreateInfoEXT(
        (VkImageDrmFormatModifierExplicitCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    cleanup_VkImageDrmFormatModifierPropertiesEXT(
        (VkImageDrmFormatModifierPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
  case VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA:
    cleanup_VkImagePipeSurfaceCreateInfoFUCHSIA((VkImagePipeSurfaceCreateInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
  case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
    cleanup_VkCalibratedTimestampInfoEXT((VkCalibratedTimestampInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_pci_bus_info
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
        (VkPhysicalDevicePCIBusInfoPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    cleanup_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
        (VkPhysicalDeviceTransformFeedbackFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
        (VkPhysicalDeviceTransformFeedbackPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    cleanup_VkPipelineRasterizationStateStreamCreateInfoEXT(
        (VkPipelineRasterizationStateStreamCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    cleanup_VkRayTracingShaderGroupCreateInfoNV((VkRayTracingShaderGroupCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV:
    cleanup_VkRayTracingPipelineCreateInfoNV((VkRayTracingPipelineCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV:
    cleanup_VkGeometryTrianglesNV((VkGeometryTrianglesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV:
    cleanup_VkGeometryAABBNV((VkGeometryAABBNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_GEOMETRY_NV:
    cleanup_VkGeometryNV((VkGeometryNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV:
    cleanup_VkAccelerationStructureInfoNV((VkAccelerationStructureInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV:
    cleanup_VkAccelerationStructureCreateInfoNV((VkAccelerationStructureCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    cleanup_VkBindAccelerationStructureMemoryInfoNV(
        (VkBindAccelerationStructureMemoryInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    cleanup_VkWriteDescriptorSetAccelerationStructureNV(
        (VkWriteDescriptorSetAccelerationStructureNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    cleanup_VkAccelerationStructureMemoryRequirementsInfoNV(
        (VkAccelerationStructureMemoryRequirementsInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceRayTracingPropertiesNV(
        (VkPhysicalDeviceRayTracingPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    cleanup_VkDeviceMemoryOverallocationCreateInfoAMD(
        (VkDeviceMemoryOverallocationCreateInfoAMD const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    cleanup_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
        (VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
        (VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
  case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    cleanup_VkRenderPassFragmentDensityMapCreateInfoEXT(
        (VkRenderPassFragmentDensityMapCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
  case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT:
    cleanup_VkValidationFeaturesEXT((VkValidationFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
        (VkPhysicalDeviceMemoryBudgetPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    cleanup_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
        (VkPhysicalDeviceMemoryPriorityFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
  case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
    cleanup_VkMemoryPriorityAllocateInfoEXT((VkMemoryPriorityAllocateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
  case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT:
    cleanup_VkBufferDeviceAddressCreateInfoEXT((VkBufferDeviceAddressCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV:
    cleanup_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
        (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    cleanup_VkPhysicalDeviceImageViewImageFormatInfoEXT(
        (VkPhysicalDeviceImageViewImageFormatInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
  case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    cleanup_VkFilterCubicImageViewImageFormatPropertiesEXT(
        (VkFilterCubicImageViewImageFormatPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    cleanup_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
        (VkPhysicalDeviceDepthClipEnableFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
        (VkPipelineRasterizationDepthClipStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
        (VkPhysicalDeviceCooperativeMatrixFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
        (VkPhysicalDeviceCooperativeMatrixPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
  case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    cleanup_VkCooperativeMatrixPropertiesNV((VkCooperativeMatrixPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
  case VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT:
    cleanup_VkMetalSurfaceCreateInfoEXT((VkMetalSurfaceCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    cleanup_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
        (VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX:
    cleanup_VkImageViewHandleInfoNVX((VkImageViewHandleInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
  case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    cleanup_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
        (VkDisplayNativeHdrSurfaceCapabilitiesAMD const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
  case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    cleanup_VkSwapchainDisplayNativeHdrCreateInfoAMD(
        (VkSwapchainDisplayNativeHdrCreateInfoAMD const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
  case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
    cleanup_VkSurfaceProtectedCapabilitiesKHR((VkSurfaceProtectedCapabilitiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
  case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT:
    cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
        (VkPipelineCreationFeedbackCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
  case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    cleanup_VkSurfaceFullScreenExclusiveInfoEXT((VkSurfaceFullScreenExclusiveInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
  case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    cleanup_VkSurfaceFullScreenExclusiveWin32InfoEXT(
        (VkSurfaceFullScreenExclusiveWin32InfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    cleanup_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
        (VkSurfaceCapabilitiesFullScreenExclusiveEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
  case VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    cleanup_VkStreamDescriptorSurfaceCreateInfoGGP(
        (VkStreamDescriptorSurfaceCreateInfoGGP const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
  case VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP:
    cleanup_VkPresentFrameTokenGGP((VkPresentFrameTokenGGP const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    cleanup_VkPhysicalDeviceVariablePointersFeatures(
        (VkPhysicalDeviceVariablePointersFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    cleanup_VkPhysicalDeviceShaderDrawParametersFeatures(
        (VkPhysicalDeviceShaderDrawParametersFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
        (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
  case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
    cleanup_VkHeadlessSurfaceCreateInfoEXT((VkHeadlessSurfaceCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    cleanup_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
        (VkPhysicalDeviceCoverageReductionModeFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineCoverageReductionStateCreateInfoNV(
        (VkPipelineCoverageReductionStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    cleanup_VkFramebufferMixedSamplesCombinationNV(
        (VkFramebufferMixedSamplesCombinationNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
  case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL:
    cleanup_VkInitializePerformanceApiInfoINTEL((VkInitializePerformanceApiInfoINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL:
    cleanup_VkPerformanceMarkerInfoINTEL((VkPerformanceMarkerInfoINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL:
    cleanup_VkPerformanceStreamMarkerInfoINTEL((VkPerformanceStreamMarkerInfoINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL:
    cleanup_VkPerformanceOverrideInfoINTEL((VkPerformanceOverrideInfoINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    cleanup_VkPerformanceConfigurationAcquireInfoINTEL(
        (VkPerformanceConfigurationAcquireInfoINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS2_FEATURES_INTEL:
    cleanup_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
        (VkPhysicalDeviceShaderIntegerFunctions2INTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
        (VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    cleanup_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
        (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
    cleanup_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
        (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_shader_demote_to_helper_invocation
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT:
    cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
        (VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    cleanup_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
        (VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
        (VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL:
    cleanup_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
        (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
        (VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
    cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
        (VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
  case VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID:
    cleanup_VkSwapchainImageCreateInfoANDROID((VkSwapchainImageCreateInfoANDROID const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID:
    cleanup_VkPhysicalDevicePresentationPropertiesANDROID(
        (VkPhysicalDevicePresentationPropertiesANDROID const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_texture_compression_astc_hdr
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT:
    cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
        (VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_index_type_uint8
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
        (VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
        (VkPhysicalDeviceLineRasterizationFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
        (VkPhysicalDeviceLineRasterizationPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
        (VkPipelineRasterizationLineStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    cleanup_VkPhysicalDeviceShaderCoreProperties2AMD(
        (VkPhysicalDeviceShaderCoreProperties2AMD const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 118 && VK_EXT_subgroup_size_control
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
    cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
        (VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
  case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    cleanup_VkPipelineCompilerControlCreateInfoAMD(
        (VkPipelineCompilerControlCreateInfoAMD const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
    cleanup_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
        (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
  case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
    cleanup_VkPipelineInfoKHR((VkPipelineInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
    cleanup_VkPipelineExecutablePropertiesKHR((VkPipelineExecutablePropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
    cleanup_VkPipelineExecutableInfoKHR((VkPipelineExecutableInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
    cleanup_VkPipelineExecutableStatisticKHR((VkPipelineExecutableStatisticKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    cleanup_VkPipelineExecutableInternalRepresentationKHR(
        (VkPipelineExecutableInternalRepresentationKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    cleanup_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
        (VkPhysicalDeviceCoherentMemoryFeaturesAMD const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    cleanup_VkPhysicalDeviceShaderClockFeaturesKHR(
        (VkPhysicalDeviceShaderClockFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    cleanup_VkPhysicalDevicePerformanceQueryFeaturesKHR(
        (VkPhysicalDevicePerformanceQueryFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    cleanup_VkPhysicalDevicePerformanceQueryPropertiesKHR(
        (VkPhysicalDevicePerformanceQueryPropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
    cleanup_VkPerformanceCounterKHR((VkPerformanceCounterKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
    cleanup_VkPerformanceCounterDescriptionKHR((VkPerformanceCounterDescriptionKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    cleanup_VkQueryPoolPerformanceCreateInfoKHR((VkQueryPoolPerformanceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
    cleanup_VkAcquireProfilingLockInfoKHR((VkAcquireProfilingLockInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
  case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
    cleanup_VkPerformanceQuerySubmitInfoKHR((VkPerformanceQuerySubmitInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceToolPropertiesEXT((VkPhysicalDeviceToolPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
    cleanup_VkPhysicalDeviceDriverProperties((VkPhysicalDeviceDriverProperties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
    cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
        (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    cleanup_VkPhysicalDeviceSamplerFilterMinmaxProperties(
        (VkPhysicalDeviceSamplerFilterMinmaxProperties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
    cleanup_VkSamplerReductionModeCreateInfo((VkSamplerReductionModeCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
    cleanup_VkImageFormatListCreateInfo((VkImageFormatListCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    cleanup_VkPhysicalDeviceShaderFloat16Int8Features(
        (VkPhysicalDeviceShaderFloat16Int8Features const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    cleanup_VkPhysicalDeviceFloatControlsProperties(
        (VkPhysicalDeviceFloatControlsProperties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    cleanup_VkPhysicalDeviceHostQueryResetFeatures(
        (VkPhysicalDeviceHostQueryResetFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    cleanup_VkPhysicalDeviceDescriptorIndexingFeatures(
        (VkPhysicalDeviceDescriptorIndexingFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    cleanup_VkPhysicalDeviceDescriptorIndexingProperties(
        (VkPhysicalDeviceDescriptorIndexingProperties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfo(
        (VkDescriptorSetLayoutBindingFlagsCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
    cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfo(
        (VkDescriptorSetVariableDescriptorCountAllocateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
    cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupport(
        (VkDescriptorSetVariableDescriptorCountLayoutSupport const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
    cleanup_VkAttachmentDescription2((VkAttachmentDescription2 const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
    cleanup_VkAttachmentReference2((VkAttachmentReference2 const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
    cleanup_VkSubpassDescription2((VkSubpassDescription2 const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
    cleanup_VkSubpassDependency2((VkSubpassDependency2 const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
    cleanup_VkRenderPassCreateInfo2((VkRenderPassCreateInfo2 const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
    cleanup_VkSubpassBeginInfo((VkSubpassBeginInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
    cleanup_VkSubpassEndInfo((VkSubpassEndInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    cleanup_VkPhysicalDeviceTimelineSemaphoreFeatures(
        (VkPhysicalDeviceTimelineSemaphoreFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    cleanup_VkPhysicalDeviceTimelineSemaphoreProperties(
        (VkPhysicalDeviceTimelineSemaphoreProperties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
    cleanup_VkSemaphoreTypeCreateInfo((VkSemaphoreTypeCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
    cleanup_VkTimelineSemaphoreSubmitInfo((VkTimelineSemaphoreSubmitInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
    cleanup_VkSemaphoreWaitInfo((VkSemaphoreWaitInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
    cleanup_VkSemaphoreSignalInfo((VkSemaphoreSignalInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
    cleanup_VkPhysicalDevice8BitStorageFeatures((VkPhysicalDevice8BitStorageFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    cleanup_VkPhysicalDeviceVulkanMemoryModelFeatures(
        (VkPhysicalDeviceVulkanMemoryModelFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    cleanup_VkPhysicalDeviceShaderAtomicInt64Features(
        (VkPhysicalDeviceShaderAtomicInt64Features const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    cleanup_VkPhysicalDeviceDepthStencilResolveProperties(
        (VkPhysicalDeviceDepthStencilResolveProperties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    cleanup_VkSubpassDescriptionDepthStencilResolve(
        (VkSubpassDescriptionDepthStencilResolve const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
    cleanup_VkImageStencilUsageCreateInfo((VkImageStencilUsageCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    cleanup_VkPhysicalDeviceScalarBlockLayoutFeatures(
        (VkPhysicalDeviceScalarBlockLayoutFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
    cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
        (VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    cleanup_VkPhysicalDeviceBufferDeviceAddressFeatures(
        (VkPhysicalDeviceBufferDeviceAddressFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
    cleanup_VkBufferDeviceAddressInfo((VkBufferDeviceAddressInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    cleanup_VkBufferOpaqueCaptureAddressCreateInfo(
        (VkBufferOpaqueCaptureAddressCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    cleanup_VkPhysicalDeviceImagelessFramebufferFeatures(
        (VkPhysicalDeviceImagelessFramebufferFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
    cleanup_VkFramebufferAttachmentsCreateInfo((VkFramebufferAttachmentsCreateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
    cleanup_VkFramebufferAttachmentImageInfo((VkFramebufferAttachmentImageInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
    cleanup_VkRenderPassAttachmentBeginInfo((VkRenderPassAttachmentBeginInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
    cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
        (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
    cleanup_VkAttachmentReferenceStencilLayout((VkAttachmentReferenceStencilLayout const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
    cleanup_VkAttachmentDescriptionStencilLayout(
        (VkAttachmentDescriptionStencilLayout const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    cleanup_VkMemoryOpaqueCaptureAddressAllocateInfo(
        (VkMemoryOpaqueCaptureAddressAllocateInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    cleanup_VkDeviceMemoryOpaqueCaptureAddressInfo(
        (VkDeviceMemoryOpaqueCaptureAddressInfo const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
    cleanup_VkPhysicalDeviceVulkan11Features((VkPhysicalDeviceVulkan11Features const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
    cleanup_VkPhysicalDeviceVulkan11Properties((VkPhysicalDeviceVulkan11Properties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
    cleanup_VkPhysicalDeviceVulkan12Features((VkPhysicalDeviceVulkan12Features const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
    cleanup_VkPhysicalDeviceVulkan12Properties((VkPhysicalDeviceVulkan12Properties const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
  case VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM:
    cleanup_VkRenderPassTransformBeginInfoQCOM((VkRenderPassTransformBeginInfoQCOM const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM:
    cleanup_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
        (VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV:
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
        (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
        (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV:
    cleanup_VkGraphicsShaderGroupCreateInfoNV((VkGraphicsShaderGroupCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    cleanup_VkGraphicsPipelineShaderGroupsCreateInfoNV(
        (VkGraphicsPipelineShaderGroupsCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV:
    cleanup_VkIndirectCommandsLayoutTokenNV((VkIndirectCommandsLayoutTokenNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    cleanup_VkIndirectCommandsLayoutCreateInfoNV(
        (VkIndirectCommandsLayoutCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV:
    cleanup_VkGeneratedCommandsInfoNV((VkGeneratedCommandsInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
  case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    cleanup_VkGeneratedCommandsMemoryRequirementsInfoNV(
        (VkGeneratedCommandsMemoryRequirementsInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    cleanup_VkRayTracingShaderGroupCreateInfoKHR(
        (VkRayTracingShaderGroupCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
    cleanup_VkRayTracingPipelineCreateInfoKHR((VkRayTracingPipelineCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    cleanup_VkWriteDescriptorSetAccelerationStructureKHR(
        (VkWriteDescriptorSetAccelerationStructureKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
  case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    cleanup_VkQueryPoolPerformanceQueryCreateInfoINTEL(
        (VkQueryPoolPerformanceQueryCreateInfoINTEL const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_EXT_pipeline_creation_cache_control
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT:
    cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
        (VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
        (VkAccelerationStructureGeometryTrianglesDataKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    cleanup_VkAccelerationStructureGeometryAabbsDataKHR(
        (VkAccelerationStructureGeometryAabbsDataKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    cleanup_VkAccelerationStructureGeometryInstancesDataKHR(
        (VkAccelerationStructureGeometryInstancesDataKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
    cleanup_VkAccelerationStructureGeometryKHR((VkAccelerationStructureGeometryKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
        (VkAccelerationStructureBuildGeometryInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    cleanup_VkAccelerationStructureCreateInfoKHR(
        (VkAccelerationStructureCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    cleanup_VkAccelerationStructureDeviceAddressInfoKHR(
        (VkAccelerationStructureDeviceAddressInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
    cleanup_VkCopyAccelerationStructureInfoKHR((VkCopyAccelerationStructureInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    cleanup_VkCopyAccelerationStructureToMemoryInfoKHR(
        (VkCopyAccelerationStructureToMemoryInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    cleanup_VkCopyMemoryToAccelerationStructureInfoKHR(
        (VkCopyMemoryToAccelerationStructureInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
        (VkRayTracingPipelineInterfaceCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_pipeline_library
  case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
    cleanup_VkPipelineLibraryCreateInfoKHR((VkPipelineLibraryCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    cleanup_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
        (VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
  case VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    cleanup_VkDeviceDiagnosticsConfigCreateInfoNV(
        (VkDeviceDiagnosticsConfigCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR:
    cleanup_VkBindAccelerationStructureMemoryInfoKHR(
        (VkBindAccelerationStructureMemoryInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR:
    cleanup_VkAccelerationStructureMemoryRequirementsInfoKHR(
        (VkAccelerationStructureMemoryRequirementsInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR:
    cleanup_VkPhysicalDeviceRayTracingFeaturesKHR(
        (VkPhysicalDeviceRayTracingFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR:
    cleanup_VkPhysicalDeviceRayTracingPropertiesKHR(
        (VkPhysicalDeviceRayTracingPropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR:
    cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(
        (VkAccelerationStructureCreateGeometryTypeInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR:
    cleanup_VkAccelerationStructureVersionKHR((VkAccelerationStructureVersionKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations
  case VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR:
    cleanup_VkDeferredOperationInfoKHR((VkDeferredOperationInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX:
    cleanup_VkImageViewAddressPropertiesNVX((VkImageViewAddressPropertiesNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
        (VkPhysicalDeviceRobustness2FeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
        (VkPhysicalDeviceRobustness2PropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
  case VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT:
    cleanup_VkDevicePrivateDataCreateInfoEXT((VkDevicePrivateDataCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
  case VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT:
    cleanup_VkPrivateDataSlotCreateInfoEXT((VkPrivateDataSlotCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT:
    cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
        (VkPhysicalDevicePrivateDataFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
  case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    cleanup_VkSamplerCustomBorderColorCreateInfoEXT(
        (VkSamplerCustomBorderColorCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
        (VkPhysicalDeviceCustomBorderColorPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    cleanup_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
        (VkPhysicalDeviceCustomBorderColorFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    cleanup_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
        (VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
  case VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT:
    cleanup_VkDirectFBSurfaceCreateInfoEXT((VkDirectFBSurfaceCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    cleanup_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
        (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
        (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    cleanup_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
        (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_image_robustness
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
    cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
        (VkPhysicalDeviceImageRobustnessFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
    cleanup_VkPhysicalDevice4444FormatsFeaturesEXT(
        (VkPhysicalDevice4444FormatsFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR:
    cleanup_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
        (VkPhysicalDevicePortabilitySubsetFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR:
    cleanup_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
        (VkPhysicalDevicePortabilitySubsetPropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR:
    cleanup_VkBufferCopy2KHR((VkBufferCopy2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR:
    cleanup_VkImageCopy2KHR((VkImageCopy2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR:
    cleanup_VkImageBlit2KHR((VkImageBlit2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR:
    cleanup_VkBufferImageCopy2KHR((VkBufferImageCopy2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR:
    cleanup_VkImageResolve2KHR((VkImageResolve2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR:
    cleanup_VkCopyBufferInfo2KHR((VkCopyBufferInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR:
    cleanup_VkCopyImageInfo2KHR((VkCopyImageInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR:
    cleanup_VkBlitImageInfo2KHR((VkBlitImageInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR:
    cleanup_VkCopyBufferToImageInfo2KHR((VkCopyBufferToImageInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR:
    cleanup_VkCopyImageToBufferInfo2KHR((VkCopyImageToBufferInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
  case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR:
    cleanup_VkResolveImageInfo2KHR((VkResolveImageInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
    cleanup_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
        (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
    cleanup_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
        (VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
  case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
    cleanup_VkDeviceDeviceMemoryReportCreateInfoEXT(
        (VkDeviceDeviceMemoryReportCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
    cleanup_VkDeviceMemoryReportCallbackDataEXT((VkDeviceMemoryReportCallbackDataEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
  case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    cleanup_VkFragmentShadingRateAttachmentInfoKHR(
        (VkFragmentShadingRateAttachmentInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
  case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
    cleanup_VkPipelineFragmentShadingRateStateCreateInfoKHR(
        (VkPipelineFragmentShadingRateStateCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
    cleanup_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
        (VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
    cleanup_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
        (VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
    cleanup_VkPhysicalDeviceFragmentShadingRateKHR(
        (VkPhysicalDeviceFragmentShadingRateKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_shader_terminate_invocation
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR:
    cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
        (VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
  case VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM:
    cleanup_VkCopyCommandTransformInfoQCOM((VkCopyCommandTransformInfoQCOM const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV:
    cleanup_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
        (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV:
    cleanup_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
        (VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
  case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV:
    cleanup_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
        (VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
    cleanup_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
        (VkPhysicalDeviceAccelerationStructureFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
    cleanup_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
        (VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
    cleanup_VkPhysicalDeviceRayQueryFeaturesKHR((VkPhysicalDeviceRayQueryFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
    cleanup_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
        (VkPhysicalDeviceAccelerationStructurePropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
    cleanup_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
        (VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
    cleanup_VkAccelerationStructureVersionInfoKHR(
        (VkAccelerationStructureVersionInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
    cleanup_VkAccelerationStructureBuildSizesInfoKHR(
        (VkAccelerationStructureBuildSizesInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE:
    cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
        (VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
  case VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE:
    cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
        (VkMutableDescriptorTypeCreateInfoVALVE const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_zero_initialize_workgroup_memory
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR:
    cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
        (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
    cleanup_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
        (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR:
    cleanup_VkMemoryBarrier2KHR((VkMemoryBarrier2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR:
    cleanup_VkImageMemoryBarrier2KHR((VkImageMemoryBarrier2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR:
    cleanup_VkBufferMemoryBarrier2KHR((VkBufferMemoryBarrier2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR:
    cleanup_VkDependencyInfoKHR((VkDependencyInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR:
    cleanup_VkSemaphoreSubmitInfoKHR((VkSemaphoreSubmitInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR:
    cleanup_VkCommandBufferSubmitInfoKHR((VkCommandBufferSubmitInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR:
    cleanup_VkSubmitInfo2KHR((VkSubmitInfo2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
    cleanup_VkQueueFamilyCheckpointProperties2NV(
        (VkQueueFamilyCheckpointProperties2NV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
    cleanup_VkCheckpointData2NV((VkCheckpointData2NV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
    cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
        (VkPhysicalDeviceSynchronization2FeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
  case VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX:
    cleanup_VkScreenSurfaceCreateInfoQNX((VkScreenSurfaceCreateInfoQNX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
    cleanup_VkImportMemoryZirconHandleInfoFUCHSIA(
        (VkImportMemoryZirconHandleInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
  case VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
    cleanup_VkMemoryZirconHandlePropertiesFUCHSIA(
        (VkMemoryZirconHandlePropertiesFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
  case VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    cleanup_VkMemoryGetZirconHandleInfoFUCHSIA((VkMemoryGetZirconHandleInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
    cleanup_VkImportSemaphoreZirconHandleInfoFUCHSIA(
        (VkImportSemaphoreZirconHandleInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    cleanup_VkSemaphoreGetZirconHandleInfoFUCHSIA(
        (VkSemaphoreGetZirconHandleInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
    cleanup_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
        (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
  case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
    cleanup_VkVertexInputBindingDescription2EXT((VkVertexInputBindingDescription2EXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
  case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
    cleanup_VkVertexInputAttributeDescription2EXT(
        (VkVertexInputAttributeDescription2EXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
    cleanup_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
        (VkPhysicalDeviceColorWriteEnableFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
    cleanup_VkPipelineColorWriteCreateInfoEXT((VkPipelineColorWriteCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR:
    cleanup_VkVideoQueueFamilyProperties2KHR((VkVideoQueueFamilyProperties2KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR:
    cleanup_VkVideoProfilesKHR((VkVideoProfilesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR:
    cleanup_VkPhysicalDeviceVideoFormatInfoKHR((VkPhysicalDeviceVideoFormatInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR:
    cleanup_VkVideoFormatPropertiesKHR((VkVideoFormatPropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR:
    cleanup_VkVideoProfileKHR((VkVideoProfileKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR:
    cleanup_VkVideoCapabilitiesKHR((VkVideoCapabilitiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR:
    cleanup_VkVideoGetMemoryPropertiesKHR((VkVideoGetMemoryPropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR:
    cleanup_VkVideoBindMemoryKHR((VkVideoBindMemoryKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR:
    cleanup_VkVideoPictureResourceKHR((VkVideoPictureResourceKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR:
    cleanup_VkVideoReferenceSlotKHR((VkVideoReferenceSlotKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR:
    cleanup_VkVideoDecodeInfoKHR((VkVideoDecodeInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_EXT:
    cleanup_VkVideoDecodeH264ProfileEXT((VkVideoDecodeH264ProfileEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT:
    cleanup_VkVideoDecodeH264CapabilitiesEXT((VkVideoDecodeH264CapabilitiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_CREATE_INFO_EXT:
    cleanup_VkVideoDecodeH264SessionCreateInfoEXT(
        (VkVideoDecodeH264SessionCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT:
    cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
        (VkVideoDecodeH264SessionParametersAddInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT:
    cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
        (VkVideoDecodeH264SessionParametersCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT:
    cleanup_VkVideoDecodeH264PictureInfoEXT((VkVideoDecodeH264PictureInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT:
    cleanup_VkVideoDecodeH264DpbSlotInfoEXT((VkVideoDecodeH264DpbSlotInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_MVC_EXT:
    cleanup_VkVideoDecodeH264MvcEXT((VkVideoDecodeH264MvcEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_EXT:
    cleanup_VkVideoDecodeH265ProfileEXT((VkVideoDecodeH265ProfileEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT:
    cleanup_VkVideoDecodeH265CapabilitiesEXT((VkVideoDecodeH265CapabilitiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_CREATE_INFO_EXT:
    cleanup_VkVideoDecodeH265SessionCreateInfoEXT(
        (VkVideoDecodeH265SessionCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT:
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
        (VkVideoDecodeH265SessionParametersAddInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT:
    cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
        (VkVideoDecodeH265SessionParametersCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT:
    cleanup_VkVideoDecodeH265PictureInfoEXT((VkVideoDecodeH265PictureInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT:
    cleanup_VkVideoDecodeH265DpbSlotInfoEXT((VkVideoDecodeH265DpbSlotInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR:
    cleanup_VkVideoSessionCreateInfoKHR((VkVideoSessionCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
    cleanup_VkVideoSessionParametersCreateInfoKHR(
        (VkVideoSessionParametersCreateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
    cleanup_VkVideoSessionParametersUpdateInfoKHR(
        (VkVideoSessionParametersUpdateInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR:
    cleanup_VkVideoBeginCodingInfoKHR((VkVideoBeginCodingInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR:
    cleanup_VkVideoEndCodingInfoKHR((VkVideoEndCodingInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
  case VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR:
    cleanup_VkVideoCodingControlInfoKHR((VkVideoCodingControlInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR:
    cleanup_VkVideoEncodeInfoKHR((VkVideoEncodeInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR:
    cleanup_VkVideoEncodeRateControlInfoKHR((VkVideoEncodeRateControlInfoKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT:
    cleanup_VkVideoEncodeH264CapabilitiesEXT((VkVideoEncodeH264CapabilitiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT:
    cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
        (VkVideoEncodeH264SessionCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT:
    cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
        (VkVideoEncodeH264SessionParametersAddInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT:
    cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
        (VkVideoEncodeH264SessionParametersCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT:
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT((VkVideoEncodeH264DpbSlotInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT:
    cleanup_VkVideoEncodeH264VclFrameInfoEXT((VkVideoEncodeH264VclFrameInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_EXT:
    cleanup_VkVideoEncodeH264EmitPictureParametersEXT(
        (VkVideoEncodeH264EmitPictureParametersEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_EXT:
    cleanup_VkVideoEncodeH264ProfileEXT((VkVideoEncodeH264ProfileEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_EXT:
    cleanup_VkVideoEncodeH264NaluSliceEXT((VkVideoEncodeH264NaluSliceEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV:
    cleanup_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
        (VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
    cleanup_VkCommandBufferInheritanceViewportScissorInfoNV(
        (VkCommandBufferInheritanceViewportScissorInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
    cleanup_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
        (VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
    cleanup_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
        (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
    cleanup_VkPhysicalDeviceProvokingVertexFeaturesEXT(
        (VkPhysicalDeviceProvokingVertexFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceProvokingVertexPropertiesEXT(
        (VkPhysicalDeviceProvokingVertexPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
    cleanup_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
        (VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
  case VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX:
    cleanup_VkCuModuleCreateInfoNVX((VkCuModuleCreateInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
  case VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX:
    cleanup_VkCuFunctionCreateInfoNVX((VkCuFunctionCreateInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
  case VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX:
    cleanup_VkCuLaunchInfoNVX((VkCuLaunchInfoNVX const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
    cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
        (VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
    cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
        (VkQueueFamilyGlobalPriorityPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
    cleanup_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
        (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceMultiDrawPropertiesEXT(
        (VkPhysicalDeviceMultiDrawPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
    cleanup_VkPhysicalDeviceMultiDrawFeaturesEXT(
        (VkPhysicalDeviceMultiDrawFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
  case VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
    cleanup_VkSubpassShadingPipelineCreateInfoHUAWEI(
        (VkSubpassShadingPipelineCreateInfoHUAWEI const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
    cleanup_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
        (VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
    cleanup_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
        (VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
    cleanup_VkPhysicalDeviceDrmPropertiesEXT((VkPhysicalDeviceDrmPropertiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
    cleanup_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
        (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV:
    cleanup_VkAccelerationStructureGeometryMotionTrianglesDataNV(
        (VkAccelerationStructureGeometryMotionTrianglesDataNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV:
    cleanup_VkAccelerationStructureMotionInfoNV((VkAccelerationStructureMotionInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
    cleanup_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
        (VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
  case VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV:
    cleanup_VkMemoryGetRemoteAddressInfoNV((VkMemoryGetRemoteAddressInfoNV const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
    cleanup_VkPhysicalDevicePresentIdFeaturesKHR(
        (VkPhysicalDevicePresentIdFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
  case VK_STRUCTURE_TYPE_PRESENT_ID_KHR:
    cleanup_VkPresentIdKHR((VkPresentIdKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
    cleanup_VkPhysicalDevicePresentWaitFeaturesKHR(
        (VkPhysicalDevicePresentWaitFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
    cleanup_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
        (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
    cleanup_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
        (VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT:
    cleanup_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
        (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR:
    cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
        (VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR:
    cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
        (VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT:
    cleanup_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
        (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
    cleanup_VkImportMemoryBufferCollectionFUCHSIA(
        (VkImportMemoryBufferCollectionFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
    cleanup_VkBufferCollectionImageCreateInfoFUCHSIA(
        (VkBufferCollectionImageCreateInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
    cleanup_VkBufferCollectionBufferCreateInfoFUCHSIA(
        (VkBufferCollectionBufferCreateInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA:
    cleanup_VkBufferCollectionCreateInfoFUCHSIA((VkBufferCollectionCreateInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA:
    cleanup_VkBufferCollectionPropertiesFUCHSIA((VkBufferCollectionPropertiesFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA:
    cleanup_VkBufferConstraintsInfoFUCHSIA((VkBufferConstraintsInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA:
    cleanup_VkSysmemColorSpaceFUCHSIA((VkSysmemColorSpaceFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA:
    cleanup_VkImageFormatConstraintsInfoFUCHSIA((VkImageFormatConstraintsInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA:
    cleanup_VkImageConstraintsInfoFUCHSIA((VkImageConstraintsInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
    cleanup_VkBufferCollectionConstraintsInfoFUCHSIA(
        (VkBufferCollectionConstraintsInfoFUCHSIA const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
  case VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR:
    cleanup_VkDeviceBufferMemoryRequirementsKHR((VkDeviceBufferMemoryRequirementsKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
  case VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR:
    cleanup_VkDeviceImageMemoryRequirementsKHR((VkDeviceImageMemoryRequirementsKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR:
    cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
        (VkPhysicalDeviceMaintenance4FeaturesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR:
    cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
        (VkPhysicalDeviceMaintenance4PropertiesKHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
    cleanup_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
        (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
  case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR:
    cleanup_VkFormatProperties3KHR((VkFormatProperties3KHR const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
  case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
    cleanup_VkDrmFormatModifierPropertiesList2EXT(
        (VkDrmFormatModifierPropertiesList2EXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 195 && VK_ANDROID_external_memory_android_hardware_buffer
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
    cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
        (VkAndroidHardwareBufferFormatProperties2ANDROID const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
  case VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT:
    cleanup_VkSamplerBorderColorComponentMappingCreateInfoEXT(
        (VkSamplerBorderColorComponentMappingCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
    cleanup_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
        (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT:
    cleanup_VkVideoEncodeH265CapabilitiesEXT((VkVideoEncodeH265CapabilitiesEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT:
    cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
        (VkVideoEncodeH265SessionCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT:
    cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
        (VkVideoEncodeH265SessionParametersAddInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT:
    cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
        (VkVideoEncodeH265SessionParametersCreateInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT:
    cleanup_VkVideoEncodeH265VclFrameInfoEXT((VkVideoEncodeH265VclFrameInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_EXT:
    cleanup_VkVideoEncodeH265EmitPictureParametersEXT(
        (VkVideoEncodeH265EmitPictureParametersEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_EXT:
    cleanup_VkVideoEncodeH265NaluSliceEXT((VkVideoEncodeH265NaluSliceEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_EXT:
    cleanup_VkVideoEncodeH265ProfileEXT((VkVideoEncodeH265ProfileEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT:
    cleanup_VkVideoEncodeH265DpbSlotInfoEXT((VkVideoEncodeH265DpbSlotInfoEXT const *)pData);
    break;
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_EXT:
    cleanup_VkVideoEncodeH265ReferenceListsEXT((VkVideoEncodeH265ReferenceListsEXT const *)pData);
    break;
#endif

  default:
    break;
  }
}

extern inline void cleanup_VkOffset2D(VkOffset2D const *pData);

extern inline void cleanup_VkOffset3D(VkOffset3D const *pData);

extern inline void cleanup_VkExtent2D(VkExtent2D const *pData);

extern inline void cleanup_VkExtent3D(VkExtent3D const *pData);

extern inline void cleanup_VkViewport(VkViewport const *pData);

extern inline void cleanup_VkRect2D(VkRect2D const *pData);

extern inline void cleanup_VkClearRect(VkClearRect const *pData);

extern inline void cleanup_VkComponentMapping(VkComponentMapping const *pData);

extern inline void cleanup_VkPhysicalDeviceProperties(VkPhysicalDeviceProperties const *pData);

extern inline void cleanup_VkExtensionProperties(VkExtensionProperties const *pData);

extern inline void cleanup_VkLayerProperties(VkLayerProperties const *pData);

void cleanup_VkApplicationInfo(VkApplicationInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pApplicationName - null-terminated
  free((void *)pData->pApplicationName);

  // pEngineName - null-terminated
  free((void *)pData->pEngineName);
}

void cleanup_VkAllocationCallbacks(VkAllocationCallbacks const *pData) {
  // pUserData
  free((void *)pData->pUserData);
}

void cleanup_VkDeviceQueueCreateInfo(VkDeviceQueueCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueuePriorities - queueCount
  free((void *)pData->pQueuePriorities);
}

void cleanup_VkDeviceCreateInfo(VkDeviceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueCreateInfos - queueCreateInfoCount
  if (pData->pQueueCreateInfos != NULL) {
    for (uint32_t i = 0; i < pData->queueCreateInfoCount; ++i)
      cleanup_VkDeviceQueueCreateInfo(&pData->pQueueCreateInfos[i]);
  }
  free((void *)pData->pQueueCreateInfos);

  // ppEnabledLayerNames - enabledLayerCount,null-terminated
  for (uint32_t i = 0; i < pData->enabledLayerCount; ++i) {
    free((void *)pData->ppEnabledLayerNames[i]);
  }
  free((void *)pData->ppEnabledLayerNames);

  // ppEnabledExtensionNames - enabledExtensionCount,null-terminated
  for (uint32_t i = 0; i < pData->enabledExtensionCount; ++i) {
    free((void *)pData->ppEnabledExtensionNames[i]);
  }
  free((void *)pData->ppEnabledExtensionNames);

  // pEnabledFeatures
  if (pData->pEnabledFeatures != NULL)
    cleanup_VkPhysicalDeviceFeatures(pData->pEnabledFeatures);
  free((void *)pData->pEnabledFeatures);
}

void cleanup_VkInstanceCreateInfo(VkInstanceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pApplicationInfo
  if (pData->pApplicationInfo != NULL)
    cleanup_VkApplicationInfo(pData->pApplicationInfo);
  free((void *)pData->pApplicationInfo);

  // ppEnabledLayerNames - enabledLayerCount,null-terminated
  for (uint32_t i = 0; i < pData->enabledLayerCount; ++i) {
    free((void *)pData->ppEnabledLayerNames[i]);
  }
  free((void *)pData->ppEnabledLayerNames);

  // ppEnabledExtensionNames - enabledExtensionCount,null-terminated
  for (uint32_t i = 0; i < pData->enabledExtensionCount; ++i) {
    free((void *)pData->ppEnabledExtensionNames[i]);
  }
  free((void *)pData->ppEnabledExtensionNames);
}

extern inline void cleanup_VkQueueFamilyProperties(VkQueueFamilyProperties const *pData);

extern inline void cleanup_VkPhysicalDeviceMemoryProperties(
    VkPhysicalDeviceMemoryProperties const *pData);

void cleanup_VkMemoryAllocateInfo(VkMemoryAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

extern inline void cleanup_VkMemoryRequirements(VkMemoryRequirements const *pData);

extern inline void cleanup_VkSparseImageFormatProperties(
    VkSparseImageFormatProperties const *pData);

extern inline void cleanup_VkSparseImageMemoryRequirements(
    VkSparseImageMemoryRequirements const *pData);

extern inline void cleanup_VkMemoryType(VkMemoryType const *pData);

extern inline void cleanup_VkMemoryHeap(VkMemoryHeap const *pData);

void cleanup_VkMappedMemoryRange(VkMappedMemoryRange const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

extern inline void cleanup_VkFormatProperties(VkFormatProperties const *pData);

extern inline void cleanup_VkImageFormatProperties(VkImageFormatProperties const *pData);

extern inline void cleanup_VkDescriptorBufferInfo(VkDescriptorBufferInfo const *pData);

extern inline void cleanup_VkDescriptorImageInfo(VkDescriptorImageInfo const *pData);

void cleanup_VkWriteDescriptorSet(VkWriteDescriptorSet const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pImageInfo - descriptorCount
  if (pData->pImageInfo != NULL) {
    for (uint32_t i = 0; i < pData->descriptorCount; ++i)
      cleanup_VkDescriptorImageInfo(&pData->pImageInfo[i]);
  }
  free((void *)pData->pImageInfo);

  // pBufferInfo - descriptorCount
  if (pData->pBufferInfo != NULL) {
    for (uint32_t i = 0; i < pData->descriptorCount; ++i)
      cleanup_VkDescriptorBufferInfo(&pData->pBufferInfo[i]);
  }
  free((void *)pData->pBufferInfo);

  // pTexelBufferView - descriptorCount
  free((void *)pData->pTexelBufferView);
}

void cleanup_VkCopyDescriptorSet(VkCopyDescriptorSet const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkBufferCreateInfo(VkBufferCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}

void cleanup_VkBufferViewCreateInfo(VkBufferViewCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

extern inline void cleanup_VkImageSubresource(VkImageSubresource const *pData);

extern inline void cleanup_VkImageSubresourceLayers(VkImageSubresourceLayers const *pData);

extern inline void cleanup_VkImageSubresourceRange(VkImageSubresourceRange const *pData);

void cleanup_VkMemoryBarrier(VkMemoryBarrier const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkBufferMemoryBarrier(VkBufferMemoryBarrier const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkImageMemoryBarrier(VkImageMemoryBarrier const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkImageCreateInfo(VkImageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}

extern inline void cleanup_VkSubresourceLayout(VkSubresourceLayout const *pData);

void cleanup_VkImageViewCreateInfo(VkImageViewCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

extern inline void cleanup_VkBufferCopy(VkBufferCopy const *pData);

extern inline void cleanup_VkSparseMemoryBind(VkSparseMemoryBind const *pData);

extern inline void cleanup_VkSparseImageMemoryBind(VkSparseImageMemoryBind const *pData);

void cleanup_VkSparseBufferMemoryBindInfo(VkSparseBufferMemoryBindInfo const *pData) {
  // pBinds - bindCount
  if (pData->pBinds != NULL) {
    for (uint32_t i = 0; i < pData->bindCount; ++i)
      cleanup_VkSparseMemoryBind(&pData->pBinds[i]);
  }
  free((void *)pData->pBinds);
}

void cleanup_VkSparseImageOpaqueMemoryBindInfo(VkSparseImageOpaqueMemoryBindInfo const *pData) {
  // pBinds - bindCount
  if (pData->pBinds != NULL) {
    for (uint32_t i = 0; i < pData->bindCount; ++i)
      cleanup_VkSparseMemoryBind(&pData->pBinds[i]);
  }
  free((void *)pData->pBinds);
}

void cleanup_VkSparseImageMemoryBindInfo(VkSparseImageMemoryBindInfo const *pData) {
  // pBinds - bindCount
  if (pData->pBinds != NULL) {
    for (uint32_t i = 0; i < pData->bindCount; ++i)
      cleanup_VkSparseImageMemoryBind(&pData->pBinds[i]);
  }
  free((void *)pData->pBinds);
}

void cleanup_VkBindSparseInfo(VkBindSparseInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphores - waitSemaphoreCount
  free((void *)pData->pWaitSemaphores);

  // pBufferBinds - bufferBindCount
  if (pData->pBufferBinds != NULL) {
    for (uint32_t i = 0; i < pData->bufferBindCount; ++i)
      cleanup_VkSparseBufferMemoryBindInfo(&pData->pBufferBinds[i]);
  }
  free((void *)pData->pBufferBinds);

  // pImageOpaqueBinds - imageOpaqueBindCount
  if (pData->pImageOpaqueBinds != NULL) {
    for (uint32_t i = 0; i < pData->imageOpaqueBindCount; ++i)
      cleanup_VkSparseImageOpaqueMemoryBindInfo(&pData->pImageOpaqueBinds[i]);
  }
  free((void *)pData->pImageOpaqueBinds);

  // pImageBinds - imageBindCount
  if (pData->pImageBinds != NULL) {
    for (uint32_t i = 0; i < pData->imageBindCount; ++i)
      cleanup_VkSparseImageMemoryBindInfo(&pData->pImageBinds[i]);
  }
  free((void *)pData->pImageBinds);

  // pSignalSemaphores - signalSemaphoreCount
  free((void *)pData->pSignalSemaphores);
}

extern inline void cleanup_VkImageCopy(VkImageCopy const *pData);

extern inline void cleanup_VkImageBlit(VkImageBlit const *pData);

extern inline void cleanup_VkBufferImageCopy(VkBufferImageCopy const *pData);

extern inline void cleanup_VkImageResolve(VkImageResolve const *pData);

void cleanup_VkShaderModuleCreateInfo(VkShaderModuleCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCode - codeSize / 4
  free((void *)pData->pCode);
}

void cleanup_VkDescriptorSetLayoutBinding(VkDescriptorSetLayoutBinding const *pData) {
  // pImmutableSamplers - descriptorCount
  free((void *)pData->pImmutableSamplers);
}

void cleanup_VkDescriptorSetLayoutCreateInfo(VkDescriptorSetLayoutCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBindings - bindingCount
  if (pData->pBindings != NULL) {
    for (uint32_t i = 0; i < pData->bindingCount; ++i)
      cleanup_VkDescriptorSetLayoutBinding(&pData->pBindings[i]);
  }
  free((void *)pData->pBindings);
}

extern inline void cleanup_VkDescriptorPoolSize(VkDescriptorPoolSize const *pData);

void cleanup_VkDescriptorPoolCreateInfo(VkDescriptorPoolCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPoolSizes - poolSizeCount
  if (pData->pPoolSizes != NULL) {
    for (uint32_t i = 0; i < pData->poolSizeCount; ++i)
      cleanup_VkDescriptorPoolSize(&pData->pPoolSizes[i]);
  }
  free((void *)pData->pPoolSizes);
}

void cleanup_VkDescriptorSetAllocateInfo(VkDescriptorSetAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetLayouts - descriptorSetCount
  free((void *)pData->pSetLayouts);
}

extern inline void cleanup_VkSpecializationMapEntry(VkSpecializationMapEntry const *pData);

void cleanup_VkSpecializationInfo(VkSpecializationInfo const *pData) {
  // pMapEntries - mapEntryCount
  if (pData->pMapEntries != NULL) {
    for (uint32_t i = 0; i < pData->mapEntryCount; ++i)
      cleanup_VkSpecializationMapEntry(&pData->pMapEntries[i]);
  }
  free((void *)pData->pMapEntries);

  // pData - dataSize
  free((void *)pData->pData);
}

void cleanup_VkPipelineShaderStageCreateInfo(VkPipelineShaderStageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);

  // pSpecializationInfo
  if (pData->pSpecializationInfo != NULL)
    cleanup_VkSpecializationInfo(pData->pSpecializationInfo);
  free((void *)pData->pSpecializationInfo);
}

void cleanup_VkComputePipelineCreateInfo(VkComputePipelineCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

extern inline void cleanup_VkVertexInputBindingDescription(
    VkVertexInputBindingDescription const *pData);

extern inline void cleanup_VkVertexInputAttributeDescription(
    VkVertexInputAttributeDescription const *pData);

void cleanup_VkPipelineVertexInputStateCreateInfo(
    VkPipelineVertexInputStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDescriptions - vertexBindingDescriptionCount
  if (pData->pVertexBindingDescriptions != NULL) {
    for (uint32_t i = 0; i < pData->vertexBindingDescriptionCount; ++i)
      cleanup_VkVertexInputBindingDescription(&pData->pVertexBindingDescriptions[i]);
  }
  free((void *)pData->pVertexBindingDescriptions);

  // pVertexAttributeDescriptions - vertexAttributeDescriptionCount
  if (pData->pVertexAttributeDescriptions != NULL) {
    for (uint32_t i = 0; i < pData->vertexAttributeDescriptionCount; ++i)
      cleanup_VkVertexInputAttributeDescription(&pData->pVertexAttributeDescriptions[i]);
  }
  free((void *)pData->pVertexAttributeDescriptions);
}

void cleanup_VkPipelineInputAssemblyStateCreateInfo(
    VkPipelineInputAssemblyStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkPipelineTessellationStateCreateInfo(
    VkPipelineTessellationStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkPipelineViewportStateCreateInfo(VkPipelineViewportStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewports - viewportCount
  if (pData->pViewports != NULL) {
    for (uint32_t i = 0; i < pData->viewportCount; ++i)
      cleanup_VkViewport(&pData->pViewports[i]);
  }
  free((void *)pData->pViewports);

  // pScissors - scissorCount
  if (pData->pScissors != NULL) {
    for (uint32_t i = 0; i < pData->scissorCount; ++i)
      cleanup_VkRect2D(&pData->pScissors[i]);
  }
  free((void *)pData->pScissors);
}

void cleanup_VkPipelineRasterizationStateCreateInfo(
    VkPipelineRasterizationStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkPipelineMultisampleStateCreateInfo(
    VkPipelineMultisampleStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSampleMask - (rasterizationSamples + 31) / 32
  free((void *)pData->pSampleMask);
}

extern inline void cleanup_VkPipelineColorBlendAttachmentState(
    VkPipelineColorBlendAttachmentState const *pData);

void cleanup_VkPipelineColorBlendStateCreateInfo(VkPipelineColorBlendStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  if (pData->pAttachments != NULL) {
    for (uint32_t i = 0; i < pData->attachmentCount; ++i)
      cleanup_VkPipelineColorBlendAttachmentState(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);
}

void cleanup_VkPipelineDynamicStateCreateInfo(VkPipelineDynamicStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDynamicStates - dynamicStateCount
  free((void *)pData->pDynamicStates);
}

extern inline void cleanup_VkStencilOpState(VkStencilOpState const *pData);

void cleanup_VkPipelineDepthStencilStateCreateInfo(
    VkPipelineDepthStencilStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkGraphicsPipelineCreateInfo(VkGraphicsPipelineCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  if (pData->pStages != NULL) {
    for (uint32_t i = 0; i < pData->stageCount; ++i)
      cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pVertexInputState
  if (pData->pVertexInputState != NULL)
    cleanup_VkPipelineVertexInputStateCreateInfo(pData->pVertexInputState);
  free((void *)pData->pVertexInputState);

  // pInputAssemblyState
  if (pData->pInputAssemblyState != NULL)
    cleanup_VkPipelineInputAssemblyStateCreateInfo(pData->pInputAssemblyState);
  free((void *)pData->pInputAssemblyState);

  // pTessellationState
  if (pData->pTessellationState != NULL)
    cleanup_VkPipelineTessellationStateCreateInfo(pData->pTessellationState);
  free((void *)pData->pTessellationState);

  // pViewportState
  if (pData->pViewportState != NULL)
    cleanup_VkPipelineViewportStateCreateInfo(pData->pViewportState);
  free((void *)pData->pViewportState);

  // pRasterizationState
  if (pData->pRasterizationState != NULL)
    cleanup_VkPipelineRasterizationStateCreateInfo(pData->pRasterizationState);
  free((void *)pData->pRasterizationState);

  // pMultisampleState
  if (pData->pMultisampleState != NULL)
    cleanup_VkPipelineMultisampleStateCreateInfo(pData->pMultisampleState);
  free((void *)pData->pMultisampleState);

  // pDepthStencilState
  if (pData->pDepthStencilState != NULL)
    cleanup_VkPipelineDepthStencilStateCreateInfo(pData->pDepthStencilState);
  free((void *)pData->pDepthStencilState);

  // pColorBlendState
  if (pData->pColorBlendState != NULL)
    cleanup_VkPipelineColorBlendStateCreateInfo(pData->pColorBlendState);
  free((void *)pData->pColorBlendState);

  // pDynamicState
  if (pData->pDynamicState != NULL)
    cleanup_VkPipelineDynamicStateCreateInfo(pData->pDynamicState);
  free((void *)pData->pDynamicState);
}

void cleanup_VkPipelineCacheCreateInfo(VkPipelineCacheCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInitialData - initialDataSize
  free((void *)pData->pInitialData);
}

extern inline void cleanup_VkPushConstantRange(VkPushConstantRange const *pData);

void cleanup_VkPipelineLayoutCreateInfo(VkPipelineLayoutCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetLayouts - setLayoutCount
  free((void *)pData->pSetLayouts);

  // pPushConstantRanges - pushConstantRangeCount
  if (pData->pPushConstantRanges != NULL) {
    for (uint32_t i = 0; i < pData->pushConstantRangeCount; ++i)
      cleanup_VkPushConstantRange(&pData->pPushConstantRanges[i]);
  }
  free((void *)pData->pPushConstantRanges);
}

void cleanup_VkSamplerCreateInfo(VkSamplerCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkCommandPoolCreateInfo(VkCommandPoolCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkCommandBufferAllocateInfo(VkCommandBufferAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkCommandBufferInheritanceInfo(VkCommandBufferInheritanceInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkCommandBufferBeginInfo(VkCommandBufferBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInheritanceInfo
  if (pData->pInheritanceInfo != NULL)
    cleanup_VkCommandBufferInheritanceInfo(pData->pInheritanceInfo);
  free((void *)pData->pInheritanceInfo);
}

void cleanup_VkRenderPassBeginInfo(VkRenderPassBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pClearValues - clearValueCount
  free((void *)pData->pClearValues);
}

extern inline void cleanup_VkClearDepthStencilValue(VkClearDepthStencilValue const *pData);

extern inline void cleanup_VkClearAttachment(VkClearAttachment const *pData);

extern inline void cleanup_VkAttachmentDescription(VkAttachmentDescription const *pData);

extern inline void cleanup_VkAttachmentReference(VkAttachmentReference const *pData);

void cleanup_VkSubpassDescription(VkSubpassDescription const *pData) {
  // pInputAttachments - inputAttachmentCount
  if (pData->pInputAttachments != NULL) {
    for (uint32_t i = 0; i < pData->inputAttachmentCount; ++i)
      cleanup_VkAttachmentReference(&pData->pInputAttachments[i]);
  }
  free((void *)pData->pInputAttachments);

  // pColorAttachments - colorAttachmentCount
  if (pData->pColorAttachments != NULL) {
    for (uint32_t i = 0; i < pData->colorAttachmentCount; ++i)
      cleanup_VkAttachmentReference(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pResolveAttachments - colorAttachmentCount
  if (pData->pResolveAttachments != NULL) {
    for (uint32_t i = 0; i < pData->colorAttachmentCount; ++i)
      cleanup_VkAttachmentReference(&pData->pResolveAttachments[i]);
  }
  free((void *)pData->pResolveAttachments);

  // pDepthStencilAttachment
  if (pData->pDepthStencilAttachment != NULL)
    cleanup_VkAttachmentReference(pData->pDepthStencilAttachment);
  free((void *)pData->pDepthStencilAttachment);

  // pPreserveAttachments - preserveAttachmentCount
  free((void *)pData->pPreserveAttachments);
}

extern inline void cleanup_VkSubpassDependency(VkSubpassDependency const *pData);

void cleanup_VkRenderPassCreateInfo(VkRenderPassCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  if (pData->pAttachments != NULL) {
    for (uint32_t i = 0; i < pData->attachmentCount; ++i)
      cleanup_VkAttachmentDescription(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);

  // pSubpasses - subpassCount
  if (pData->pSubpasses != NULL) {
    for (uint32_t i = 0; i < pData->subpassCount; ++i)
      cleanup_VkSubpassDescription(&pData->pSubpasses[i]);
  }
  free((void *)pData->pSubpasses);

  // pDependencies - dependencyCount
  if (pData->pDependencies != NULL) {
    for (uint32_t i = 0; i < pData->dependencyCount; ++i)
      cleanup_VkSubpassDependency(&pData->pDependencies[i]);
  }
  free((void *)pData->pDependencies);
}

void cleanup_VkEventCreateInfo(VkEventCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkFenceCreateInfo(VkFenceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

extern inline void cleanup_VkPhysicalDeviceFeatures(VkPhysicalDeviceFeatures const *pData);

extern inline void cleanup_VkPhysicalDeviceSparseProperties(
    VkPhysicalDeviceSparseProperties const *pData);

extern inline void cleanup_VkPhysicalDeviceLimits(VkPhysicalDeviceLimits const *pData);

void cleanup_VkSemaphoreCreateInfo(VkSemaphoreCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkQueryPoolCreateInfo(VkQueryPoolCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}

void cleanup_VkFramebufferCreateInfo(VkFramebufferCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  free((void *)pData->pAttachments);
}

extern inline void cleanup_VkDrawIndirectCommand(VkDrawIndirectCommand const *pData);

extern inline void cleanup_VkDrawIndexedIndirectCommand(VkDrawIndexedIndirectCommand const *pData);

extern inline void cleanup_VkDispatchIndirectCommand(VkDispatchIndirectCommand const *pData);

void cleanup_VkSubmitInfo(VkSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphores - waitSemaphoreCount
  free((void *)pData->pWaitSemaphores);

  // pWaitDstStageMask - waitSemaphoreCount
  free((void *)pData->pWaitDstStageMask);

  // pCommandBuffers - commandBufferCount
  free((void *)pData->pCommandBuffers);

  // pSignalSemaphores - signalSemaphoreCount
  free((void *)pData->pSignalSemaphores);
}

#if VK_KHR_display
void cleanup_VkDisplayPropertiesKHR(VkDisplayPropertiesKHR const *pData) {
  // displayName - null-terminated
  free((void *)pData->displayName);
}
#endif

#if VK_KHR_display
extern inline void cleanup_VkDisplayPlanePropertiesKHR(VkDisplayPlanePropertiesKHR const *pData);
#endif

#if VK_KHR_display
extern inline void cleanup_VkDisplayModeParametersKHR(VkDisplayModeParametersKHR const *pData);
#endif

#if VK_KHR_display
extern inline void cleanup_VkDisplayModePropertiesKHR(VkDisplayModePropertiesKHR const *pData);
#endif

#if VK_KHR_display
void cleanup_VkDisplayModeCreateInfoKHR(VkDisplayModeCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_display
extern inline void cleanup_VkDisplayPlaneCapabilitiesKHR(
    VkDisplayPlaneCapabilitiesKHR const *pData);
#endif

#if VK_KHR_display
void cleanup_VkDisplaySurfaceCreateInfoKHR(VkDisplaySurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_display_swapchain
void cleanup_VkDisplayPresentInfoKHR(VkDisplayPresentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_surface
extern inline void cleanup_VkSurfaceCapabilitiesKHR(VkSurfaceCapabilitiesKHR const *pData);
#endif

#if VK_KHR_android_surface
void cleanup_VkAndroidSurfaceCreateInfoKHR(VkAndroidSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // window
  free((void *)pData->window);
}
#endif

#if VK_NN_vi_surface
void cleanup_VkViSurfaceCreateInfoNN(VkViSurfaceCreateInfoNN const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // window
  free((void *)pData->window);
}
#endif

#if VK_KHR_wayland_surface
void cleanup_VkWaylandSurfaceCreateInfoKHR(VkWaylandSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // display
  free((void *)pData->display);

  // surface
  free((void *)pData->surface);
}
#endif

#if VK_KHR_win32_surface
void cleanup_VkWin32SurfaceCreateInfoKHR(VkWin32SurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_xlib_surface
void cleanup_VkXlibSurfaceCreateInfoKHR(VkXlibSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // dpy
  free((void *)pData->dpy);
}
#endif

#if VK_KHR_xcb_surface
void cleanup_VkXcbSurfaceCreateInfoKHR(VkXcbSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // connection
  free((void *)pData->connection);
}
#endif

#if VK_KHR_surface
extern inline void cleanup_VkSurfaceFormatKHR(VkSurfaceFormatKHR const *pData);
#endif

#if VK_KHR_swapchain
void cleanup_VkSwapchainCreateInfoKHR(VkSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}
#endif

#if VK_KHR_swapchain
void cleanup_VkPresentInfoKHR(VkPresentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphores - waitSemaphoreCount
  free((void *)pData->pWaitSemaphores);

  // pSwapchains - swapchainCount
  free((void *)pData->pSwapchains);

  // pImageIndices - swapchainCount
  free((void *)pData->pImageIndices);

  // pResults - swapchainCount
  free((void *)pData->pResults);
}
#endif

#if VK_EXT_debug_report
void cleanup_VkDebugReportCallbackCreateInfoEXT(VkDebugReportCallbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if VK_EXT_validation_flags
void cleanup_VkValidationFlagsEXT(VkValidationFlagsEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDisabledValidationChecks - disabledValidationCheckCount
  free((void *)pData->pDisabledValidationChecks);
}
#endif

#if VK_AMD_rasterization_order
void cleanup_VkPipelineRasterizationStateRasterizationOrderAMD(
    VkPipelineRasterizationStateRasterizationOrderAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_debug_marker
void cleanup_VkDebugMarkerObjectNameInfoEXT(VkDebugMarkerObjectNameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjectName - null-terminated
  free((void *)pData->pObjectName);
}
#endif

#if VK_EXT_debug_marker
void cleanup_VkDebugMarkerObjectTagInfoEXT(VkDebugMarkerObjectTagInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTag - tagSize
  free((void *)pData->pTag);
}
#endif

#if VK_EXT_debug_marker
void cleanup_VkDebugMarkerMarkerInfoEXT(VkDebugMarkerMarkerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMarkerName - null-terminated
  free((void *)pData->pMarkerName);
}
#endif

#if VK_NV_dedicated_allocation
void cleanup_VkDedicatedAllocationImageCreateInfoNV(
    VkDedicatedAllocationImageCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_dedicated_allocation
void cleanup_VkDedicatedAllocationBufferCreateInfoNV(
    VkDedicatedAllocationBufferCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_dedicated_allocation
void cleanup_VkDedicatedAllocationMemoryAllocateInfoNV(
    VkDedicatedAllocationMemoryAllocateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_external_memory_capabilities
extern inline void cleanup_VkExternalImageFormatPropertiesNV(
    VkExternalImageFormatPropertiesNV const *pData);
#endif

#if VK_NV_external_memory
void cleanup_VkExternalMemoryImageCreateInfoNV(VkExternalMemoryImageCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_external_memory
void cleanup_VkExportMemoryAllocateInfoNV(VkExportMemoryAllocateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_external_memory_win32
void cleanup_VkImportMemoryWin32HandleInfoNV(VkImportMemoryWin32HandleInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_external_memory_win32
void cleanup_VkExportMemoryWin32HandleInfoNV(VkExportMemoryWin32HandleInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if VK_NV_win32_keyed_mutex
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VkWin32KeyedMutexAcquireReleaseInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAcquireSyncs - acquireCount
  free((void *)pData->pAcquireSyncs);

  // pAcquireKeys - acquireCount
  free((void *)pData->pAcquireKeys);

  // pAcquireTimeoutMilliseconds - acquireCount
  free((void *)pData->pAcquireTimeoutMilliseconds);

  // pReleaseSyncs - releaseCount
  free((void *)pData->pReleaseSyncs);

  // pReleaseKeys - releaseCount
  free((void *)pData->pReleaseKeys);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceFeatures2(VkPhysicalDeviceFeatures2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkPhysicalDeviceFeatures2KHR(VkPhysicalDeviceFeatures2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceProperties2(VkPhysicalDeviceProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkPhysicalDeviceProperties2KHR(
    VkPhysicalDeviceProperties2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkFormatProperties2(VkFormatProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkFormatProperties2KHR(VkFormatProperties2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkImageFormatProperties2(VkImageFormatProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkImageFormatProperties2KHR(VkImageFormatProperties2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceImageFormatInfo2(VkPhysicalDeviceImageFormatInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkPhysicalDeviceImageFormatInfo2KHR(
    VkPhysicalDeviceImageFormatInfo2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkQueueFamilyProperties2(VkQueueFamilyProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkQueueFamilyProperties2KHR(VkQueueFamilyProperties2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMemoryProperties2(VkPhysicalDeviceMemoryProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkPhysicalDeviceMemoryProperties2KHR(
    VkPhysicalDeviceMemoryProperties2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkSparseImageFormatProperties2(VkSparseImageFormatProperties2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkSparseImageFormatProperties2KHR(
    VkSparseImageFormatProperties2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceSparseImageFormatInfo2(
    VkPhysicalDeviceSparseImageFormatInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_physical_device_properties2
extern inline void cleanup_VkPhysicalDeviceSparseImageFormatInfo2KHR(
    VkPhysicalDeviceSparseImageFormatInfo2KHR const *pData);
#endif

#if VK_KHR_push_descriptor
void cleanup_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VkPhysicalDevicePushDescriptorPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_incremental_present
void cleanup_VkPresentRegionsKHR(VkPresentRegionsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - swapchainCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->swapchainCount; ++i)
      cleanup_VkPresentRegionKHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_KHR_incremental_present
void cleanup_VkPresentRegionKHR(VkPresentRegionKHR const *pData) {
  // pRectangles - rectangleCount
  if (pData->pRectangles != NULL) {
    for (uint32_t i = 0; i < pData->rectangleCount; ++i)
      cleanup_VkRectLayerKHR(&pData->pRectangles[i]);
  }
  free((void *)pData->pRectangles);
}
#endif

#if VK_KHR_incremental_present
extern inline void cleanup_VkRectLayerKHR(VkRectLayerKHR const *pData);
#endif

#if VK_KHR_variable_pointers
extern inline void cleanup_VkPhysicalDeviceVariablePointerFeaturesKHR(
    VkPhysicalDeviceVariablePointerFeaturesKHR const *pData);
#endif

#if VK_VERSION_1_1
extern inline void cleanup_VkPhysicalDeviceVariablePointerFeatures(
    VkPhysicalDeviceVariablePointerFeatures const *pData);
#endif

#if VK_VERSION_1_1
extern inline void cleanup_VkExternalMemoryProperties(VkExternalMemoryProperties const *pData);
#endif

#if VK_KHR_external_memory_capabilities
extern inline void cleanup_VkExternalMemoryPropertiesKHR(
    VkExternalMemoryPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalImageFormatInfo(
    VkPhysicalDeviceExternalImageFormatInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_capabilities
extern inline void cleanup_VkPhysicalDeviceExternalImageFormatInfoKHR(
    VkPhysicalDeviceExternalImageFormatInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalImageFormatProperties(VkExternalImageFormatProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_capabilities
extern inline void cleanup_VkExternalImageFormatPropertiesKHR(
    VkExternalImageFormatPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalBufferInfo(VkPhysicalDeviceExternalBufferInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_capabilities
extern inline void cleanup_VkPhysicalDeviceExternalBufferInfoKHR(
    VkPhysicalDeviceExternalBufferInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalBufferProperties(VkExternalBufferProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_capabilities
extern inline void cleanup_VkExternalBufferPropertiesKHR(
    VkExternalBufferPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceIDProperties(VkPhysicalDeviceIDProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_capabilities && VK_KHR_external_semaphore_capabilities &&               \
    VK_KHR_external_fence_capabilities
extern inline void cleanup_VkPhysicalDeviceIDPropertiesKHR(
    VkPhysicalDeviceIDPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalMemoryImageCreateInfo(VkExternalMemoryImageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory
extern inline void cleanup_VkExternalMemoryImageCreateInfoKHR(
    VkExternalMemoryImageCreateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalMemoryBufferCreateInfo(VkExternalMemoryBufferCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory
extern inline void cleanup_VkExternalMemoryBufferCreateInfoKHR(
    VkExternalMemoryBufferCreateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExportMemoryAllocateInfo(VkExportMemoryAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory
extern inline void cleanup_VkExportMemoryAllocateInfoKHR(
    VkExportMemoryAllocateInfoKHR const *pData);
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkImportMemoryWin32HandleInfoKHR(VkImportMemoryWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkExportMemoryWin32HandleInfoKHR(VkExportMemoryWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkMemoryWin32HandlePropertiesKHR(VkMemoryWin32HandlePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_win32
void cleanup_VkMemoryGetWin32HandleInfoKHR(VkMemoryGetWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_fd
void cleanup_VkImportMemoryFdInfoKHR(VkImportMemoryFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_fd
void cleanup_VkMemoryFdPropertiesKHR(VkMemoryFdPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_memory_fd
void cleanup_VkMemoryGetFdInfoKHR(VkMemoryGetFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_win32_keyed_mutex
void cleanup_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VkWin32KeyedMutexAcquireReleaseInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAcquireSyncs - acquireCount
  free((void *)pData->pAcquireSyncs);

  // pAcquireKeys - acquireCount
  free((void *)pData->pAcquireKeys);

  // pAcquireTimeouts - acquireCount
  free((void *)pData->pAcquireTimeouts);

  // pReleaseSyncs - releaseCount
  free((void *)pData->pReleaseSyncs);

  // pReleaseKeys - releaseCount
  free((void *)pData->pReleaseKeys);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalSemaphoreInfo(
    VkPhysicalDeviceExternalSemaphoreInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_semaphore_capabilities
extern inline void cleanup_VkPhysicalDeviceExternalSemaphoreInfoKHR(
    VkPhysicalDeviceExternalSemaphoreInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalSemaphoreProperties(VkExternalSemaphoreProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_semaphore_capabilities
extern inline void cleanup_VkExternalSemaphorePropertiesKHR(
    VkExternalSemaphorePropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExportSemaphoreCreateInfo(VkExportSemaphoreCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_semaphore
extern inline void cleanup_VkExportSemaphoreCreateInfoKHR(
    VkExportSemaphoreCreateInfoKHR const *pData);
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkImportSemaphoreWin32HandleInfoKHR(VkImportSemaphoreWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkExportSemaphoreWin32HandleInfoKHR(VkExportSemaphoreWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkD3D12FenceSubmitInfoKHR(VkD3D12FenceSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreValues - waitSemaphoreValuesCount
  free((void *)pData->pWaitSemaphoreValues);

  // pSignalSemaphoreValues - signalSemaphoreValuesCount
  free((void *)pData->pSignalSemaphoreValues);
}
#endif

#if VK_KHR_external_semaphore_win32
void cleanup_VkSemaphoreGetWin32HandleInfoKHR(VkSemaphoreGetWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_semaphore_fd
void cleanup_VkImportSemaphoreFdInfoKHR(VkImportSemaphoreFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_semaphore_fd
void cleanup_VkSemaphoreGetFdInfoKHR(VkSemaphoreGetFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceExternalFenceInfo(VkPhysicalDeviceExternalFenceInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_fence_capabilities
extern inline void cleanup_VkPhysicalDeviceExternalFenceInfoKHR(
    VkPhysicalDeviceExternalFenceInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExternalFenceProperties(VkExternalFenceProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_fence_capabilities
extern inline void cleanup_VkExternalFencePropertiesKHR(VkExternalFencePropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkExportFenceCreateInfo(VkExportFenceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_fence
extern inline void cleanup_VkExportFenceCreateInfoKHR(VkExportFenceCreateInfoKHR const *pData);
#endif

#if VK_KHR_external_fence_win32
void cleanup_VkImportFenceWin32HandleInfoKHR(VkImportFenceWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_fence_win32
void cleanup_VkExportFenceWin32HandleInfoKHR(VkExportFenceWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttributes
  free((void *)pData->pAttributes);
}
#endif

#if VK_KHR_external_fence_win32
void cleanup_VkFenceGetWin32HandleInfoKHR(VkFenceGetWin32HandleInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_fence_fd
void cleanup_VkImportFenceFdInfoKHR(VkImportFenceFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_external_fence_fd
void cleanup_VkFenceGetFdInfoKHR(VkFenceGetFdInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMultiviewFeatures(VkPhysicalDeviceMultiviewFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_multiview
extern inline void cleanup_VkPhysicalDeviceMultiviewFeaturesKHR(
    VkPhysicalDeviceMultiviewFeaturesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMultiviewProperties(VkPhysicalDeviceMultiviewProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_multiview
extern inline void cleanup_VkPhysicalDeviceMultiviewPropertiesKHR(
    VkPhysicalDeviceMultiviewPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkRenderPassMultiviewCreateInfo(VkRenderPassMultiviewCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewMasks - subpassCount
  free((void *)pData->pViewMasks);

  // pViewOffsets - dependencyCount
  free((void *)pData->pViewOffsets);

  // pCorrelationMasks - correlationMaskCount
  free((void *)pData->pCorrelationMasks);
}
#endif

#if VK_KHR_multiview
extern inline void cleanup_VkRenderPassMultiviewCreateInfoKHR(
    VkRenderPassMultiviewCreateInfoKHR const *pData);
#endif

#if VK_EXT_display_surface_counter
void cleanup_VkSurfaceCapabilities2EXT(VkSurfaceCapabilities2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_display_control
void cleanup_VkDisplayPowerInfoEXT(VkDisplayPowerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_display_control
void cleanup_VkDeviceEventInfoEXT(VkDeviceEventInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_display_control
void cleanup_VkDisplayEventInfoEXT(VkDisplayEventInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_display_control
void cleanup_VkSwapchainCounterCreateInfoEXT(VkSwapchainCounterCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceGroupProperties(VkPhysicalDeviceGroupProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_device_group_creation
extern inline void cleanup_VkPhysicalDeviceGroupPropertiesKHR(
    VkPhysicalDeviceGroupPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryAllocateFlagsInfo(VkMemoryAllocateFlagsInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkMemoryAllocateFlagsInfoKHR(VkMemoryAllocateFlagsInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkBindBufferMemoryInfo(VkBindBufferMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_bind_memory2
extern inline void cleanup_VkBindBufferMemoryInfoKHR(VkBindBufferMemoryInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkBindBufferMemoryDeviceGroupInfo(VkBindBufferMemoryDeviceGroupInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkBindBufferMemoryDeviceGroupInfoKHR(
    VkBindBufferMemoryDeviceGroupInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkBindImageMemoryInfo(VkBindImageMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_bind_memory2
extern inline void cleanup_VkBindImageMemoryInfoKHR(VkBindImageMemoryInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkBindImageMemoryDeviceGroupInfo(VkBindImageMemoryDeviceGroupInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);

  // pSplitInstanceBindRegions - splitInstanceBindRegionCount
  if (pData->pSplitInstanceBindRegions != NULL) {
    for (uint32_t i = 0; i < pData->splitInstanceBindRegionCount; ++i)
      cleanup_VkRect2D(&pData->pSplitInstanceBindRegions[i]);
  }
  free((void *)pData->pSplitInstanceBindRegions);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkBindImageMemoryDeviceGroupInfoKHR(
    VkBindImageMemoryDeviceGroupInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupRenderPassBeginInfo(VkDeviceGroupRenderPassBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceRenderAreas - deviceRenderAreaCount
  if (pData->pDeviceRenderAreas != NULL) {
    for (uint32_t i = 0; i < pData->deviceRenderAreaCount; ++i)
      cleanup_VkRect2D(&pData->pDeviceRenderAreas[i]);
  }
  free((void *)pData->pDeviceRenderAreas);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkDeviceGroupRenderPassBeginInfoKHR(
    VkDeviceGroupRenderPassBeginInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupCommandBufferBeginInfo(VkDeviceGroupCommandBufferBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkDeviceGroupCommandBufferBeginInfoKHR(
    VkDeviceGroupCommandBufferBeginInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupSubmitInfo(VkDeviceGroupSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreDeviceIndices - waitSemaphoreCount
  free((void *)pData->pWaitSemaphoreDeviceIndices);

  // pCommandBufferDeviceMasks - commandBufferCount
  free((void *)pData->pCommandBufferDeviceMasks);

  // pSignalSemaphoreDeviceIndices - signalSemaphoreCount
  free((void *)pData->pSignalSemaphoreDeviceIndices);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkDeviceGroupSubmitInfoKHR(VkDeviceGroupSubmitInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupBindSparseInfo(VkDeviceGroupBindSparseInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_device_group
extern inline void cleanup_VkDeviceGroupBindSparseInfoKHR(
    VkDeviceGroupBindSparseInfoKHR const *pData);
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkDeviceGroupPresentCapabilitiesKHR(VkDeviceGroupPresentCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkImageSwapchainCreateInfoKHR(VkImageSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkBindImageMemorySwapchainInfoKHR(VkBindImageMemorySwapchainInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkAcquireNextImageInfoKHR(VkAcquireNextImageInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkDeviceGroupPresentInfoKHR(VkDeviceGroupPresentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceMasks - swapchainCount
  free((void *)pData->pDeviceMasks);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceGroupDeviceCreateInfo(VkDeviceGroupDeviceCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPhysicalDevices - physicalDeviceCount
  free((void *)pData->pPhysicalDevices);
}
#endif

#if VK_KHR_device_group_creation
extern inline void cleanup_VkDeviceGroupDeviceCreateInfoKHR(
    VkDeviceGroupDeviceCreateInfoKHR const *pData);
#endif

#if VK_KHR_swapchain && VK_KHR_device_group
void cleanup_VkDeviceGroupSwapchainCreateInfoKHR(VkDeviceGroupSwapchainCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
extern inline void cleanup_VkDescriptorUpdateTemplateEntry(
    VkDescriptorUpdateTemplateEntry const *pData);
#endif

#if VK_KHR_descriptor_update_template
extern inline void cleanup_VkDescriptorUpdateTemplateEntryKHR(
    VkDescriptorUpdateTemplateEntryKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDescriptorUpdateTemplateCreateInfo(
    VkDescriptorUpdateTemplateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorUpdateEntries - descriptorUpdateEntryCount
  if (pData->pDescriptorUpdateEntries != NULL) {
    for (uint32_t i = 0; i < pData->descriptorUpdateEntryCount; ++i)
      cleanup_VkDescriptorUpdateTemplateEntry(&pData->pDescriptorUpdateEntries[i]);
  }
  free((void *)pData->pDescriptorUpdateEntries);
}
#endif

#if VK_KHR_descriptor_update_template
extern inline void cleanup_VkDescriptorUpdateTemplateCreateInfoKHR(
    VkDescriptorUpdateTemplateCreateInfoKHR const *pData);
#endif

#if VK_EXT_hdr_metadata
extern inline void cleanup_VkXYColorEXT(VkXYColorEXT const *pData);
#endif

#if VK_EXT_hdr_metadata
void cleanup_VkHdrMetadataEXT(VkHdrMetadataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_GOOGLE_display_timing
extern inline void cleanup_VkRefreshCycleDurationGOOGLE(VkRefreshCycleDurationGOOGLE const *pData);
#endif

#if VK_GOOGLE_display_timing
extern inline void cleanup_VkPastPresentationTimingGOOGLE(
    VkPastPresentationTimingGOOGLE const *pData);
#endif

#if VK_GOOGLE_display_timing
void cleanup_VkPresentTimesInfoGOOGLE(VkPresentTimesInfoGOOGLE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTimes - swapchainCount
  if (pData->pTimes != NULL) {
    for (uint32_t i = 0; i < pData->swapchainCount; ++i)
      cleanup_VkPresentTimeGOOGLE(&pData->pTimes[i]);
  }
  free((void *)pData->pTimes);
}
#endif

#if VK_GOOGLE_display_timing
extern inline void cleanup_VkPresentTimeGOOGLE(VkPresentTimeGOOGLE const *pData);
#endif

#if VK_MVK_ios_surface
void cleanup_VkIOSSurfaceCreateInfoMVK(VkIOSSurfaceCreateInfoMVK const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pView
  free((void *)pData->pView);
}
#endif

#if VK_MVK_macos_surface
void cleanup_VkMacOSSurfaceCreateInfoMVK(VkMacOSSurfaceCreateInfoMVK const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pView
  free((void *)pData->pView);
}
#endif

#if VK_NV_clip_space_w_scaling
extern inline void cleanup_VkViewportWScalingNV(VkViewportWScalingNV const *pData);
#endif

#if VK_NV_clip_space_w_scaling
void cleanup_VkPipelineViewportWScalingStateCreateInfoNV(
    VkPipelineViewportWScalingStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewportWScalings - viewportCount
  if (pData->pViewportWScalings != NULL) {
    for (uint32_t i = 0; i < pData->viewportCount; ++i)
      cleanup_VkViewportWScalingNV(&pData->pViewportWScalings[i]);
  }
  free((void *)pData->pViewportWScalings);
}
#endif

#if VK_NV_viewport_swizzle
extern inline void cleanup_VkViewportSwizzleNV(VkViewportSwizzleNV const *pData);
#endif

#if VK_NV_viewport_swizzle
void cleanup_VkPipelineViewportSwizzleStateCreateInfoNV(
    VkPipelineViewportSwizzleStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewportSwizzles - viewportCount
  if (pData->pViewportSwizzles != NULL) {
    for (uint32_t i = 0; i < pData->viewportCount; ++i)
      cleanup_VkViewportSwizzleNV(&pData->pViewportSwizzles[i]);
  }
  free((void *)pData->pViewportSwizzles);
}
#endif

#if VK_EXT_discard_rectangles
void cleanup_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VkPhysicalDeviceDiscardRectanglePropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_discard_rectangles
void cleanup_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VkPipelineDiscardRectangleStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDiscardRectangles - discardRectangleCount
  if (pData->pDiscardRectangles != NULL) {
    for (uint32_t i = 0; i < pData->discardRectangleCount; ++i)
      cleanup_VkRect2D(&pData->pDiscardRectangles[i]);
  }
  free((void *)pData->pDiscardRectangles);
}
#endif

#if VK_NVX_multiview_per_view_attributes
void cleanup_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
extern inline void cleanup_VkInputAttachmentAspectReference(
    VkInputAttachmentAspectReference const *pData);
#endif

#if VK_KHR_maintenance2
extern inline void cleanup_VkInputAttachmentAspectReferenceKHR(
    VkInputAttachmentAspectReferenceKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkRenderPassInputAttachmentAspectCreateInfo(
    VkRenderPassInputAttachmentAspectCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAspectReferences - aspectReferenceCount
  if (pData->pAspectReferences != NULL) {
    for (uint32_t i = 0; i < pData->aspectReferenceCount; ++i)
      cleanup_VkInputAttachmentAspectReference(&pData->pAspectReferences[i]);
  }
  free((void *)pData->pAspectReferences);
}
#endif

#if VK_KHR_maintenance2
extern inline void cleanup_VkRenderPassInputAttachmentAspectCreateInfoKHR(
    VkRenderPassInputAttachmentAspectCreateInfoKHR const *pData);
#endif

#if VK_KHR_get_surface_capabilities2
void cleanup_VkPhysicalDeviceSurfaceInfo2KHR(VkPhysicalDeviceSurfaceInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_surface_capabilities2
void cleanup_VkSurfaceCapabilities2KHR(VkSurfaceCapabilities2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_surface_capabilities2
void cleanup_VkSurfaceFormat2KHR(VkSurfaceFormat2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_shared_presentable_image
void cleanup_VkSharedPresentSurfaceCapabilitiesKHR(
    VkSharedPresentSurfaceCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDevice16BitStorageFeatures(
    VkPhysicalDevice16BitStorageFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_16bit_storage
extern inline void cleanup_VkPhysicalDevice16BitStorageFeaturesKHR(
    VkPhysicalDevice16BitStorageFeaturesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceSubgroupProperties(VkPhysicalDeviceSubgroupProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkBufferMemoryRequirementsInfo2(VkBufferMemoryRequirementsInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_memory_requirements2
extern inline void cleanup_VkBufferMemoryRequirementsInfo2KHR(
    VkBufferMemoryRequirementsInfo2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkImageMemoryRequirementsInfo2(VkImageMemoryRequirementsInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_memory_requirements2
extern inline void cleanup_VkImageMemoryRequirementsInfo2KHR(
    VkImageMemoryRequirementsInfo2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkImageSparseMemoryRequirementsInfo2(
    VkImageSparseMemoryRequirementsInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_memory_requirements2
extern inline void cleanup_VkImageSparseMemoryRequirementsInfo2KHR(
    VkImageSparseMemoryRequirementsInfo2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryRequirements2(VkMemoryRequirements2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_memory_requirements2 && VK_NV_ray_tracing && VK_VERSION_1_1 && VK_NVX_raytracing
extern inline void cleanup_VkMemoryRequirements2KHR(VkMemoryRequirements2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkSparseImageMemoryRequirements2(VkSparseImageMemoryRequirements2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_get_memory_requirements2
extern inline void cleanup_VkSparseImageMemoryRequirements2KHR(
    VkSparseImageMemoryRequirements2KHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDevicePointClippingProperties(
    VkPhysicalDevicePointClippingProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_maintenance2
extern inline void cleanup_VkPhysicalDevicePointClippingPropertiesKHR(
    VkPhysicalDevicePointClippingPropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryDedicatedRequirements(VkMemoryDedicatedRequirements const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_dedicated_allocation
extern inline void cleanup_VkMemoryDedicatedRequirementsKHR(
    VkMemoryDedicatedRequirementsKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkMemoryDedicatedAllocateInfo(VkMemoryDedicatedAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_dedicated_allocation
extern inline void cleanup_VkMemoryDedicatedAllocateInfoKHR(
    VkMemoryDedicatedAllocateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkImageViewUsageCreateInfo(VkImageViewUsageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_maintenance2
extern inline void cleanup_VkImageViewUsageCreateInfoKHR(
    VkImageViewUsageCreateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPipelineTessellationDomainOriginStateCreateInfo(
    VkPipelineTessellationDomainOriginStateCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_maintenance2
extern inline void cleanup_VkPipelineTessellationDomainOriginStateCreateInfoKHR(
    VkPipelineTessellationDomainOriginStateCreateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkSamplerYcbcrConversionInfo(VkSamplerYcbcrConversionInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
extern inline void cleanup_VkSamplerYcbcrConversionInfoKHR(
    VkSamplerYcbcrConversionInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkSamplerYcbcrConversionCreateInfo(VkSamplerYcbcrConversionCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
extern inline void cleanup_VkSamplerYcbcrConversionCreateInfoKHR(
    VkSamplerYcbcrConversionCreateInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkBindImagePlaneMemoryInfo(VkBindImagePlaneMemoryInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
extern inline void cleanup_VkBindImagePlaneMemoryInfoKHR(
    VkBindImagePlaneMemoryInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkImagePlaneMemoryRequirementsInfo(VkImagePlaneMemoryRequirementsInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
extern inline void cleanup_VkImagePlaneMemoryRequirementsInfoKHR(
    VkImagePlaneMemoryRequirementsInfoKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VkPhysicalDeviceSamplerYcbcrConversionFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
extern inline void cleanup_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkSamplerYcbcrConversionImageFormatProperties(
    VkSamplerYcbcrConversionImageFormatProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_sampler_ycbcr_conversion
extern inline void cleanup_VkSamplerYcbcrConversionImageFormatPropertiesKHR(
    VkSamplerYcbcrConversionImageFormatPropertiesKHR const *pData);
#endif

#if VK_AMD_texture_gather_bias_lod
void cleanup_VkTextureLODGatherFormatPropertiesAMD(
    VkTextureLODGatherFormatPropertiesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkProtectedSubmitInfo(VkProtectedSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceProtectedMemoryFeatures(
    VkPhysicalDeviceProtectedMemoryFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceProtectedMemoryProperties(
    VkPhysicalDeviceProtectedMemoryProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkDeviceQueueInfo2(VkDeviceQueueInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_fragment_coverage_to_color
void cleanup_VkPipelineCoverageToColorStateCreateInfoNV(
    VkPipelineCoverageToColorStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_sampler_filter_minmax
extern inline void cleanup_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT const *pData);
#endif

#if VK_EXT_sample_locations
extern inline void cleanup_VkSampleLocationEXT(VkSampleLocationEXT const *pData);
#endif

#if VK_EXT_sample_locations
void cleanup_VkSampleLocationsInfoEXT(VkSampleLocationsInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSampleLocations - sampleLocationsCount
  if (pData->pSampleLocations != NULL) {
    for (uint32_t i = 0; i < pData->sampleLocationsCount; ++i)
      cleanup_VkSampleLocationEXT(&pData->pSampleLocations[i]);
  }
  free((void *)pData->pSampleLocations);
}
#endif

#if VK_EXT_sample_locations
extern inline void cleanup_VkAttachmentSampleLocationsEXT(
    VkAttachmentSampleLocationsEXT const *pData);
#endif

#if VK_EXT_sample_locations
extern inline void cleanup_VkSubpassSampleLocationsEXT(VkSubpassSampleLocationsEXT const *pData);
#endif

#if VK_EXT_sample_locations
void cleanup_VkRenderPassSampleLocationsBeginInfoEXT(
    VkRenderPassSampleLocationsBeginInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachmentInitialSampleLocations - attachmentInitialSampleLocationsCount
  if (pData->pAttachmentInitialSampleLocations != NULL) {
    for (uint32_t i = 0; i < pData->attachmentInitialSampleLocationsCount; ++i)
      cleanup_VkAttachmentSampleLocationsEXT(&pData->pAttachmentInitialSampleLocations[i]);
  }
  free((void *)pData->pAttachmentInitialSampleLocations);

  // pPostSubpassSampleLocations - postSubpassSampleLocationsCount
  if (pData->pPostSubpassSampleLocations != NULL) {
    for (uint32_t i = 0; i < pData->postSubpassSampleLocationsCount; ++i)
      cleanup_VkSubpassSampleLocationsEXT(&pData->pPostSubpassSampleLocations[i]);
  }
  free((void *)pData->pPostSubpassSampleLocations);
}
#endif

#if VK_EXT_sample_locations
void cleanup_VkPipelineSampleLocationsStateCreateInfoEXT(
    VkPipelineSampleLocationsStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_sample_locations
void cleanup_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VkPhysicalDeviceSampleLocationsPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_sample_locations
void cleanup_VkMultisamplePropertiesEXT(VkMultisamplePropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_sampler_filter_minmax
extern inline void cleanup_VkSamplerReductionModeCreateInfoEXT(
    VkSamplerReductionModeCreateInfoEXT const *pData);
#endif

#if VK_EXT_blend_operation_advanced
void cleanup_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_blend_operation_advanced
void cleanup_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_blend_operation_advanced
void cleanup_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VkPipelineColorBlendAdvancedStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_NV_framebuffer_mixed_samples
void cleanup_VkPipelineCoverageModulationStateCreateInfoNV(
    VkPipelineCoverageModulationStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCoverageModulationTable - coverageModulationTableCount
  free((void *)pData->pCoverageModulationTable);
}
#endif

#if VK_KHR_image_format_list
extern inline void cleanup_VkImageFormatListCreateInfoKHR(
    VkImageFormatListCreateInfoKHR const *pData);
#endif

#if VK_EXT_validation_cache
void cleanup_VkValidationCacheCreateInfoEXT(VkValidationCacheCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInitialData - initialDataSize
  free((void *)pData->pInitialData);
}
#endif

#if VK_EXT_validation_cache
void cleanup_VkShaderModuleValidationCacheCreateInfoEXT(
    VkShaderModuleValidationCacheCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_VERSION_1_1
void cleanup_VkPhysicalDeviceMaintenance3Properties(
    VkPhysicalDeviceMaintenance3Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_maintenance3
extern inline void cleanup_VkPhysicalDeviceMaintenance3PropertiesKHR(
    VkPhysicalDeviceMaintenance3PropertiesKHR const *pData);
#endif

#if VK_VERSION_1_1
void cleanup_VkDescriptorSetLayoutSupport(VkDescriptorSetLayoutSupport const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_KHR_maintenance3
extern inline void cleanup_VkDescriptorSetLayoutSupportKHR(
    VkDescriptorSetLayoutSupportKHR const *pData);
#endif

#if VK_VERSION_1_1
extern inline void cleanup_VkPhysicalDeviceShaderDrawParameterFeatures(
    VkPhysicalDeviceShaderDrawParameterFeatures const *pData);
#endif

#if VK_ANDROID_native_buffer
void cleanup_VkNativeBufferANDROID(VkNativeBufferANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // handle
  free((void *)pData->handle);
}
#endif

#if VK_AMD_shader_info
extern inline void cleanup_VkShaderResourceUsageAMD(VkShaderResourceUsageAMD const *pData);
#endif

#if VK_AMD_shader_info
extern inline void cleanup_VkShaderStatisticsInfoAMD(VkShaderStatisticsInfoAMD const *pData);
#endif

#if VK_EXT_global_priority
void cleanup_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VkDeviceQueueGlobalPriorityCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsObjectNameInfoEXT(VkDebugUtilsObjectNameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjectName - null-terminated
  free((void *)pData->pObjectName);
}
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsObjectTagInfoEXT(VkDebugUtilsObjectTagInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTag - tagSize
  free((void *)pData->pTag);
}
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsLabelEXT(VkDebugUtilsLabelEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLabelName - null-terminated
  free((void *)pData->pLabelName);
}
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsMessengerCreateInfoEXT(VkDebugUtilsMessengerCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if VK_EXT_debug_utils
void cleanup_VkDebugUtilsMessengerCallbackDataEXT(
    VkDebugUtilsMessengerCallbackDataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMessageIdName - null-terminated
  free((void *)pData->pMessageIdName);

  // pMessage - null-terminated
  free((void *)pData->pMessage);

  // pQueueLabels - queueLabelCount
  if (pData->pQueueLabels != NULL) {
    for (uint32_t i = 0; i < pData->queueLabelCount; ++i)
      cleanup_VkDebugUtilsLabelEXT(&pData->pQueueLabels[i]);
  }
  free((void *)pData->pQueueLabels);

  // pCmdBufLabels - cmdBufLabelCount
  if (pData->pCmdBufLabels != NULL) {
    for (uint32_t i = 0; i < pData->cmdBufLabelCount; ++i)
      cleanup_VkDebugUtilsLabelEXT(&pData->pCmdBufLabels[i]);
  }
  free((void *)pData->pCmdBufLabels);

  // pObjects - objectCount
  if (pData->pObjects != NULL) {
    for (uint32_t i = 0; i < pData->objectCount; ++i)
      cleanup_VkDebugUtilsObjectNameInfoEXT(&pData->pObjects[i]);
  }
  free((void *)pData->pObjects);
}
#endif

#if VK_EXT_external_memory_host
void cleanup_VkImportMemoryHostPointerInfoEXT(VkImportMemoryHostPointerInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pHostPointer
  free((void *)pData->pHostPointer);
}
#endif

#if VK_EXT_external_memory_host
void cleanup_VkMemoryHostPointerPropertiesEXT(VkMemoryHostPointerPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_external_memory_host
void cleanup_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_conservative_rasterization
void cleanup_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_AMD_shader_core_properties
void cleanup_VkPhysicalDeviceShaderCorePropertiesAMD(
    VkPhysicalDeviceShaderCorePropertiesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_conservative_rasterization
void cleanup_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VkPipelineRasterizationConservativeStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_EXT_descriptor_indexing
extern inline void cleanup_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT const *pData);
#endif

#if VK_EXT_descriptor_indexing
extern inline void cleanup_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT const *pData);
#endif

#if VK_EXT_descriptor_indexing
extern inline void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT const *pData);
#endif

#if VK_EXT_descriptor_indexing
extern inline void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT const *pData);
#endif

#if VK_EXT_descriptor_indexing
extern inline void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT const *pData);
#endif

#if VK_EXT_vertex_attribute_divisor
extern inline void cleanup_VkVertexInputBindingDivisorDescriptionEXT(
    VkVertexInputBindingDivisorDescriptionEXT const *pData);
#endif

#if VK_EXT_vertex_attribute_divisor
void cleanup_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VkPipelineVertexInputDivisorStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVertexBindingDivisors - vertexBindingDivisorCount
  if (pData->pVertexBindingDivisors != NULL) {
    for (uint32_t i = 0; i < pData->vertexBindingDivisorCount; ++i)
      cleanup_VkVertexInputBindingDivisorDescriptionEXT(&pData->pVertexBindingDivisors[i]);
  }
  free((void *)pData->pVertexBindingDivisors);
}
#endif

#if VK_EXT_vertex_attribute_divisor
void cleanup_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkImportAndroidHardwareBufferInfoANDROID(
    VkImportAndroidHardwareBufferInfoANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // buffer
  free((void *)pData->buffer);
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferUsageANDROID(VkAndroidHardwareBufferUsageANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferPropertiesANDROID(
    VkAndroidHardwareBufferPropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VkMemoryGetAndroidHardwareBufferInfoANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VkAndroidHardwareBufferFormatPropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkExternalFormatANDROID(VkExternalFormatANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkDeviceGeneratedCommandsFeaturesNVX(
    VkDeviceGeneratedCommandsFeaturesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkDeviceGeneratedCommandsLimitsNVX(VkDeviceGeneratedCommandsLimitsNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkIndirectCommandsTokenNVX(VkIndirectCommandsTokenNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkIndirectCommandsLayoutTokenNVX(
    VkIndirectCommandsLayoutTokenNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkIndirectCommandsLayoutCreateInfoNVX(
    VkIndirectCommandsLayoutCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTokens - tokenCount
  if (pData->pTokens != NULL) {
    for (uint32_t i = 0; i < pData->tokenCount; ++i)
      cleanup_VkIndirectCommandsLayoutTokenNVX(&pData->pTokens[i]);
  }
  free((void *)pData->pTokens);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkCmdProcessCommandsInfoNVX(VkCmdProcessCommandsInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pIndirectCommandsTokens - indirectCommandsTokenCount
  if (pData->pIndirectCommandsTokens != NULL) {
    for (uint32_t i = 0; i < pData->indirectCommandsTokenCount; ++i)
      cleanup_VkIndirectCommandsTokenNVX(&pData->pIndirectCommandsTokens[i]);
  }
  free((void *)pData->pIndirectCommandsTokens);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkCmdReserveSpaceForCommandsInfoNVX(VkCmdReserveSpaceForCommandsInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
void cleanup_VkObjectTableCreateInfoNVX(VkObjectTableCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pObjectEntryTypes - objectCount
  free((void *)pData->pObjectEntryTypes);

  // pObjectEntryCounts - objectCount
  free((void *)pData->pObjectEntryCounts);

  // pObjectEntryUsageFlags - objectCount
  free((void *)pData->pObjectEntryUsageFlags);
}
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkObjectTableEntryNVX(VkObjectTableEntryNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkObjectTablePipelineEntryNVX(
    VkObjectTablePipelineEntryNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkObjectTableDescriptorSetEntryNVX(
    VkObjectTableDescriptorSetEntryNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkObjectTableVertexBufferEntryNVX(
    VkObjectTableVertexBufferEntryNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkObjectTableIndexBufferEntryNVX(
    VkObjectTableIndexBufferEntryNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 134 && VK_NVX_device_generated_commands
extern inline void cleanup_VkObjectTablePushConstantEntryNVX(
    VkObjectTablePushConstantEntryNVX const *pData);
#endif

#if VK_HEADER_VERSION <= 90 && VK_KHR_mir_surface
void cleanup_VkMirSurfaceCreateInfoKHR(VkMirSurfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // connection
  free((void *)pData->connection);

  // mirSurface
  free((void *)pData->mirSurface);
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayProperties2KHR(VkDisplayProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayPlaneProperties2KHR(VkDisplayPlaneProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayModeProperties2KHR(VkDisplayModeProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayPlaneInfo2KHR(VkDisplayPlaneInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 76 && VK_KHR_get_display_properties2
void cleanup_VkDisplayPlaneCapabilities2KHR(VkDisplayPlaneCapabilities2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void cleanup_VkConditionalRenderingBeginInfoEXT(VkConditionalRenderingBeginInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkAttachmentDescription2KHR(VkAttachmentDescription2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkAttachmentReference2KHR(VkAttachmentReference2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkSubpassDescription2KHR(VkSubpassDescription2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkSubpassDependency2KHR(VkSubpassDependency2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkRenderPassCreateInfo2KHR(VkRenderPassCreateInfo2KHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkSubpassBeginInfoKHR(VkSubpassBeginInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_create_renderpass2
extern inline void cleanup_VkSubpassEndInfoKHR(VkSubpassEndInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void cleanup_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VkCommandBufferInheritanceConditionalRenderingInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 80 && VK_KHR_8bit_storage
extern inline void cleanup_VkPhysicalDevice8BitStorageFeaturesKHR(
    VkPhysicalDevice8BitStorageFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 80 && VK_EXT_conditional_rendering
void cleanup_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VkPhysicalDeviceConditionalRenderingFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
void cleanup_VkQueueFamilyCheckpointPropertiesNV(VkQueueFamilyCheckpointPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 82 && VK_NV_device_diagnostic_checkpoints
void cleanup_VkCheckpointDataNV(VkCheckpointDataNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCheckpointMarker
  free((void *)pData->pCheckpointMarker);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkPhysicalDeviceInlineUniformBlockFeaturesEXT(
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkPhysicalDeviceInlineUniformBlockPropertiesEXT(
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkWriteDescriptorSetInlineUniformBlockEXT(
    VkWriteDescriptorSetInlineUniformBlockEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_inline_uniform_block
void cleanup_VkDescriptorPoolInlineUniformBlockCreateInfoEXT(
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_KHR_vulkan_memory_model
extern inline void cleanup_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_vertex_attribute_divisor
void cleanup_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
void cleanup_VkImageViewASTCDecodeModeEXT(VkImageViewASTCDecodeModeEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 84 && VK_EXT_astc_decode_mode
void cleanup_VkPhysicalDeviceASTCDecodeFeaturesEXT(
    VkPhysicalDeviceASTCDecodeFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
void cleanup_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_representative_fragment_test
void cleanup_VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
void cleanup_VkPhysicalDeviceExclusiveScissorFeaturesNV(
    VkPhysicalDeviceExclusiveScissorFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_scissor_exclusive
void cleanup_VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    VkPipelineViewportExclusiveScissorStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pExclusiveScissors - exclusiveScissorCount
  if (pData->pExclusiveScissors != NULL) {
    for (uint32_t i = 0; i < pData->exclusiveScissorCount; ++i)
      cleanup_VkRect2D(&pData->pExclusiveScissors[i]);
  }
  free((void *)pData->pExclusiveScissors);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_corner_sampled_image
void cleanup_VkPhysicalDeviceCornerSampledImageFeaturesNV(
    VkPhysicalDeviceCornerSampledImageFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_compute_shader_derivatives
void cleanup_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_fragment_shader_barycentric
void cleanup_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shader_image_footprint
void cleanup_VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    VkPhysicalDeviceShaderImageFootprintFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkShadingRatePaletteNV(VkShadingRatePaletteNV const *pData) {
  // pShadingRatePaletteEntries - shadingRatePaletteEntryCount
  free((void *)pData->pShadingRatePaletteEntries);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPipelineViewportShadingRateImageStateCreateInfoNV(
    VkPipelineViewportShadingRateImageStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pShadingRatePalettes - viewportCount
  if (pData->pShadingRatePalettes != NULL) {
    for (uint32_t i = 0; i < pData->viewportCount; ++i)
      cleanup_VkShadingRatePaletteNV(&pData->pShadingRatePalettes[i]);
  }
  free((void *)pData->pShadingRatePalettes);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPhysicalDeviceShadingRateImageFeaturesNV(
    VkPhysicalDeviceShadingRateImageFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPhysicalDeviceShadingRateImagePropertiesNV(
    VkPhysicalDeviceShadingRateImagePropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
extern inline void cleanup_VkCoarseSampleLocationNV(VkCoarseSampleLocationNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkCoarseSampleOrderCustomNV(VkCoarseSampleOrderCustomNV const *pData) {
  // pSampleLocations - sampleLocationCount
  if (pData->pSampleLocations != NULL) {
    for (uint32_t i = 0; i < pData->sampleLocationCount; ++i)
      cleanup_VkCoarseSampleLocationNV(&pData->pSampleLocations[i]);
  }
  free((void *)pData->pSampleLocations);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_shading_rate_image
void cleanup_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCustomSampleOrders - customSampleOrderCount
  if (pData->pCustomSampleOrders != NULL) {
    for (uint32_t i = 0; i < pData->customSampleOrderCount; ++i)
      cleanup_VkCoarseSampleOrderCustomNV(&pData->pCustomSampleOrders[i]);
  }
  free((void *)pData->pCustomSampleOrders);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
void cleanup_VkPhysicalDeviceMeshShaderFeaturesNV(
    VkPhysicalDeviceMeshShaderFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
void cleanup_VkPhysicalDeviceMeshShaderPropertiesNV(
    VkPhysicalDeviceMeshShaderPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_NV_mesh_shader
extern inline void cleanup_VkDrawMeshTasksIndirectCommandNV(
    VkDrawMeshTasksIndirectCommandNV const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkRaytracingPipelineCreateInfoNVX(VkRaytracingPipelineCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  if (pData->pStages != NULL) {
    for (uint32_t i = 0; i < pData->stageCount; ++i)
      cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroupNumbers - stageCount
  free((void *)pData->pGroupNumbers);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkGeometryTrianglesNVX(VkGeometryTrianglesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkGeometryAABBNVX(VkGeometryAABBNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
extern inline void cleanup_VkGeometryDataNVX(VkGeometryDataNVX const *pData);
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkGeometryNVX(VkGeometryNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkAccelerationStructureCreateInfoNVX(
    VkAccelerationStructureCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometries - geometryCount
  if (pData->pGeometries != NULL) {
    for (uint32_t i = 0; i < pData->geometryCount; ++i)
      cleanup_VkGeometryNVX(&pData->pGeometries[i]);
  }
  free((void *)pData->pGeometries);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkBindAccelerationStructureMemoryInfoNVX(
    VkBindAccelerationStructureMemoryInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkDescriptorAccelerationStructureInfoNVX(
    VkDescriptorAccelerationStructureInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNVX(
    VkAccelerationStructureMemoryRequirementsInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 85 && VK_HEADER_VERSION <= 90 && VK_NVX_raytracing
void cleanup_VkPhysicalDeviceRaytracingPropertiesNVX(
    VkPhysicalDeviceRaytracingPropertiesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
extern inline void cleanup_VkConformanceVersionKHR(VkConformanceVersionKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_driver_properties
extern inline void cleanup_VkPhysicalDeviceDriverPropertiesKHR(
    VkPhysicalDeviceDriverPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_KHR_shader_atomic_int64
extern inline void cleanup_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkDrmFormatModifierPropertiesListEXT(
    VkDrmFormatModifierPropertiesListEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrmFormatModifierProperties - drmFormatModifierCount
  if (pData->pDrmFormatModifierProperties != NULL) {
    for (uint32_t i = 0; i < pData->drmFormatModifierCount; ++i)
      cleanup_VkDrmFormatModifierPropertiesEXT(&pData->pDrmFormatModifierProperties[i]);
  }
  free((void *)pData->pDrmFormatModifierProperties);
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
extern inline void cleanup_VkDrmFormatModifierPropertiesEXT(
    VkDrmFormatModifierPropertiesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pQueueFamilyIndices - queueFamilyIndexCount
  free((void *)pData->pQueueFamilyIndices);
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkImageDrmFormatModifierListCreateInfoEXT(
    VkImageDrmFormatModifierListCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrmFormatModifiers - drmFormatModifierCount
  free((void *)pData->pDrmFormatModifiers);
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkImageDrmFormatModifierExplicitCreateInfoEXT(
    VkImageDrmFormatModifierExplicitCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPlaneLayouts - drmFormatModifierPlaneCount
  if (pData->pPlaneLayouts != NULL) {
    for (uint32_t i = 0; i < pData->drmFormatModifierPlaneCount; ++i)
      cleanup_VkSubresourceLayout(&pData->pPlaneLayouts[i]);
  }
  free((void *)pData->pPlaneLayouts);
}
#endif

#if VK_HEADER_VERSION >= 86 && VK_EXT_image_drm_format_modifier
void cleanup_VkImageDrmFormatModifierPropertiesEXT(
    VkImageDrmFormatModifierPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 87 && VK_FUCHSIA_imagepipe_surface
void cleanup_VkImagePipeSurfaceCreateInfoFUCHSIA(VkImagePipeSurfaceCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_calibrated_timestamps
void cleanup_VkCalibratedTimestampInfoEXT(VkCalibratedTimestampInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_pci_bus_info
void cleanup_VkPhysicalDevicePCIBusInfoPropertiesEXT(
    VkPhysicalDevicePCIBusInfoPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void cleanup_VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    VkPhysicalDeviceTransformFeedbackFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void cleanup_VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    VkPhysicalDeviceTransformFeedbackPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 88 && VK_EXT_transform_feedback
void cleanup_VkPipelineRasterizationStateStreamCreateInfoEXT(
    VkPipelineRasterizationStateStreamCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkRayTracingShaderGroupCreateInfoNV(VkRayTracingShaderGroupCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkRayTracingPipelineCreateInfoNV(VkRayTracingPipelineCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  if (pData->pStages != NULL) {
    for (uint32_t i = 0; i < pData->stageCount; ++i)
      cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroups - groupCount
  if (pData->pGroups != NULL) {
    for (uint32_t i = 0; i < pData->groupCount; ++i)
      cleanup_VkRayTracingShaderGroupCreateInfoNV(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkGeometryTrianglesNV(VkGeometryTrianglesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkGeometryAABBNV(VkGeometryAABBNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
extern inline void cleanup_VkGeometryDataNV(VkGeometryDataNV const *pData);
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkGeometryNV(VkGeometryNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkAccelerationStructureInfoNV(VkAccelerationStructureInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometries - geometryCount
  if (pData->pGeometries != NULL) {
    for (uint32_t i = 0; i < pData->geometryCount; ++i)
      cleanup_VkGeometryNV(&pData->pGeometries[i]);
  }
  free((void *)pData->pGeometries);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkAccelerationStructureCreateInfoNV(VkAccelerationStructureCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkBindAccelerationStructureMemoryInfoNV(
    VkBindAccelerationStructureMemoryInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkWriteDescriptorSetAccelerationStructureNV(
    VkWriteDescriptorSetAccelerationStructureNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkAccelerationStructureMemoryRequirementsInfoNV(
    VkAccelerationStructureMemoryRequirementsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_NV_ray_tracing
void cleanup_VkPhysicalDeviceRayTracingPropertiesNV(
    VkPhysicalDeviceRayTracingPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 91 && VK_AMD_memory_overallocation_behavior
void cleanup_VkDeviceMemoryOverallocationCreateInfoAMD(
    VkDeviceMemoryOverallocationCreateInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_separate_stencil_usage
extern inline void cleanup_VkImageStencilUsageCreateInfoEXT(
    VkImageStencilUsageCreateInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 93 && VK_EXT_scalar_block_layout
extern inline void cleanup_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
void cleanup_VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
void cleanup_VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 94 && VK_EXT_fragment_density_map
void cleanup_VkRenderPassFragmentDensityMapCreateInfoEXT(
    VkRenderPassFragmentDensityMapCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float16_int8
extern inline void cleanup_VkPhysicalDeviceFloat16Int8FeaturesKHR(
    VkPhysicalDeviceFloat16Int8FeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 95 && VK_KHR_shader_float_controls
extern inline void cleanup_VkPhysicalDeviceFloatControlsPropertiesKHR(
    VkPhysicalDeviceFloatControlsPropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_validation_features
void cleanup_VkValidationFeaturesEXT(VkValidationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pEnabledValidationFeatures - enabledValidationFeatureCount
  free((void *)pData->pEnabledValidationFeatures);

  // pDisabledValidationFeatures - disabledValidationFeatureCount
  free((void *)pData->pDisabledValidationFeatures);
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
extern inline void cleanup_VkPhysicalDeviceDepthStencilResolvePropertiesKHR(
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_KHR_depth_stencil_resolve
extern inline void cleanup_VkSubpassDescriptionDepthStencilResolveKHR(
    VkSubpassDescriptionDepthStencilResolveKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_budget
void cleanup_VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    VkPhysicalDeviceMemoryBudgetPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
void cleanup_VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    VkPhysicalDeviceMemoryPriorityFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_memory_priority
void cleanup_VkMemoryPriorityAllocateInfoEXT(VkMemoryPriorityAllocateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
extern inline void cleanup_VkPhysicalDeviceBufferAddressFeaturesEXT(
    VkPhysicalDeviceBufferAddressFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
extern inline void cleanup_VkBufferDeviceAddressInfoEXT(VkBufferDeviceAddressInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 97 && VK_EXT_buffer_device_address
void cleanup_VkBufferDeviceAddressCreateInfoEXT(VkBufferDeviceAddressCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_NV_dedicated_allocation_image_aliasing
void cleanup_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
void cleanup_VkPhysicalDeviceImageViewImageFormatInfoEXT(
    VkPhysicalDeviceImageViewImageFormatInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 99 && VK_EXT_filter_cubic
void cleanup_VkFilterCubicImageViewImageFormatPropertiesEXT(
    VkFilterCubicImageViewImageFormatPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
void cleanup_VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    VkPhysicalDeviceDepthClipEnableFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_EXT_depth_clip_enable
void cleanup_VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    VkPipelineRasterizationDepthClipStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void cleanup_VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    VkPhysicalDeviceCooperativeMatrixFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void cleanup_VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    VkPhysicalDeviceCooperativeMatrixPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 101 && VK_NV_cooperative_matrix
void cleanup_VkCooperativeMatrixPropertiesNV(VkCooperativeMatrixPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_metal_surface
void cleanup_VkMetalSurfaceCreateInfoEXT(VkMetalSurfaceCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLayer
  free((void *)pData->pLayer);
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_EXT_ycbcr_image_arrays
void cleanup_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    VkPhysicalDeviceYcbcrImageArraysFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 102 && VK_NVX_image_view_handle
void cleanup_VkImageViewHandleInfoNVX(VkImageViewHandleInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
void cleanup_VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    VkDisplayNativeHdrSurfaceCapabilitiesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_AMD_display_native_hdr
void cleanup_VkSwapchainDisplayNativeHdrCreateInfoAMD(
    VkSwapchainDisplayNativeHdrCreateInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_host_query_reset
extern inline void cleanup_VkPhysicalDeviceHostQueryResetFeaturesEXT(
    VkPhysicalDeviceHostQueryResetFeaturesEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_KHR_surface_protected_capabilities
void cleanup_VkSurfaceProtectedCapabilitiesKHR(VkSurfaceProtectedCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
extern inline void cleanup_VkPipelineCreationFeedbackEXT(
    VkPipelineCreationFeedbackEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_pipeline_creation_feedback
void cleanup_VkPipelineCreationFeedbackCreateInfoEXT(
    VkPipelineCreationFeedbackCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPipelineCreationFeedback
  if (pData->pPipelineCreationFeedback != NULL)
    cleanup_VkPipelineCreationFeedbackEXT(pData->pPipelineCreationFeedback);
  free((void *)pData->pPipelineCreationFeedback);

  // pPipelineStageCreationFeedbacks - pipelineStageCreationFeedbackCount
  if (pData->pPipelineStageCreationFeedbacks != NULL) {
    for (uint32_t i = 0; i < pData->pipelineStageCreationFeedbackCount; ++i)
      cleanup_VkPipelineCreationFeedbackEXT(&pData->pPipelineStageCreationFeedbacks[i]);
  }
  free((void *)pData->pPipelineStageCreationFeedbacks);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void cleanup_VkSurfaceFullScreenExclusiveInfoEXT(VkSurfaceFullScreenExclusiveInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void cleanup_VkSurfaceFullScreenExclusiveWin32InfoEXT(
    VkSurfaceFullScreenExclusiveWin32InfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 104 && VK_EXT_full_screen_exclusive
void cleanup_VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    VkSurfaceCapabilitiesFullScreenExclusiveEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_stream_descriptor_surface
void cleanup_VkStreamDescriptorSurfaceCreateInfoGGP(
    VkStreamDescriptorSurfaceCreateInfoGGP const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 105 && VK_GGP_frame_token
void cleanup_VkPresentFrameTokenGGP(VkPresentFrameTokenGGP const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
void cleanup_VkPhysicalDeviceVariablePointersFeatures(
    VkPhysicalDeviceVariablePointersFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_KHR_variable_pointers
extern inline void cleanup_VkPhysicalDeviceVariablePointersFeaturesKHR(
    VkPhysicalDeviceVariablePointersFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 106 && VK_VERSION_1_1
void cleanup_VkPhysicalDeviceShaderDrawParametersFeatures(
    VkPhysicalDeviceShaderDrawParametersFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 106 && VK_EXT_buffer_device_address
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    VkPhysicalDeviceBufferDeviceAddressFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 107 && VK_EXT_headless_surface
void cleanup_VkHeadlessSurfaceCreateInfoEXT(VkHeadlessSurfaceCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_KHR_uniform_buffer_standard_layout
extern inline void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(
    VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void cleanup_VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    VkPhysicalDeviceCoverageReductionModeFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void cleanup_VkPipelineCoverageReductionStateCreateInfoNV(
    VkPipelineCoverageReductionStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 108 && VK_NV_coverage_reduction_mode
void cleanup_VkFramebufferMixedSamplesCombinationNV(
    VkFramebufferMixedSamplesCombinationNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
extern inline void cleanup_VkPerformanceValueINTEL(VkPerformanceValueINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkInitializePerformanceApiInfoINTEL(VkInitializePerformanceApiInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
extern inline void cleanup_VkQueryPoolCreateInfoINTEL(VkQueryPoolCreateInfoINTEL const *pData);
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceMarkerInfoINTEL(VkPerformanceMarkerInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceStreamMarkerInfoINTEL(VkPerformanceStreamMarkerInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceOverrideInfoINTEL(VkPerformanceOverrideInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_INTEL_performance_query
void cleanup_VkPerformanceConfigurationAcquireInfoINTEL(
    VkPerformanceConfigurationAcquireInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 109 && VK_HEADER_VERSION <= 114 && VK_INTEL_shader_integer_functions2
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2INTEL(
    VkPhysicalDeviceShaderIntegerFunctions2INTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
void cleanup_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    VkPhysicalDeviceShaderSMBuiltinsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_NV_shader_sm_builtins
void cleanup_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 110 && VK_EXT_fragment_shader_interlock
void cleanup_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_shader_demote_to_helper_invocation
void cleanup_VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
void cleanup_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 113 && VK_EXT_texel_buffer_alignment
void cleanup_VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT(
    VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
extern inline void cleanup_VkPhysicalDeviceImagelessFramebufferFeaturesKHR(
    VkPhysicalDeviceImagelessFramebufferFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
extern inline void cleanup_VkFramebufferAttachmentsCreateInfoKHR(
    VkFramebufferAttachmentsCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
extern inline void cleanup_VkFramebufferAttachmentImageInfoKHR(
    VkFramebufferAttachmentImageInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 114 && VK_KHR_imageless_framebuffer
extern inline void cleanup_VkRenderPassAttachmentBeginInfoKHR(
    VkRenderPassAttachmentBeginInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 115 && VK_KHR_shader_float16_int8
extern inline void cleanup_VkPhysicalDeviceShaderFloat16Int8FeaturesKHR(
    VkPhysicalDeviceShaderFloat16Int8FeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 115 && VK_INTEL_shader_integer_functions2
void cleanup_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
void cleanup_VkPhysicalDeviceSubgroupSizeControlPropertiesEXT(
    VkPhysicalDeviceSubgroupSizeControlPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 116 && VK_EXT_subgroup_size_control
void cleanup_VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT(
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
extern inline void cleanup_VkNativeBufferUsage2ANDROID(VkNativeBufferUsage2ANDROID const *pData);
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
void cleanup_VkSwapchainImageCreateInfoANDROID(VkSwapchainImageCreateInfoANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_ANDROID_native_buffer
void cleanup_VkPhysicalDevicePresentationPropertiesANDROID(
    VkPhysicalDevicePresentationPropertiesANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_texture_compression_astc_hdr
void cleanup_VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
    VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_index_type_uint8
void cleanup_VkPhysicalDeviceIndexTypeUint8FeaturesEXT(
    VkPhysicalDeviceIndexTypeUint8FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void cleanup_VkPhysicalDeviceLineRasterizationFeaturesEXT(
    VkPhysicalDeviceLineRasterizationFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void cleanup_VkPhysicalDeviceLineRasterizationPropertiesEXT(
    VkPhysicalDeviceLineRasterizationPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 117 && VK_EXT_line_rasterization
void cleanup_VkPipelineRasterizationLineStateCreateInfoEXT(
    VkPipelineRasterizationLineStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_shader_core_properties2
void cleanup_VkPhysicalDeviceShaderCoreProperties2AMD(
    VkPhysicalDeviceShaderCoreProperties2AMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_EXT_subgroup_size_control
void cleanup_VkPhysicalDeviceSubgroupSizeControlFeaturesEXT(
    VkPhysicalDeviceSubgroupSizeControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 118 && VK_AMD_pipeline_compiler_control
void cleanup_VkPipelineCompilerControlCreateInfoAMD(
    VkPipelineCompilerControlCreateInfoAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineInfoKHR(VkPipelineInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutablePropertiesKHR(VkPipelineExecutablePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutableInfoKHR(VkPipelineExecutableInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutableStatisticKHR(VkPipelineExecutableStatisticKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 119 && VK_KHR_pipeline_executable_properties
void cleanup_VkPipelineExecutableInternalRepresentationKHR(
    VkPipelineExecutableInternalRepresentationKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if VK_HEADER_VERSION >= 121 && VK_AMD_device_coherent_memory
void cleanup_VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    VkPhysicalDeviceCoherentMemoryFeaturesAMD const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 123 && VK_KHR_shader_subgroup_extended_types
extern inline void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
extern inline void cleanup_VkPhysicalDeviceTimelineSemaphoreFeaturesKHR(
    VkPhysicalDeviceTimelineSemaphoreFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
extern inline void cleanup_VkPhysicalDeviceTimelineSemaphorePropertiesKHR(
    VkPhysicalDeviceTimelineSemaphorePropertiesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
extern inline void cleanup_VkSemaphoreTypeCreateInfoKHR(VkSemaphoreTypeCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
extern inline void cleanup_VkTimelineSemaphoreSubmitInfoKHR(
    VkTimelineSemaphoreSubmitInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
extern inline void cleanup_VkSemaphoreWaitInfoKHR(VkSemaphoreWaitInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_timeline_semaphore
extern inline void cleanup_VkSemaphoreSignalInfoKHR(VkSemaphoreSignalInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 124 && VK_KHR_shader_clock
void cleanup_VkPhysicalDeviceShaderClockFeaturesKHR(
    VkPhysicalDeviceShaderClockFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
extern inline void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
extern inline void cleanup_VkAttachmentReferenceStencilLayoutKHR(
    VkAttachmentReferenceStencilLayoutKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 127 && VK_KHR_separate_depth_stencil_layouts
extern inline void cleanup_VkAttachmentDescriptionStencilLayoutKHR(
    VkAttachmentDescriptionStencilLayoutKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPhysicalDevicePerformanceQueryFeaturesKHR(
    VkPhysicalDevicePerformanceQueryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPhysicalDevicePerformanceQueryPropertiesKHR(
    VkPhysicalDevicePerformanceQueryPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPerformanceCounterKHR(VkPerformanceCounterKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPerformanceCounterDescriptionKHR(VkPerformanceCounterDescriptionKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkQueryPoolPerformanceCreateInfoKHR(VkQueryPoolPerformanceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCounterIndices - counterIndexCount
  free((void *)pData->pCounterIndices);
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkAcquireProfilingLockInfoKHR(VkAcquireProfilingLockInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 128 && VK_KHR_performance_query
void cleanup_VkPerformanceQuerySubmitInfoKHR(VkPerformanceQuerySubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
extern inline void cleanup_VkPhysicalDeviceBufferDeviceAddressFeaturesKHR(
    VkPhysicalDeviceBufferDeviceAddressFeaturesKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
extern inline void cleanup_VkBufferDeviceAddressInfoKHR(VkBufferDeviceAddressInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
extern inline void cleanup_VkBufferOpaqueCaptureAddressCreateInfoKHR(
    VkBufferOpaqueCaptureAddressCreateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
extern inline void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfoKHR(
    VkMemoryOpaqueCaptureAddressAllocateInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 129 && VK_KHR_buffer_device_address
extern inline void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfoKHR(
    VkDeviceMemoryOpaqueCaptureAddressInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 130 && VK_EXT_tooling_info
void cleanup_VkPhysicalDeviceToolPropertiesEXT(VkPhysicalDeviceToolPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
extern inline void cleanup_VkConformanceVersion(VkConformanceVersion const *pData);
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDriverProperties(VkPhysicalDeviceDriverProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceSamplerFilterMinmaxProperties(
    VkPhysicalDeviceSamplerFilterMinmaxProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSamplerReductionModeCreateInfo(VkSamplerReductionModeCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkImageFormatListCreateInfo(VkImageFormatListCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceShaderFloat16Int8Features(
    VkPhysicalDeviceShaderFloat16Int8Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceFloatControlsProperties(
    VkPhysicalDeviceFloatControlsProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceHostQueryResetFeatures(
    VkPhysicalDeviceHostQueryResetFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDescriptorIndexingFeatures(
    VkPhysicalDeviceDescriptorIndexingFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDescriptorIndexingProperties(
    VkPhysicalDeviceDescriptorIndexingProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDescriptorSetLayoutBindingFlagsCreateInfo(
    VkDescriptorSetLayoutBindingFlagsCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pBindingFlags - bindingCount
  free((void *)pData->pBindingFlags);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDescriptorSetVariableDescriptorCountAllocateInfo(
    VkDescriptorSetVariableDescriptorCountAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDescriptorCounts - descriptorSetCount
  free((void *)pData->pDescriptorCounts);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDescriptorSetVariableDescriptorCountLayoutSupport(
    VkDescriptorSetVariableDescriptorCountLayoutSupport const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentDescription2(VkAttachmentDescription2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentReference2(VkAttachmentReference2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassDescription2(VkSubpassDescription2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pInputAttachments - inputAttachmentCount
  if (pData->pInputAttachments != NULL) {
    for (uint32_t i = 0; i < pData->inputAttachmentCount; ++i)
      cleanup_VkAttachmentReference2(&pData->pInputAttachments[i]);
  }
  free((void *)pData->pInputAttachments);

  // pColorAttachments - colorAttachmentCount
  if (pData->pColorAttachments != NULL) {
    for (uint32_t i = 0; i < pData->colorAttachmentCount; ++i)
      cleanup_VkAttachmentReference2(&pData->pColorAttachments[i]);
  }
  free((void *)pData->pColorAttachments);

  // pResolveAttachments - colorAttachmentCount
  if (pData->pResolveAttachments != NULL) {
    for (uint32_t i = 0; i < pData->colorAttachmentCount; ++i)
      cleanup_VkAttachmentReference2(&pData->pResolveAttachments[i]);
  }
  free((void *)pData->pResolveAttachments);

  // pDepthStencilAttachment
  if (pData->pDepthStencilAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pDepthStencilAttachment);
  free((void *)pData->pDepthStencilAttachment);

  // pPreserveAttachments - preserveAttachmentCount
  free((void *)pData->pPreserveAttachments);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassDependency2(VkSubpassDependency2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkRenderPassCreateInfo2(VkRenderPassCreateInfo2 const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  if (pData->pAttachments != NULL) {
    for (uint32_t i = 0; i < pData->attachmentCount; ++i)
      cleanup_VkAttachmentDescription2(&pData->pAttachments[i]);
  }
  free((void *)pData->pAttachments);

  // pSubpasses - subpassCount
  if (pData->pSubpasses != NULL) {
    for (uint32_t i = 0; i < pData->subpassCount; ++i)
      cleanup_VkSubpassDescription2(&pData->pSubpasses[i]);
  }
  free((void *)pData->pSubpasses);

  // pDependencies - dependencyCount
  if (pData->pDependencies != NULL) {
    for (uint32_t i = 0; i < pData->dependencyCount; ++i)
      cleanup_VkSubpassDependency2(&pData->pDependencies[i]);
  }
  free((void *)pData->pDependencies);

  // pCorrelatedViewMasks - correlatedViewMaskCount
  free((void *)pData->pCorrelatedViewMasks);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassBeginInfo(VkSubpassBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassEndInfo(VkSubpassEndInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceTimelineSemaphoreFeatures(
    VkPhysicalDeviceTimelineSemaphoreFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceTimelineSemaphoreProperties(
    VkPhysicalDeviceTimelineSemaphoreProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSemaphoreTypeCreateInfo(VkSemaphoreTypeCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkTimelineSemaphoreSubmitInfo(VkTimelineSemaphoreSubmitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreValues - waitSemaphoreValueCount
  free((void *)pData->pWaitSemaphoreValues);

  // pSignalSemaphoreValues - signalSemaphoreValueCount
  free((void *)pData->pSignalSemaphoreValues);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSemaphoreWaitInfo(VkSemaphoreWaitInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSemaphores - semaphoreCount
  free((void *)pData->pSemaphores);

  // pValues - semaphoreCount
  free((void *)pData->pValues);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSemaphoreSignalInfo(VkSemaphoreSignalInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDevice8BitStorageFeatures(VkPhysicalDevice8BitStorageFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkanMemoryModelFeatures(
    VkPhysicalDeviceVulkanMemoryModelFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceShaderAtomicInt64Features(
    VkPhysicalDeviceShaderAtomicInt64Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceDepthStencilResolveProperties(
    VkPhysicalDeviceDepthStencilResolveProperties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkSubpassDescriptionDepthStencilResolve(
    VkSubpassDescriptionDepthStencilResolve const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDepthStencilResolveAttachment
  if (pData->pDepthStencilResolveAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pDepthStencilResolveAttachment);
  free((void *)pData->pDepthStencilResolveAttachment);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkImageStencilUsageCreateInfo(VkImageStencilUsageCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceScalarBlockLayoutFeatures(
    VkPhysicalDeviceScalarBlockLayoutFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceBufferDeviceAddressFeatures(
    VkPhysicalDeviceBufferDeviceAddressFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkBufferDeviceAddressInfo(VkBufferDeviceAddressInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkBufferOpaqueCaptureAddressCreateInfo(
    VkBufferOpaqueCaptureAddressCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceImagelessFramebufferFeatures(
    VkPhysicalDeviceImagelessFramebufferFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkFramebufferAttachmentsCreateInfo(VkFramebufferAttachmentsCreateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachmentImageInfos - attachmentImageInfoCount
  if (pData->pAttachmentImageInfos != NULL) {
    for (uint32_t i = 0; i < pData->attachmentImageInfoCount; ++i)
      cleanup_VkFramebufferAttachmentImageInfo(&pData->pAttachmentImageInfos[i]);
  }
  free((void *)pData->pAttachmentImageInfos);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkFramebufferAttachmentImageInfo(VkFramebufferAttachmentImageInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewFormats - viewFormatCount
  free((void *)pData->pViewFormats);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkRenderPassAttachmentBeginInfo(VkRenderPassAttachmentBeginInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAttachments - attachmentCount
  free((void *)pData->pAttachments);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentReferenceStencilLayout(VkAttachmentReferenceStencilLayout const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkAttachmentDescriptionStencilLayout(
    VkAttachmentDescriptionStencilLayout const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkMemoryOpaqueCaptureAddressAllocateInfo(
    VkMemoryOpaqueCaptureAddressAllocateInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkDeviceMemoryOpaqueCaptureAddressInfo(
    VkDeviceMemoryOpaqueCaptureAddressInfo const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan11Features(VkPhysicalDeviceVulkan11Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan11Properties(VkPhysicalDeviceVulkan11Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan12Features(VkPhysicalDeviceVulkan12Features const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 131 && VK_VERSION_1_2
void cleanup_VkPhysicalDeviceVulkan12Properties(VkPhysicalDeviceVulkan12Properties const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
void cleanup_VkRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 134 && VK_QCOM_render_pass_transform
void cleanup_VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    VkCommandBufferInheritanceRenderPassTransformInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGraphicsShaderGroupCreateInfoNV(VkGraphicsShaderGroupCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  if (pData->pStages != NULL) {
    for (uint32_t i = 0; i < pData->stageCount; ++i)
      cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pVertexInputState
  if (pData->pVertexInputState != NULL)
    cleanup_VkPipelineVertexInputStateCreateInfo(pData->pVertexInputState);
  free((void *)pData->pVertexInputState);

  // pTessellationState
  if (pData->pTessellationState != NULL)
    cleanup_VkPipelineTessellationStateCreateInfo(pData->pTessellationState);
  free((void *)pData->pTessellationState);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGraphicsPipelineShaderGroupsCreateInfoNV(
    VkGraphicsPipelineShaderGroupsCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGroups - groupCount
  if (pData->pGroups != NULL) {
    for (uint32_t i = 0; i < pData->groupCount; ++i)
      cleanup_VkGraphicsShaderGroupCreateInfoNV(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);

  // pPipelines - pipelineCount
  free((void *)pData->pPipelines);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
extern inline void cleanup_VkBindShaderGroupIndirectCommandNV(
    VkBindShaderGroupIndirectCommandNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
extern inline void cleanup_VkBindIndexBufferIndirectCommandNV(
    VkBindIndexBufferIndirectCommandNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
extern inline void cleanup_VkBindVertexBufferIndirectCommandNV(
    VkBindVertexBufferIndirectCommandNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
extern inline void cleanup_VkSetStateFlagsIndirectCommandNV(
    VkSetStateFlagsIndirectCommandNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
extern inline void cleanup_VkIndirectCommandsStreamNV(VkIndirectCommandsStreamNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkIndirectCommandsLayoutTokenNV(VkIndirectCommandsLayoutTokenNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pIndexTypes - indexTypeCount
  free((void *)pData->pIndexTypes);

  // pIndexTypeValues - indexTypeCount
  free((void *)pData->pIndexTypeValues);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkIndirectCommandsLayoutCreateInfoNV(
    VkIndirectCommandsLayoutCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pTokens - tokenCount
  if (pData->pTokens != NULL) {
    for (uint32_t i = 0; i < pData->tokenCount; ++i)
      cleanup_VkIndirectCommandsLayoutTokenNV(&pData->pTokens[i]);
  }
  free((void *)pData->pTokens);

  // pStreamStrides - streamCount
  free((void *)pData->pStreamStrides);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGeneratedCommandsInfoNV(VkGeneratedCommandsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStreams - streamCount
  if (pData->pStreams != NULL) {
    for (uint32_t i = 0; i < pData->streamCount; ++i)
      cleanup_VkIndirectCommandsStreamNV(&pData->pStreams[i]);
  }
  free((void *)pData->pStreams);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_generated_commands
void cleanup_VkGeneratedCommandsMemoryRequirementsInfoNV(
    VkGeneratedCommandsMemoryRequirementsInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
void cleanup_VkRayTracingShaderGroupCreateInfoKHR(
    VkRayTracingShaderGroupCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pShaderGroupCaptureReplayHandle
  free((void *)pData->pShaderGroupCaptureReplayHandle);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
void cleanup_VkRayTracingPipelineCreateInfoKHR(VkRayTracingPipelineCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStages - stageCount
  if (pData->pStages != NULL) {
    for (uint32_t i = 0; i < pData->stageCount; ++i)
      cleanup_VkPipelineShaderStageCreateInfo(&pData->pStages[i]);
  }
  free((void *)pData->pStages);

  // pGroups - groupCount
  if (pData->pGroups != NULL) {
    for (uint32_t i = 0; i < pData->groupCount; ++i)
      cleanup_VkRayTracingShaderGroupCreateInfoKHR(&pData->pGroups[i]);
  }
  free((void *)pData->pGroups);

  // pLibraryInfo
  if (pData->pLibraryInfo != NULL)
    cleanup_VkPipelineLibraryCreateInfoKHR(pData->pLibraryInfo);
  free((void *)pData->pLibraryInfo);

  // pLibraryInterface
  if (pData->pLibraryInterface != NULL)
    cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(pData->pLibraryInterface);
  free((void *)pData->pLibraryInterface);

  // pDynamicState
  if (pData->pDynamicState != NULL)
    cleanup_VkPipelineDynamicStateCreateInfo(pData->pDynamicState);
  free((void *)pData->pDynamicState);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkWriteDescriptorSetAccelerationStructureKHR(
    VkWriteDescriptorSetAccelerationStructureKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pAccelerationStructures - accelerationStructureCount
  free((void *)pData->pAccelerationStructures);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
extern inline void cleanup_VkTraceRaysIndirectCommandKHR(
    VkTraceRaysIndirectCommandKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_INTEL_performance_query
void cleanup_VkQueryPoolPerformanceQueryCreateInfoINTEL(
    VkQueryPoolPerformanceQueryCreateInfoINTEL const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_EXT_pipeline_creation_cache_control
void cleanup_VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT(
    VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryTrianglesDataKHR(
    VkAccelerationStructureGeometryTrianglesDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryAabbsDataKHR(
    VkAccelerationStructureGeometryAabbsDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryInstancesDataKHR(
    VkAccelerationStructureGeometryInstancesDataKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureGeometryKHR(VkAccelerationStructureGeometryKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureBuildGeometryInfoKHR(
    VkAccelerationStructureBuildGeometryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pGeometries - geometryCount
  if (pData->pGeometries != NULL) {
    for (uint32_t i = 0; i < pData->geometryCount; ++i)
      cleanup_VkAccelerationStructureGeometryKHR(&pData->pGeometries[i]);
  }
  free((void *)pData->pGeometries);

  // ppGeometries - geometryCount,1
  for (uint32_t i = 0; i < pData->geometryCount; ++i) {
    if (pData->ppGeometries[i] != NULL) {
      for (uint32_t j = 0; j < pData->1 [i]; ++j)
        cleanup_VkAccelerationStructureGeometryKHR(&pData->ppGeometries[i][j]);
    }
    free((void *)pData->ppGeometries[i]);
  }
  free((void *)pData->ppGeometries);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureCreateInfoKHR(
    VkAccelerationStructureCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
extern inline void cleanup_VkAabbPositionsKHR(VkAabbPositionsKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
extern inline void cleanup_VkAabbPositionsNV(VkAabbPositionsNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
extern inline void cleanup_VkTransformMatrixKHR(VkTransformMatrixKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
extern inline void cleanup_VkTransformMatrixNV(VkTransformMatrixNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
extern inline void cleanup_VkAccelerationStructureInstanceKHR(
    VkAccelerationStructureInstanceKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_ray_tracing
extern inline void cleanup_VkAccelerationStructureInstanceNV(
    VkAccelerationStructureInstanceNV const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureDeviceAddressInfoKHR(
    VkAccelerationStructureDeviceAddressInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkCopyAccelerationStructureInfoKHR(VkCopyAccelerationStructureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkCopyAccelerationStructureToMemoryInfoKHR(
    VkCopyAccelerationStructureToMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_acceleration_structure && VK_KHR_ray_tracing
void cleanup_VkCopyMemoryToAccelerationStructureInfoKHR(
    VkCopyMemoryToAccelerationStructureInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_ray_tracing_pipeline && VK_KHR_ray_tracing
void cleanup_VkRayTracingPipelineInterfaceCreateInfoKHR(
    VkRayTracingPipelineInterfaceCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_KHR_pipeline_library
void cleanup_VkPipelineLibraryCreateInfoKHR(VkPipelineLibraryCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pLibraries - libraryCount
  free((void *)pData->pLibraries);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
void cleanup_VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    VkPhysicalDeviceDiagnosticsConfigFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_NV_device_diagnostics_config
void cleanup_VkDeviceDiagnosticsConfigCreateInfoNV(
    VkDeviceDiagnosticsConfigCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkBindAccelerationStructureMemoryInfoKHR(
    VkBindAccelerationStructureMemoryInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDeviceIndices - deviceIndexCount
  free((void *)pData->pDeviceIndices);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureMemoryRequirementsInfoKHR(
    VkAccelerationStructureMemoryRequirementsInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkPhysicalDeviceRayTracingFeaturesKHR(
    VkPhysicalDeviceRayTracingFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkPhysicalDeviceRayTracingPropertiesKHR(
    VkPhysicalDeviceRayTracingPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
extern inline void cleanup_VkStridedBufferRegionKHR(VkStridedBufferRegionKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
extern inline void cleanup_VkAccelerationStructureBuildOffsetInfoKHR(
    VkAccelerationStructureBuildOffsetInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureCreateGeometryTypeInfoKHR(
    VkAccelerationStructureCreateGeometryTypeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_ray_tracing
void cleanup_VkAccelerationStructureVersionKHR(VkAccelerationStructureVersionKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // versionData - 2*VK_UUID_SIZE
  free((void *)pData->versionData);
}
#endif

#if VK_HEADER_VERSION >= 135 && VK_HEADER_VERSION <= 161 && VK_KHR_deferred_host_operations
void cleanup_VkDeferredOperationInfoKHR(VkDeferredOperationInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 137 && VK_NVX_image_view_handle
void cleanup_VkImageViewAddressPropertiesNVX(VkImageViewAddressPropertiesNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
void cleanup_VkPhysicalDeviceRobustness2FeaturesEXT(
    VkPhysicalDeviceRobustness2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 139 && VK_EXT_robustness2
void cleanup_VkPhysicalDeviceRobustness2PropertiesEXT(
    VkPhysicalDeviceRobustness2PropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void cleanup_VkDevicePrivateDataCreateInfoEXT(VkDevicePrivateDataCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void cleanup_VkPrivateDataSlotCreateInfoEXT(VkPrivateDataSlotCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_private_data
void cleanup_VkPhysicalDevicePrivateDataFeaturesEXT(
    VkPhysicalDevicePrivateDataFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
void cleanup_VkSamplerCustomBorderColorCreateInfoEXT(
    VkSamplerCustomBorderColorCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
void cleanup_VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    VkPhysicalDeviceCustomBorderColorPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 140 && VK_EXT_custom_border_color
void cleanup_VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    VkPhysicalDeviceCustomBorderColorFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 145 && VK_EXT_extended_dynamic_state
void cleanup_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    VkPhysicalDeviceExtendedDynamicStateFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_directfb_surface
void cleanup_VkDirectFBSurfaceCreateInfoEXT(VkDirectFBSurfaceCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // dfb
  free((void *)pData->dfb);

  // surface
  free((void *)pData->surface);
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
void cleanup_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    VkPhysicalDeviceFragmentDensityMap2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 146 && VK_EXT_fragment_density_map2
void cleanup_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    VkPhysicalDeviceFragmentDensityMap2PropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_shader_atomic_float
void cleanup_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 148 && VK_EXT_image_robustness
void cleanup_VkPhysicalDeviceImageRobustnessFeaturesEXT(
    VkPhysicalDeviceImageRobustnessFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 149 && VK_EXT_4444_formats
void cleanup_VkPhysicalDevice4444FormatsFeaturesEXT(
    VkPhysicalDevice4444FormatsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
void cleanup_VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    VkPhysicalDevicePortabilitySubsetFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_portability_subset
void cleanup_VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    VkPhysicalDevicePortabilitySubsetPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkBufferCopy2KHR(VkBufferCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkImageCopy2KHR(VkImageCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkImageBlit2KHR(VkImageBlit2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkBufferImageCopy2KHR(VkBufferImageCopy2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkImageResolve2KHR(VkImageResolve2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyBufferInfo2KHR(VkCopyBufferInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->regionCount; ++i)
      cleanup_VkBufferCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyImageInfo2KHR(VkCopyImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->regionCount; ++i)
      cleanup_VkImageCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkBlitImageInfo2KHR(VkBlitImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->regionCount; ++i)
      cleanup_VkImageBlit2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyBufferToImageInfo2KHR(VkCopyBufferToImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->regionCount; ++i)
      cleanup_VkBufferImageCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkCopyImageToBufferInfo2KHR(VkCopyImageToBufferInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->regionCount; ++i)
      cleanup_VkBufferImageCopy2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_HEADER_VERSION >= 154 && VK_KHR_copy_commands2
void cleanup_VkResolveImageInfo2KHR(VkResolveImageInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRegions - regionCount
  if (pData->pRegions != NULL) {
    for (uint32_t i = 0; i < pData->regionCount; ++i)
      cleanup_VkImageResolve2KHR(&pData->pRegions[i]);
  }
  free((void *)pData->pRegions);
}
#endif

#if VK_HEADER_VERSION >= 155 && VK_EXT_shader_image_atomic_int64
void cleanup_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void cleanup_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    VkPhysicalDeviceDeviceMemoryReportFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void cleanup_VkDeviceDeviceMemoryReportCreateInfoEXT(
    VkDeviceDeviceMemoryReportCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pUserData
  free((void *)pData->pUserData);
}
#endif

#if VK_HEADER_VERSION >= 156 && VK_EXT_device_memory_report
void cleanup_VkDeviceMemoryReportCallbackDataEXT(VkDeviceMemoryReportCallbackDataEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkFragmentShadingRateAttachmentInfoKHR(
    VkFragmentShadingRateAttachmentInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFragmentShadingRateAttachment
  if (pData->pFragmentShadingRateAttachment != NULL)
    cleanup_VkAttachmentReference2(pData->pFragmentShadingRateAttachment);
  free((void *)pData->pFragmentShadingRateAttachment);
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPipelineFragmentShadingRateStateCreateInfoKHR(
    VkPipelineFragmentShadingRateStateCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    VkPhysicalDeviceFragmentShadingRateFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    VkPhysicalDeviceFragmentShadingRatePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_fragment_shading_rate
void cleanup_VkPhysicalDeviceFragmentShadingRateKHR(
    VkPhysicalDeviceFragmentShadingRateKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 158 && VK_KHR_shader_terminate_invocation
void cleanup_VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR(
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 159 && VK_QCOM_rotated_copy_commands
void cleanup_VkCopyCommandTransformInfoQCOM(VkCopyCommandTransformInfoQCOM const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void cleanup_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 160 && VK_NV_fragment_shading_rate_enums
void cleanup_VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    VkPipelineFragmentShadingRateEnumStateCreateInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    VkPhysicalDeviceAccelerationStructureFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
void cleanup_VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    VkPhysicalDeviceRayTracingPipelineFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_query
void cleanup_VkPhysicalDeviceRayQueryFeaturesKHR(VkPhysicalDeviceRayQueryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    VkPhysicalDeviceAccelerationStructurePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
void cleanup_VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    VkPhysicalDeviceRayTracingPipelinePropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_ray_tracing_pipeline
extern inline void cleanup_VkStridedDeviceAddressRegionKHR(
    VkStridedDeviceAddressRegionKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
extern inline void cleanup_VkAccelerationStructureBuildRangeInfoKHR(
    VkAccelerationStructureBuildRangeInfoKHR const *pData);
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkAccelerationStructureVersionInfoKHR(
    VkAccelerationStructureVersionInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVersionData - 2*VK_UUID_SIZE
  free((void *)pData->pVersionData);
}
#endif

#if VK_HEADER_VERSION >= 162 && VK_KHR_acceleration_structure
void cleanup_VkAccelerationStructureBuildSizesInfoKHR(
    VkAccelerationStructureBuildSizesInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
void cleanup_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
    VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
void cleanup_VkMutableDescriptorTypeListVALVE(VkMutableDescriptorTypeListVALVE const *pData) {
  // pDescriptorTypes - descriptorTypeCount
  free((void *)pData->pDescriptorTypes);
}
#endif

#if VK_HEADER_VERSION >= 164 && VK_VALVE_mutable_descriptor_type
void cleanup_VkMutableDescriptorTypeCreateInfoVALVE(
    VkMutableDescriptorTypeCreateInfoVALVE const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMutableDescriptorTypeLists - mutableDescriptorTypeListCount
  if (pData->pMutableDescriptorTypeLists != NULL) {
    for (uint32_t i = 0; i < pData->mutableDescriptorTypeListCount; ++i)
      cleanup_VkMutableDescriptorTypeListVALVE(&pData->pMutableDescriptorTypeLists[i]);
  }
  free((void *)pData->pMutableDescriptorTypeLists);
}
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_zero_initialize_workgroup_memory
void cleanup_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 168 && VK_KHR_workgroup_memory_explicit_layout
void cleanup_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkMemoryBarrier2KHR(VkMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkImageMemoryBarrier2KHR(VkImageMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkBufferMemoryBarrier2KHR(VkBufferMemoryBarrier2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkDependencyInfoKHR(VkDependencyInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMemoryBarriers - memoryBarrierCount
  if (pData->pMemoryBarriers != NULL) {
    for (uint32_t i = 0; i < pData->memoryBarrierCount; ++i)
      cleanup_VkMemoryBarrier2KHR(&pData->pMemoryBarriers[i]);
  }
  free((void *)pData->pMemoryBarriers);

  // pBufferMemoryBarriers - bufferMemoryBarrierCount
  if (pData->pBufferMemoryBarriers != NULL) {
    for (uint32_t i = 0; i < pData->bufferMemoryBarrierCount; ++i)
      cleanup_VkBufferMemoryBarrier2KHR(&pData->pBufferMemoryBarriers[i]);
  }
  free((void *)pData->pBufferMemoryBarriers);

  // pImageMemoryBarriers - imageMemoryBarrierCount
  if (pData->pImageMemoryBarriers != NULL) {
    for (uint32_t i = 0; i < pData->imageMemoryBarrierCount; ++i)
      cleanup_VkImageMemoryBarrier2KHR(&pData->pImageMemoryBarriers[i]);
  }
  free((void *)pData->pImageMemoryBarriers);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkSemaphoreSubmitInfoKHR(VkSemaphoreSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkCommandBufferSubmitInfoKHR(VkCommandBufferSubmitInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkSubmitInfo2KHR(VkSubmitInfo2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pWaitSemaphoreInfos - waitSemaphoreInfoCount
  if (pData->pWaitSemaphoreInfos != NULL) {
    for (uint32_t i = 0; i < pData->waitSemaphoreInfoCount; ++i)
      cleanup_VkSemaphoreSubmitInfoKHR(&pData->pWaitSemaphoreInfos[i]);
  }
  free((void *)pData->pWaitSemaphoreInfos);

  // pCommandBufferInfos - commandBufferInfoCount
  if (pData->pCommandBufferInfos != NULL) {
    for (uint32_t i = 0; i < pData->commandBufferInfoCount; ++i)
      cleanup_VkCommandBufferSubmitInfoKHR(&pData->pCommandBufferInfos[i]);
  }
  free((void *)pData->pCommandBufferInfos);

  // pSignalSemaphoreInfos - signalSemaphoreInfoCount
  if (pData->pSignalSemaphoreInfos != NULL) {
    for (uint32_t i = 0; i < pData->signalSemaphoreInfoCount; ++i)
      cleanup_VkSemaphoreSubmitInfoKHR(&pData->pSignalSemaphoreInfos[i]);
  }
  free((void *)pData->pSignalSemaphoreInfos);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkQueueFamilyCheckpointProperties2NV(
    VkQueueFamilyCheckpointProperties2NV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkCheckpointData2NV(VkCheckpointData2NV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCheckpointMarker
  free((void *)pData->pCheckpointMarker);
}
#endif

#if VK_HEADER_VERSION >= 170 && VK_KHR_synchronization2
void cleanup_VkPhysicalDeviceSynchronization2FeaturesKHR(
    VkPhysicalDeviceSynchronization2FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 171 && VK_QNX_screen_surface
void cleanup_VkScreenSurfaceCreateInfoQNX(VkScreenSurfaceCreateInfoQNX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // context
  free((void *)pData->context);

  // window
  free((void *)pData->window);
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
void cleanup_VkImportMemoryZirconHandleInfoFUCHSIA(
    VkImportMemoryZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
void cleanup_VkMemoryZirconHandlePropertiesFUCHSIA(
    VkMemoryZirconHandlePropertiesFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_memory
void cleanup_VkMemoryGetZirconHandleInfoFUCHSIA(VkMemoryGetZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
void cleanup_VkImportSemaphoreZirconHandleInfoFUCHSIA(
    VkImportSemaphoreZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 173 && VK_FUCHSIA_external_semaphore
void cleanup_VkSemaphoreGetZirconHandleInfoFUCHSIA(
    VkSemaphoreGetZirconHandleInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
void cleanup_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
void cleanup_VkVertexInputBindingDescription2EXT(VkVertexInputBindingDescription2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_vertex_input_dynamic_state
void cleanup_VkVertexInputAttributeDescription2EXT(
    VkVertexInputAttributeDescription2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
void cleanup_VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    VkPhysicalDeviceColorWriteEnableFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_color_write_enable
void cleanup_VkPipelineColorWriteCreateInfoEXT(VkPipelineColorWriteCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorWriteEnables - attachmentCount
  free((void *)pData->pColorWriteEnables);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoQueueFamilyProperties2KHR(VkVideoQueueFamilyProperties2KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoProfilesKHR(VkVideoProfilesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pProfiles
  if (pData->pProfiles != NULL)
    cleanup_VkVideoProfileKHR(pData->pProfiles);
  free((void *)pData->pProfiles);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkPhysicalDeviceVideoFormatInfoKHR(VkPhysicalDeviceVideoFormatInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfiles
  if (pData->pVideoProfiles != NULL)
    cleanup_VkVideoProfilesKHR(pData->pVideoProfiles);
  free((void *)pData->pVideoProfiles);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoFormatPropertiesKHR(VkVideoFormatPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoProfileKHR(VkVideoProfileKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoCapabilitiesKHR(VkVideoCapabilitiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoGetMemoryPropertiesKHR(VkVideoGetMemoryPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pMemoryRequirements
  if (pData->pMemoryRequirements != NULL)
    cleanup_VkMemoryRequirements2(pData->pMemoryRequirements);
  free((void *)pData->pMemoryRequirements);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoBindMemoryKHR(VkVideoBindMemoryKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoPictureResourceKHR(VkVideoPictureResourceKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoReferenceSlotKHR(VkVideoReferenceSlotKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPictureResource
  if (pData->pPictureResource != NULL)
    cleanup_VkVideoPictureResourceKHR(pData->pPictureResource);
  free((void *)pData->pPictureResource);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_decode_queue
void cleanup_VkVideoDecodeInfoKHR(VkVideoDecodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  if (pData->pReferenceSlots != NULL) {
    for (uint32_t i = 0; i < pData->referenceSlotCount; ++i)
      cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264ProfileEXT(VkVideoDecodeH264ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264CapabilitiesEXT(VkVideoDecodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264SessionCreateInfoEXT(
    VkVideoDecodeH264SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(
    VkVideoDecodeH264SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264SessionParametersCreateInfoEXT(
    VkVideoDecodeH264SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH264SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264PictureInfoEXT(VkVideoDecodeH264PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSlicesDataOffsets - slicesCount
  free((void *)pData->pSlicesDataOffsets);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264DpbSlotInfoEXT(VkVideoDecodeH264DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h264
void cleanup_VkVideoDecodeH264MvcEXT(VkVideoDecodeH264MvcEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdMvc
  free((void *)pData->pStdMvc);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265ProfileEXT(VkVideoDecodeH265ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265CapabilitiesEXT(VkVideoDecodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265SessionCreateInfoEXT(
    VkVideoDecodeH265SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(
    VkVideoDecodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265SessionParametersCreateInfoEXT(
    VkVideoDecodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoDecodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265PictureInfoEXT(VkVideoDecodeH265PictureInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);

  // pSlicesDataOffsets - slicesCount
  free((void *)pData->pSlicesDataOffsets);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_decode_h265
void cleanup_VkVideoDecodeH265DpbSlotInfoEXT(VkVideoDecodeH265DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoSessionCreateInfoKHR(VkVideoSessionCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVideoProfile
  if (pData->pVideoProfile != NULL)
    cleanup_VkVideoProfileKHR(pData->pVideoProfile);
  free((void *)pData->pVideoProfile);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoSessionParametersCreateInfoKHR(
    VkVideoSessionParametersCreateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoSessionParametersUpdateInfoKHR(
    VkVideoSessionParametersUpdateInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoBeginCodingInfoKHR(VkVideoBeginCodingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceSlots - referenceSlotCount
  if (pData->pReferenceSlots != NULL) {
    for (uint32_t i = 0; i < pData->referenceSlotCount; ++i)
      cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoEndCodingInfoKHR(VkVideoEndCodingInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_queue
void cleanup_VkVideoCodingControlInfoKHR(VkVideoCodingControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void cleanup_VkVideoEncodeInfoKHR(VkVideoEncodeInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSetupReferenceSlot
  if (pData->pSetupReferenceSlot != NULL)
    cleanup_VkVideoReferenceSlotKHR(pData->pSetupReferenceSlot);
  free((void *)pData->pSetupReferenceSlot);

  // pReferenceSlots - referenceSlotCount
  if (pData->pReferenceSlots != NULL) {
    for (uint32_t i = 0; i < pData->referenceSlotCount; ++i)
      cleanup_VkVideoReferenceSlotKHR(&pData->pReferenceSlots[i]);
  }
  free((void *)pData->pReferenceSlots);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_KHR_video_encode_queue
void cleanup_VkVideoEncodeRateControlInfoKHR(VkVideoEncodeRateControlInfoKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264CapabilitiesEXT(VkVideoEncodeH264CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264SessionCreateInfoEXT(
    VkVideoEncodeH264SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(
    VkVideoEncodeH264SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264SessionParametersCreateInfoEXT(
    VkVideoEncodeH264SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH264SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264DpbSlotInfoEXT(VkVideoEncodeH264DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdPictureInfo
  free((void *)pData->pStdPictureInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264VclFrameInfoEXT(VkVideoEncodeH264VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pRefDefaultFinalList0Entries - refDefaultFinalList0EntryCount
  if (pData->pRefDefaultFinalList0Entries != NULL) {
    for (uint32_t i = 0; i < pData->refDefaultFinalList0EntryCount; ++i)
      cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefDefaultFinalList0Entries[i]);
  }
  free((void *)pData->pRefDefaultFinalList0Entries);

  // pRefDefaultFinalList1Entries - refDefaultFinalList1EntryCount
  if (pData->pRefDefaultFinalList1Entries != NULL) {
    for (uint32_t i = 0; i < pData->refDefaultFinalList1EntryCount; ++i)
      cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefDefaultFinalList1Entries[i]);
  }
  free((void *)pData->pRefDefaultFinalList1Entries);

  // pNaluSliceEntries - naluSliceEntryCount
  if (pData->pNaluSliceEntries != NULL) {
    for (uint32_t i = 0; i < pData->naluSliceEntryCount; ++i)
      cleanup_VkVideoEncodeH264NaluSliceEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pCurrentPictureInfo
  if (pData->pCurrentPictureInfo != NULL)
    cleanup_VkVideoEncodeH264DpbSlotInfoEXT(pData->pCurrentPictureInfo);
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264EmitPictureParametersEXT(
    VkVideoEncodeH264EmitPictureParametersEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppsIdEntries - ppsIdEntryCount
  free((void *)pData->ppsIdEntries);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264ProfileEXT(VkVideoEncodeH264ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_video_encode_h264
void cleanup_VkVideoEncodeH264NaluSliceEXT(VkVideoEncodeH264NaluSliceEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);

  // pRefFinalList0Entries - refFinalList0EntryCount
  if (pData->pRefFinalList0Entries != NULL) {
    for (uint32_t i = 0; i < pData->refFinalList0EntryCount; ++i)
      cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefFinalList0Entries[i]);
  }
  free((void *)pData->pRefFinalList0Entries);

  // pRefFinalList1Entries - refFinalList1EntryCount
  if (pData->pRefFinalList1Entries != NULL) {
    for (uint32_t i = 0; i < pData->refFinalList1EntryCount; ++i)
      cleanup_VkVideoEncodeH264DpbSlotInfoEXT(&pData->pRefFinalList1Entries[i]);
  }
  free((void *)pData->pRefFinalList1Entries);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
void cleanup_VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    VkPhysicalDeviceInheritedViewportScissorFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_NV_inherited_viewport_scissor
void cleanup_VkCommandBufferInheritanceViewportScissorInfoNV(
    VkCommandBufferInheritanceViewportScissorInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pViewportDepths
  if (pData->pViewportDepths != NULL)
    cleanup_VkViewport(pData->pViewportDepths);
  free((void *)pData->pViewportDepths);
}
#endif

#if VK_HEADER_VERSION >= 175 && VK_EXT_ycbcr_2plane_444_formats
void cleanup_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 176 && VK_EXT_extended_dynamic_state2
void cleanup_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    VkPhysicalDeviceExtendedDynamicState2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void cleanup_VkPhysicalDeviceProvokingVertexFeaturesEXT(
    VkPhysicalDeviceProvokingVertexFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void cleanup_VkPhysicalDeviceProvokingVertexPropertiesEXT(
    VkPhysicalDeviceProvokingVertexPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 177 && VK_EXT_provoking_vertex
void cleanup_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    VkPipelineRasterizationProvokingVertexStateCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
void cleanup_VkCuModuleCreateInfoNVX(VkCuModuleCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pData - dataSize
  free((void *)pData->pData);
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
void cleanup_VkCuFunctionCreateInfoNVX(VkCuFunctionCreateInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pName - null-terminated
  free((void *)pData->pName);
}
#endif

#if VK_HEADER_VERSION >= 178 && VK_NVX_binary_import
void cleanup_VkCuLaunchInfoNVX(VkCuLaunchInfoNVX const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParams - paramCount
  free((void *)pData->pParams);

  // pExtras - extraCount
  free((void *)pData->pExtras);
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
void cleanup_VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT(
    VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_EXT_global_priority_query
void cleanup_VkQueueFamilyGlobalPriorityPropertiesEXT(
    VkQueueFamilyGlobalPriorityPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 180 && VK_KHR_shader_subgroup_uniform_control_flow
void cleanup_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
extern inline void cleanup_VkMultiDrawInfoEXT(VkMultiDrawInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
extern inline void cleanup_VkMultiDrawIndexedInfoEXT(VkMultiDrawIndexedInfoEXT const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
void cleanup_VkPhysicalDeviceMultiDrawPropertiesEXT(
    VkPhysicalDeviceMultiDrawPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_multi_draw
void cleanup_VkPhysicalDeviceMultiDrawFeaturesEXT(
    VkPhysicalDeviceMultiDrawFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
void cleanup_VkSubpassShadingPipelineCreateInfoHUAWEI(
    VkSubpassShadingPipelineCreateInfoHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
void cleanup_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    VkPhysicalDeviceSubpassShadingPropertiesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_HUAWEI_subpass_shading
void cleanup_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    VkPhysicalDeviceSubpassShadingFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_EXT_physical_device_drm
void cleanup_VkPhysicalDeviceDrmPropertiesEXT(VkPhysicalDeviceDrmPropertiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void cleanup_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    VkPhysicalDeviceRayTracingMotionBlurFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void cleanup_VkAccelerationStructureGeometryMotionTrianglesDataNV(
    VkAccelerationStructureGeometryMotionTrianglesDataNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
void cleanup_VkAccelerationStructureMotionInfoNV(VkAccelerationStructureMotionInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
extern inline void cleanup_VkSRTDataNV(VkSRTDataNV const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
extern inline void cleanup_VkAccelerationStructureSRTMotionInstanceNV(
    VkAccelerationStructureSRTMotionInstanceNV const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
extern inline void cleanup_VkAccelerationStructureMatrixMotionInstanceNV(
    VkAccelerationStructureMatrixMotionInstanceNV const *pData);
#endif

#if VK_HEADER_VERSION >= 182 && VK_NV_ray_tracing_motion_blur
extern inline void cleanup_VkAccelerationStructureMotionInstanceNV(
    VkAccelerationStructureMotionInstanceNV const *pData);
#endif

#if VK_HEADER_VERSION >= 184
extern inline void cleanup_VkPipelineCacheHeaderVersionOne(
    VkPipelineCacheHeaderVersionOne const *pData);
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
void cleanup_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    VkPhysicalDeviceExternalMemoryRDMAFeaturesNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 184 && VK_NV_external_memory_rdma
void cleanup_VkMemoryGetRemoteAddressInfoNV(VkMemoryGetRemoteAddressInfoNV const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
void cleanup_VkPhysicalDevicePresentIdFeaturesKHR(
    VkPhysicalDevicePresentIdFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_id
void cleanup_VkPresentIdKHR(VkPresentIdKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pPresentIds - swapchainCount
  free((void *)pData->pPresentIds);
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_KHR_present_wait
void cleanup_VkPhysicalDevicePresentWaitFeaturesKHR(
    VkPhysicalDevicePresentWaitFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_EXT_shader_atomic_float2
void cleanup_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 185 && VK_HUAWEI_invocation_mask
void cleanup_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    VkPhysicalDeviceInvocationMaskFeaturesHUAWEI const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_EXT_primitive_topology_list_restart
void cleanup_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
void cleanup_VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR(
    VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 190 && VK_KHR_shader_integer_dot_product
void cleanup_VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR(
    VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 191 && VK_EXT_pageable_device_local_memory
void cleanup_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkImportMemoryBufferCollectionFUCHSIA(
    VkImportMemoryBufferCollectionFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionImageCreateInfoFUCHSIA(
    VkBufferCollectionImageCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionBufferCreateInfoFUCHSIA(
    VkBufferCollectionBufferCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionCreateInfoFUCHSIA(VkBufferCollectionCreateInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionPropertiesFUCHSIA(VkBufferCollectionPropertiesFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferConstraintsInfoFUCHSIA(VkBufferConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkSysmemColorSpaceFUCHSIA(VkSysmemColorSpaceFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkImageFormatConstraintsInfoFUCHSIA(VkImageFormatConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pColorSpaces
  if (pData->pColorSpaces != NULL)
    cleanup_VkSysmemColorSpaceFUCHSIA(pData->pColorSpaces);
  free((void *)pData->pColorSpaces);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkImageConstraintsInfoFUCHSIA(VkImageConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pFormatConstraints - formatConstraintsCount
  if (pData->pFormatConstraints != NULL) {
    for (uint32_t i = 0; i < pData->formatConstraintsCount; ++i)
      cleanup_VkImageFormatConstraintsInfoFUCHSIA(&pData->pFormatConstraints[i]);
  }
  free((void *)pData->pFormatConstraints);
}
#endif

#if VK_HEADER_VERSION >= 194 && VK_FUCHSIA_buffer_collection
void cleanup_VkBufferCollectionConstraintsInfoFUCHSIA(
    VkBufferCollectionConstraintsInfoFUCHSIA const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkDeviceBufferMemoryRequirementsKHR(VkDeviceBufferMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkBufferCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkDeviceImageMemoryRequirementsKHR(VkDeviceImageMemoryRequirementsKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pCreateInfo
  if (pData->pCreateInfo != NULL)
    cleanup_VkImageCreateInfo(pData->pCreateInfo);
  free((void *)pData->pCreateInfo);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkPhysicalDeviceMaintenance4FeaturesKHR(
    VkPhysicalDeviceMaintenance4FeaturesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_maintenance4
void cleanup_VkPhysicalDeviceMaintenance4PropertiesKHR(
    VkPhysicalDeviceMaintenance4PropertiesKHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_rgba10x6_formats
void cleanup_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_KHR_format_feature_flags2
void cleanup_VkFormatProperties3KHR(VkFormatProperties3KHR const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
void cleanup_VkDrmFormatModifierPropertiesList2EXT(
    VkDrmFormatModifierPropertiesList2EXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pDrmFormatModifierProperties - drmFormatModifierCount
  if (pData->pDrmFormatModifierProperties != NULL) {
    for (uint32_t i = 0; i < pData->drmFormatModifierCount; ++i)
      cleanup_VkDrmFormatModifierProperties2EXT(&pData->pDrmFormatModifierProperties[i]);
  }
  free((void *)pData->pDrmFormatModifierProperties);
}
#endif

#if VK_HEADER_VERSION >= 195 && VK_EXT_image_drm_format_modifier
extern inline void cleanup_VkDrmFormatModifierProperties2EXT(
    VkDrmFormatModifierProperties2EXT const *pData);
#endif

#if VK_HEADER_VERSION >= 195 && VK_ANDROID_external_memory_android_hardware_buffer
void cleanup_VkAndroidHardwareBufferFormatProperties2ANDROID(
    VkAndroidHardwareBufferFormatProperties2ANDROID const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
void cleanup_VkSamplerBorderColorComponentMappingCreateInfoEXT(
    VkSamplerBorderColorComponentMappingCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_border_color_swizzle
void cleanup_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    VkPhysicalDeviceBorderColorSwizzleFeaturesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265CapabilitiesEXT(VkVideoEncodeH265CapabilitiesEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265SessionCreateInfoEXT(
    VkVideoEncodeH265SessionCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdExtensionVersion
  if (pData->pStdExtensionVersion != NULL)
    cleanup_VkExtensionProperties(pData->pStdExtensionVersion);
  free((void *)pData->pStdExtensionVersion);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(
    VkVideoEncodeH265SessionParametersAddInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pVpsStd - vpsStdCount
  free((void *)pData->pVpsStd);

  // pSpsStd - spsStdCount
  free((void *)pData->pSpsStd);

  // pPpsStd - ppsStdCount
  free((void *)pData->pPpsStd);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265SessionParametersCreateInfoEXT(
    VkVideoEncodeH265SessionParametersCreateInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pParametersAddInfo
  if (pData->pParametersAddInfo != NULL)
    cleanup_VkVideoEncodeH265SessionParametersAddInfoEXT(pData->pParametersAddInfo);
  free((void *)pData->pParametersAddInfo);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265VclFrameInfoEXT(VkVideoEncodeH265VclFrameInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pNaluSliceEntries - naluSliceEntryCount
  if (pData->pNaluSliceEntries != NULL) {
    for (uint32_t i = 0; i < pData->naluSliceEntryCount; ++i)
      cleanup_VkVideoEncodeH265NaluSliceEXT(&pData->pNaluSliceEntries[i]);
  }
  free((void *)pData->pNaluSliceEntries);

  // pCurrentPictureInfo
  free((void *)pData->pCurrentPictureInfo);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265EmitPictureParametersEXT(
    VkVideoEncodeH265EmitPictureParametersEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // ppsIdEntries - ppsIdEntryCount
  free((void *)pData->ppsIdEntries);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265NaluSliceEXT(VkVideoEncodeH265NaluSliceEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceFinalLists
  if (pData->pReferenceFinalLists != NULL)
    cleanup_VkVideoEncodeH265ReferenceListsEXT(pData->pReferenceFinalLists);
  free((void *)pData->pReferenceFinalLists);

  // pSliceHeaderStd
  free((void *)pData->pSliceHeaderStd);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265ProfileEXT(VkVideoEncodeH265ProfileEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265DpbSlotInfoEXT(VkVideoEncodeH265DpbSlotInfoEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pStdReferenceInfo
  free((void *)pData->pStdReferenceInfo);
}
#endif

#if VK_HEADER_VERSION >= 196 && VK_EXT_video_encode_h265
void cleanup_VkVideoEncodeH265ReferenceListsEXT(VkVideoEncodeH265ReferenceListsEXT const *pData) {
  // pNext
  if (pData->pNext != NULL)
    cleanup_vk_struct(pData->pNext);
  free((void *)pData->pNext);

  // pReferenceList0Entries - referenceList0EntryCount
  if (pData->pReferenceList0Entries != NULL) {
    for (uint32_t i = 0; i < pData->referenceList0EntryCount; ++i)
      cleanup_VkVideoEncodeH265DpbSlotInfoEXT(&pData->pReferenceList0Entries[i]);
  }
  free((void *)pData->pReferenceList0Entries);

  // pReferenceList1Entries - referenceList1EntryCount
  if (pData->pReferenceList1Entries != NULL) {
    for (uint32_t i = 0; i < pData->referenceList1EntryCount; ++i)
      cleanup_VkVideoEncodeH265DpbSlotInfoEXT(&pData->pReferenceList1Entries[i]);
  }
  free((void *)pData->pReferenceList1Entries);

  // pReferenceModifications
  free((void *)pData->pReferenceModifications);
}
#endif

#endif // VK_STRUCT_CLEANUP_CONFIG_MAIN

#ifdef __cplusplus
}
#endif

#endif // VK_STRUCT_CLEANUP_H
